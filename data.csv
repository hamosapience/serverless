date,link,read,tags,type,title,author,source,thread,content,author_display_name,added_at
2020-06-08T19:08:23.000Z,https://twitter.com/_bravit/status/1270070183437221888,true,"[""best""]",tweet,_bravit_1270070183437221888,_bravit,twitter,null,"А все же смотрят документалки Нетфликса? Вот эта про леса из серии Our Planet просто фантастическая. Чернобыль в конце чудесно показан. https://t.co/MqVU8vMAZI
",Виталий Брагилевский,undefined
2020-02-26T21:41:42.000Z,https://medium.com/@aznakai/%D0%BA%D0%B0%D1%80%D1%82%D0%B0-%D0%BA%D1%83%D0%BB%D1%8C%D1%82%D1%83%D1%80%D0%BD%D1%8B%D1%85-%D1%80%D0%B0%D0%B7%D0%BB%D0%B8%D1%87%D0%B8%D0%B9-2a4c41662b94,false,"[""best""]",article,“Карта Культурных Различий”,null,pocket,null,"# “Карта Культурных Различий”

by [Ruslan Fazlyev](https://medium.com/@aznakai), [medium.com](http://medium.com)  
February 28, 2020 03:42 AM

# “Карта Культурных Различий”

# Обзор и конспект книги Эрин Мейер

Мой рейтинг: 10/10

Книга обучает работе с другими культурами. Я читал книги про международное сотрудничество до этого. В голове не осталось НИЧЕГО. Эта же книга уникальна, обязательна к прочтению любому кто хочет быть успешным в международной компании.

Очень жалею что не наткнулся на это знание до переезда в США. Как часто в моих конспектах, к содержанию книги ниже добавляю и личный опыт.

# Концепция

Книга задает 8 простых осей по которым дифференциирует культуры:

*   Контекст (низкий — высокий)
*   Критика (прямая — непрямая)
*   Убеждение (конкретное — концептуальное)
*   Дистанция власти (эгалитаризм — иерархия)
*   Принятие решения (консентное — иерархичное)
*   Доверие (задачи — отношения)
*   Несогласие (конфронтация — избегание)
*   Время (жесткое — гибкое)

Принятое в основной массе поведение в каждой из культур отмечено точкой по каждой из осей. По относительному положению культур по оси можно понять как отличается другая культура от твоей. Немецкая, например, культура будет иметь гораздо более жесткое время, чем русская культура. Но русская культура — более жесткое время чем арабская. Поэтому немцы должны и с арабами и с русскими делать поправку в сторону гибкости, а русские — быть гибче с арабами и жестче с немцами.

Американская и английская культуры — близки. При этом англиская чуть ближе к Европе.

# Контекст (низкий — высокий)

Культура с супер-низким контекстом: слова значат ровно то что они значат.

Культура с супер-высоким контекстом: реальный смысл всегда между строк. Говоря нужно намекать, а слушая — додумывать.

Культуры с низким контекстом: США, Нидерланды. С высоким: Япония, Китай.

Россия позиционируется как культура со “средним” контекстом, т.е. отноистельно США — с высоким. Но мое наблюдение — в США контекст гораздо выше. Возможно, как и пишет автор, носители культуры редко способны увидеть свою культуру сами, разве что через различия с другими. Так что Мейер явно недооценивает высокий контекст в США. Здесь мне гораздо больше приходится читать между строк.

Что делать, общаясь с высоким контекстом? Старательно слушать. Явно запрашивать прояснить, возможно более чем один раз и разными способами. Ведь пример высокого контекста — это ни за что не сознаваться что голоден (не вежливо!).

Высокий контекст не только сам “кодирует” сообщения, но и ожидает такого от вас, а значит будет искать скрытый смысл в ваших словах.

Какое общение самое сложное? Между культурами низкого и низкого контекста? Низкого и высокого? Нифига подобного! Сложнее всего — когда две разных культуры высокого контекста, с разным контекстом. Они будут кодировать сообщения используя разные смыслы.

От себя, вне книги: американцы совершенно недооценивают свой высокий контекст. Что значит фраза “Is there anything else we should discuss?” Да, вопрос “что еще?”, но кроме того она значит “Я все что хотел обсудил. Заканчиваем звонок?”. А чего стоит типичное американское “Hey, we should hang out, have a lunch or something!”, за которым никогда не идет, собственно, ланча? Или американское “spend more time with family”, которое значит что директор уволен.

Культура Эквид в России — культура супер-низкого контекста. Все всегда напрямую. Значительно ниже (вопреки карте) чем в США. Культура X-Cart — чуть повыше: я бывало замечал поиск тайных смыслов.

# Критика (прямая — непрямая)

Вот тут со Штатами вообще сложно. Обычно культуры с низким контекстом имеют прямую критику, а с высоким — непрямую. Но в Штатах низкий контекст и непрямая критика.

Что есть прямая критика? Это как в России: босс пришел и наорал на сотрудника, не стесняясь сгущать краски. Или как в Эквиде, когда не кричим но говорим все как есть, чтобы помочь человеку улучшиться.

Непрямая критика — это как в США. Вот чуваку задание: нарисовать зеленого человечка с двумя ногами. Задание провалено полностью. Что скажет менеджер? “Замечательная картинка, спасибо! Вот только нужно чтобы не синий был, а зеленый, и был похож на человека а не на таракана, и ног нужно две а не шесть”.

Американское же изобретение: “shit sandwich”: положительная обратная связь, отрицательная, опять положительная. Причем вся обертка лишь средство доставки наполнителя так чтобы не оскорбился никто. Еще американское: три положительных обратных связи, одна отрицательная. Т.е. если вам дали три хороших отзыва и сразу плохой, особое внимание уделяйте плохому. Вы можете оценивать ситуацию как “я умничка, и мне советуют как быть еще лучше”, а это может быть ситуация “почини или я тебя уволю”.

Но шкала длинная. Американская критика покажется прямой по сравнению с Азией, где потери лица всегда нужно избегать. Критика по азиатски? Без критики. Как дырка от бублика: дырка задается самим бубликом. Предположим, книга из трех глав, а одна — отстой, нужно переделать. Мы говорим: “Ох какой вы, Лао-Мао, молодец! И первая глава такая прелесть, написана так точно, обязательно возьмем в печать. И вторая глава такая красивая, тоже непременно напечатаем! И глав-то вы аж целых три написали, умничка какой, нам ведь три и нужно!”. И это еще не все с азиатами! Нужны предварительные ласки, сказав что мол нам Лао-Мао нужно обсудить такую-то важную тему. Потом ужин в хорошем месте, и за этим ужином, с уважением, скормить бублик.

Еще про американцев: для них дети и семья — святое. Никогда нельзя упрекнуть в рабочем фейле если тому была домашняя причина. Публичный негативный фидбек — оскорбление. Т.е. нечаянно нажимая на эти кнопки можно вменяемого сотрудника довести до осатанения полного, достаточно пары нажатий.

# Усилители и смягчители

_“Дамы и Господа, у нас небольшая проблема: все четыре двигателя самолета остановились от вулканической пыли.”_ — реальное сообщение пилота “Боинга”.

Из “Irishman”:

Whispers DiTullio : _“To tell you the truth, I’m a little concerned.”_  
Frank Sheeran : _\[narrating\] “Whenever anybody says they’re a little concerned, they’re very concerned.”_  
Whispers DiTullio : _“As a matter of fact, I’m really more than a little concerned.”_  
Frank Sheeran : _\[narrating\] And when they say they’re more than a little concerned, they’re desperate_

Культуры с прямой обратной связью добавляют усилители. Иначе слушатель не поймет что речь идет о реальной проблеме. Культуры с непрямой обратной связью добавляют смягчители. Иначе слушатель подумает что небо упало на землю и чинить уже поздно.

Российский босс (и Французский, если судить по Карте): _“Да вы что, охуели тут все?! Бардак полный, развалили все к хуям!!”_

Американский: _“я немного обеспокоен ситуацией с поставками”_

“немного”, “слегка”, “a little”, “a bit”, “a little bit” — смягчители

“полный”, “недопустимо”, “очень”, “абсолютно”, “катастрофично”, “total”, “huge” — усилители.

Итого, усилители/смягчители — это фильтры, которые нужно накладывать при переводе с культуры на культуру, потому что культура их тоже применит. Но есть нюанс.

Работая с культурой с менее прямой обратной связью, все просто: добавляйте смягчители.

Работая с культурой с более прямой обратной связью, будьте осторожны. Не владея в совершенстве усилителями, вы можете применить ядерное оружие там где нужна была просто гаубица. Будьте вежливыми, и усиляйте в сторону неоскорбительных “серьезная проблема”, “очень” и т.п. Общайтесь твердо но уважительно.

Отдельный феномен — когда обратная связь становится прямой при большой разнице в иерархии вниз. В Китае, например, обратная связь очень осторожна, но при этом большому боссу совершенно нормально публично вкатывать в грязь младшего чувака (в России, к сожалению, часто тоже).

# Убеждение (концептуальное — конкретное)

На одной границе (концептуальное) — немцы с русскими, которые убеждать собеседника начинают с общих принципов, а потом приходят к конкретной ситуации и рекомендованному действию.

На другой — американцы, они начинают с практического конкретного действия а потом опционально объясняют его теоретические основы.

Проблемы понимания: американцу не дай вначале презентации конкретику — и он посчитает тебя пустым болтуном и закроется для информации. Ему нужны кейсы, практика, пример. Немцу не начни с принципов и с того как ты пришел к выводам — и он посчитает тебя пустым болтуном, держащим его за лоха.

Источники разного режима аргументирования — в школе. Кого как учили. И тут я понял почему в Штатах такая хреновая математика в школах! Математика — наука изначально абстрактная, она построена для того чтобы начинать с принципов. А американцы вначале пытаются “зарядить” кейсы а потом приходить к механикам за кейсами. Совершенно кривой метод для точных наук. Зато изначально более завернутые на кейсы бизнес и социальные науки в США развиты. А в России математика, физика, кодинг.

Пример из книги прям равен реальному примеру из Эквид. Вот наши американцы хотят что-то замутить, а все ресурсы — в России. Они разговаривают с тем кто может ресурсы дать. Описывают сразу что хотят сделать. Без “почему” и предварительных ласк. Для россиянина они “непродумали” и “неубедительно” несут пургу. Для них россиянин — бюрократ который блокирует ресурсы и замедляет работу.

# Дистанция власти (эгалитаризм — иерархия)

Эгалитаризм (Израиль, Дания, США, Эквид): босс — такой же чувак как и мы, один из равных. Низкая дистанция власти.

Иерархия, большая дистанция власти (Россия, Япония): босс — небожитель.

Культура эгалитаризма: босс ездит на работу на велике и ходит в худи и стоит со всеми в очереди. Настоящий лидер и классный чувак!

Культура эгалитаризма: босс ездит на Феррари и в костюме, обедает отдельно, общение по имени-отчеству. Наверное он зазнавшийся некомпетентный мудак и клоун который прячется от людей за титулами.

Культура иерархии: босс ездит на работу на велике и ходит в худи и стоит со всеми в очереди. А точно ли он босс? Он вообще компетентен? Он оскорбляет наш отдел что не такой пафосный как другие боссы! Придурок какой-то. Как он может быть генералом если курит сигаретки с рядовыми?! Что за панибратство?!

Культура иерархии: босс ездит на Феррари и в костюме, обедает отдельно, общение по имени-отчеству. Настоящий шах-падишах, вах какой у нас супер-босс, славься его имя и приведет он нас к успеху!

Тут мораль в том что применяя не тот культурный ключ можно при всем старании получить обратный желаемому результат.

Интересна бывает смесь. Например Эквид имеет эгалитарную культуру. Но при общении “наружу” в России ко мне вполне могут обратиться мои же ребята по имени-отчеству, чтобы говорить на языке этой самой “наружи”.

Внимание: в иерархичных культурах дикая аллергия на взаимодействие через уровень! Нельзя говорить с сотрудником минуя начальника, нельзя говорить с высшим начальником минуя среднего. В итоге это может даже приводить к тому что младшие сотрудники не отвечают на запросы, а средние бесятся, считая что обход их — сигнал младшему что средний будет уволен. И еще внимание-внимание: американские компании управляемые поколением baby boomers очень часто иерархичны в этом аспекте.

Мне так работать тяжело, меня прямо эмоционально это бесит. Я за подход Элона Маска и [Американских Морпехов](https://medium.com/@aznakai/warfighting-by-u-s-marine-corps-462b7ac0d862): требование чтобы коммуникация была непрямой, а по иерархии — это замедление и саботаж! Но работая кросскультурно важно давить эмоциональные обвинения и с максимальным уважением и пониманием относиться к другой культуре.

Как с таким работать? Хорошо работает явное описание требований. Например, что если я к кому-то обращаюсь, то это не недоверие другим звеньям, это просто эффективность коммуникации и я ожидаю такого всегда и всегда доступен.

# Принятие решения (консентное — иерархичное)

И тут опять Штаты удивляют своей сложной культурой. Она эгалитарная, но при этом принятие решений — иерархичное.

Иерархичное решение (США, Россия): босс сказал — молча выполняем. Решения быстро принимаются, быстро меняются под влиянием новой информации. Минус: маловато усилий в создание buy-in, что особенно с непривычки в других культурах мешает реализации.

Консентное решение (Германия, Ecwid, X-Cart, Япония): решение идет в столь же степени снизу как и сверху, босс советуется. К моменту принятия решения его понимает и считает правильным команда, оно быстро исполняется. Минус: решение принимается долго, принятое решение неохотно меняется.

Из-за высокой иерархичности, китайцы могут вообще не высказывать свое мнение, на случай чтобы оно ни дай Бог не совпало с мнением босса. При крайней иерархичности ошибку могут позволить совершить руководителю даже четко зная что это большая ошибка.

Японская консентная система решения “по кругу”: снизу идет инициатива, редактируется и дописывается по пути на верх, на самом вверху утверждается. Это дает консентность и вводные для всех, но приоритет решениям сверху. Что не понимают люди из других культур: на уровне босса решение уже почти невозможно изменить, слишком поздно, слишком много сделано.

Культуре X-Cart и Эквид, консентной, тяжело сталкиваться с менеджерской культурой в США (все поулыбались, обратная связь непрямая, но пришел босс и рубанул и ждет что ты просто будешь выполнять). Американцам с Ecwid/X-Cart важно инвестировать в buy-in команды. Россиянам важно понимать, что когда босс легко принимает решения и сразу прыгает к “выполняйте”, он так же легко может поменять решение на базе новых вводных.

BigD/SmallD: (**D**ecision), в культурах с высокой консентностью решения — с большой D, уже команда вовлечена, это коммитмент, его тяжело менять. С высокой иерархичностью — низкий D: решение можно и поменять. Strong opinions loosely held.

Возможно из-за этого часть сложностей интеграции Российской и Американской команд Эквид: в консентной системе Эквида внутреннее обсуждение менеджеров в России создает buy-in команды, который потом нелегко поменять просто инструкцией из США. И напротив, инструкция из США не имеет корней в менеджерском обсуждении в России и потому малосовместимо культурно.

# Как заставить сотрудников иерархичной культуры все же высказать мнение?

*   Поручи собраться, обсудить и потом предложить боссу решения/выводы. Сам не участвуй, выйди из комнаты. Отсутствие босса убирает иерархию.
*   Скажи что ожидаешь что на встречу люди должны придти с подготовленным заранее рассказом о своей точки зрения. Азиаты все равно согласуют между собой заранее, но в этом случае хоть реально свои мнения.
*   Спрашивай людей мнения явно, называя конкретного человека, иначе не скажут.
*   Еще система, совсем упертых проламывать: каждый сотрудник получает домашку: притащить 2–3 комментария на Post-It заметке. Заметки вешаются на доску анонимно. Потом все собираются и начинают голосовать за висящие анонимные заметки. Голосовать обязательно. После этого заметки с топом голосов принимаются как значимые наблюдения команды.

# Доверие (задачи — отношения)

Отношения (Россия, Франция, Китай): он нормальный чувак, мы с ним бухали, давно его знаем, будем работать с ним.

Задачи (США): цифры, отзывы, перфоманс текущий по сделке и по системе оценки показывают что этот поставщик более квалифицирован для задачи, будем работать с ним.

Везде, во всех культурах нужно социализироваться с клиентами/партнерами. Вопрос в количестве.

В Китае и Японии нажраться с кем-то в стельку и показать что не боишься своих слабостей, открыться — значит доказать что стоишь доверия. А для Американцев это шок “ну как же я с ним нажрусь, уважать же не будет”, или “нажрался, несерьезный и безответственный”.

В Штатах культура разделения личного и рабочего. Ты не показываешь настоящего себя никому. Одна из причин почему отношения на работе в Штатах — харам-харам. Этот слой изоляции. Это вообще важная часть понимания США: ты не показываешь себя настоящего. Хороший урок тем кто слишком клюет на лучезарные улыбки так поражающие впервые приехавших.

Россияне любят гостей из Штатов водить с собой на завтрак, обед и ужин, каждый день. Рабочая повестка ставится второй. Для Американцев, немного социальных взаимодействий вначале — хорошо, растопить лед. Но дальше это воспринимается как разгильдяйство. Американец предпочтет заранее обменяться ожиданиями от визита и идти по этой деловой повестке.

США — культура-**персик:** снаружи мягко, но пойдя глубже натыкаешься на косточку. Россия, Восточная Европа — **кокос**: вначале жестко, но если через это пройти то дальше нежная сочная мякоть.

Корни бизнес-культур не только в религиозной традиции прятать чувства, но и в силе судов. Чем сильнее суды, тем сильнее контракт. И на него можно положиться и работать на холодных рациональных условиях с незнакомцами. Когда суды слабые, нужна какая-то другая гарантия, что тебя не кинут. И Россия/Азия — это “я с ним бухал, нормальный пацан!”.

Бизнес-обед — везде хорошо, но в культуре Задач лучше заранее предупредить (а может и извиниться), если обед продлится более 90 минут.

# Несогласие (конфронтация — избегание)

Конфронтация — это ок (Россия, Франция, Германия): атака на аргумент изолирована от атаки на личность. Можно не соглашаться вслух, это может даже быть поводом для интересной беседы. Не страшно и даже интересно обсуждать потенциально конфронтационные темы: политику, религию.

Конфронтация — это не ок (США), или ваще ваще не ок (Япония): атака на аргумент идентична атаке на личность. Американцы как от огня бегут от обсуждения политики и религии, или открытого несогласия. Как у японцев я и подумать боюсь, но азиатам вообще сохранить лицо очень очень важно, и не дай Бог вам создать ситуации в которой азиат подумает что он потерял лицо.

Китаец не может спорить со старшим по возрасту или званию, что бы то ни было. См. выше трюк со сбором Post It бумажек чтобы это обойти.

Как общаться с культурой, которая избегает конфронтации? Куча дисклеймеров, полу-шутка (работает и при негативной обратной связи), скромность. Фраза “я попробую быть адвокатом дьявола, но что если…”. Ну или избегайте сложных тем, если можете.

Как общаться с конфронтационной культурой? Обсуждение сложных тем — признак интереса и даже демонстрация симпатии и интереса, поэтому не бойтесь их. Но юмор всегда помогает. И если с вами спорят о сложных темах, не воспринимайте несогласие как атаку на себя.

Если чувак из конфронтационной культуры задает сложные вопросы вам по презентации, и казалось бы атакует вашу тему контраргументами, это может быть не провал сделки и попытка ее засыпать, а наоборот: выражение интереса и глубокого вовлечения. Не сдавайтесь и смело ведите открытое обсуждение.

# Время (жесткое — гибкое)

Жесткое время (Германия, как экстрим, США как менее жесткое): время очень ценно, мы заранее его распределяем и придерживаемся плана, перераспределение создает хаос и рассинхрон, и это плохо. Жесткое время — дитя индустриализации. Заводы, фабрики, вокзалы.

Гибкое время (Россия посредине, жестко-гибкая :) , Италия гибче, Израиль — гибкая, Арабы — одна гибкость): гибкость очень ценна и жесткие договоренности мешают оптимизировать под события на месте (визит хорошего человека, новая возможность, хорошая погода). Это непобежденная индустриализацией ментальность живого человека который живет в природной среде.

У каждого из подхода есть ценность, важно это понимать.

В четком времени запрос на доп. время должен быть явным. Кончилось время на звонок? Нужно завершить или явно спросить “а не против ли все добавить времени”? Просто засидеться — хамство и слабость. Строгое время даже “хороший звонок” оценит как “плохой” если он не вписался во время.

Гибкое время: “так хорошо идет, зачем останавливаться?”. Завершить хорошую встречу вовремя когда есть возможность задержаться — хамство.

В жестком времени нужно быть вовремя (Германия — даже чуть раньше). Чем гибче время тем более ок опаздание (например 15 минут во Франции).

При кросскультурной работе всегда лучше ошибаться в сторону большей пунктуальности, вас не осудят. С концом лучше явно спрашивать, как лучше другой стороне.

Российское время почти такое же жесткое как в США с начала встречи, но гораздо гибче с конца.

Гибкость времени влияет на степень детализации агенды заранее, и на пред-выборы нюансов визита. Строгое время может спросить: курицу или рыбу вы будете на званном обеде через 3 месяца.

В сторогом времени (США), на вечеринку друзей нормально делать онлайн RSVP. Мне показалось удобным, пробовал сделать такое в России, писал заранее инструкции по проезду. Меня засыпали звонками “как проехать”. Никто ничего не читал, RSVP никто не делал.

Гибкому времени некомфортно делать коммитмент на большое время вперед.

В культурах с гибким временем даже встречу что была в календаре нужно подтверждать повторно за день-два. Я рос в более жесткой культуре времени чем Российская, меня всегда бесило, что вроде договрились месяц назад встретиться вот здесь в 15:00. Другой коммуникации не было. Прихожу — никого нет. И почему странный — я? :)

Если вы не подтвердили встречу с культурой с гибким временем за небольшое время, другая сторона искренне будет считать что вы и не планируете больше встречаться.

Собираясь работать с Израилем, помните: гибкое время! Будьте готовы что встречи будут не там и не тогда когда договорились, и координируйте много в реальном времени по мессенджеру.

Фонды и компании: Runa Capital, Ecwid, X-Cart более жесткое время чем в России. ITech Capital: очень гибкое время.

# Универсальный совет

Держите к себе более высокие стандарты, и прощайте другим культурам если у них в этой теме приняты менее жесткие рамки.

При продолжительной работе кросскультурной команды, лучше заранее собрать отдельную встречу на которой обсуждать только лишь эти культурные протоколы.

Само прочтение Culture Map стимулирует отмечать и понимать и принимать культурные особенности, повторюсь: прочитайте!

# Мои аттрибуты

Каждый человек может немного отличаться от базовой культуры, особенно экспат — и работать в нескольких.

Вот мои аттрибуты, возможно облегчит работу со мной:

*   Контекст: очень низкий, ниже чем в США и России. Осторожно учусь коммуницировать намеками иногда там где нужно, но не люблю это
*   Критика: прямая, но чуть смягчаю все-таки
*   Убеждение: концептуальное обычно, но бывает прыгаю в конкретное
*   Дистанция власти: эгалитаризм, в большей степени чем США и Россия
*   Принятие решения: очень консентное, больше чем США и Россия
*   Доверие: отношения, сильно более чем в США. Может чуть меньше России.
*   Несогласие: конфронтация мазафакааа! люблю эту фигню!
*   Время: жесткое, лишь чуть мягче чем в США. Но могу проявлять гибкость в оппортунистическом планировании на месте, и могу продлять легко то что “хорошо идет”.

# Не в книжке

Книга совершенно зря не дает еще одну шкалу: личного пространства. У американцев оно например больше чем в России. Когда россиянин говорит с американцем, россиянин часто не замечает что он “наседает” а собеседник продолжает отступать чтобы поддержать дистанцию. Когда же речь идет о “расхождении” траекторий людей, то разница огромна: россиянин молча протискивается в любую дырку. Некоторые возможно скажут “извините” если оттопчат ноги, но не все. Американец же чуть задев метровым магнитным полем другого говорит “excuse me”.

Чего не пишут в книгах, но что постоянно делают русские не так: четырехзначные числительные. Американцы не используют слово “тысяча”, если тысячи не ровные. Они считают сотнями:

*   5,000 — “five thousand”
*   5,300 — “fifty-three hundred”
*   5,325 — “fifty-three hundred twenty-five”
*   5,301 — “fifty-three hundred and one.

Не знаю, феномен ли это жесткого времени или убеждения начинающегося с конкретики, но в США очень важно перед созвоном или встречей выставить ожидания. Презентацию гораздо чаще отправляют заранее, чем в России. Плохие новости частично доставляют еще до созвона. Мне тяжело было найти баланс. Ну типа “если заранее будут знать что я скажу, то смысл говорить?” Но ожидание от звонка создать нужно, и если нет сильного риска превратного понимания, то и доп информацию можно выслать заранее чтобы человек мог подготовиться. Эффективные чуваки даже на звонках когда их будут оценивать спрашивают заранее, что будет обсуждаться и какие будут вопросы.

У меня есть понимание почему книга говорит про “высокий контекст” в России по сравнению с США, а по моему мнению все наоборот:

1.  США — страна с непрямой обратной связью. Почти вся непрямая речь в США — это та что может быть воспринята негативно. Например, “Is there anything else that you want do discuss?” в США значит не “ой, давай еще поговорим!” а “я все обсудил что хотел. Кладем трубку или у тебя есть что-то что не в списке?”. Т.е. это “звонок окончен!”. Как вам термин “aspirational merchants” означающих “non-transactional merchants, i.e. ones that don’t have actual business (yet)”?
2.  Средний россиянин недостаточно владеет языком чтобы читать между строк или понимать идиомы. Поэтому безотносительно привычек в Русском, на английский будет прямолинеен как лом. А вежливые уклончивые формулировки собеседника скорее всего не поймет. Делаю вывод: плохое владение языком снижает контекст.  
    Еще хуже фаза когда человек уже начинает понимать что скрытое сообщение есть, но все еще не владеет языком достаточно чтобы его прочитать. Начинается неуверенность и мисинтерпретация и поиск скрытых умыслов. Извинитесь за прямоту и говорите прямо!

Напоследок: хотите улучшить понимание другой культуры, язык? Спрашивайте! Спрашивайте собеседника что можно улучшить. Коммуницируйте, коммуницируйте, коммуницируйте. Если боитесь что сделали что-то не так и вас не поняли: будьте откровенны и скромны! “Ой, я не знаю вашей культуры. Боюсь что выглядел глупо или был не понят”. Меня спасало не раз.

PS Из дописанного после публикации:

*   Арбуз в США может считаться расистским символом, особенно в любой ассоциации с чернокожими. Уровень угрозы? Пожарного в Детройте уволили за то что угостил коллег арбузом. Коллеги же и донесли.
*   Мем “Pepe the Frog” может считаться расистским символом из-за того что его часто использовали праворадикальные группы.",null,undefined
2018-12-09T16:30:36.000Z,https://vc.ru/flood/39377-perfekcionizm-otrava-vosem-mysley-o-lichnoy-effektivnosti-i-strategiyah-uspeha,false,"[""productivity"",""best""]",article,«Перфекционизм — отрава»: восемь мыслей о личной эффективности и стратегиях успеха,null,pocket,null,"# «Перфекционизм — отрава»: восемь мыслей о личной эффективности и стратегиях успеха

by [Вадим Скворцов](https://www.facebook.com/SMMrussia/), [vc.ru](http://vc.ru)  
June 5, 2018 05:23 AM

[Советы](https://maxkotin.com/2018/06/02/personal-productivity/) от писателя и журналиста, автора онлайн-книги о бизнесе «[Параграф](https://maxkotin.com/2018/02/18/paragraph/)» Максима Котина.

Пожалуй, только коты и селфи. Только коты и селфи могут соперничать в популярности с публикациями о методах личной эффективности в соцсетях. Волей-неволей и я грешу этим жанром. На этой странице я собрал несколько самых популярных своих заметок о личной продуктивности, написанных в последние годы. Все они вызвали некоторый (отличный от нуля) отклик — а значит, возможно, не совсем уж безнадёжны.

## 1\. Секрет успеха — это не усердный труд

В последнее время зачем-то размышляю на разные банальные темы. Например: что отличает успешных людей от неуспешных.

Успешные люди любят говорить, что это усердный труд. Неправда. Есть естественный лимит эффективной работы, которую человек может выдать за день. Выше не прыгнешь.

Есть много людей, которые пашут с утра до ночи и без толку. Кассир в «Ашане» в Бирюлёво устаёт не меньше генерального директора калифорнийского стартапа. И как, думаете, у него с личной эффективностью?

В результате анализа разных кейсов — благо за пятнадцать лет в деловой журналистике материала накопилось достаточно — у меня получился такой вот списочек.

*   **Удача.** В серьёзном прорыве всегда есть элемент везения.
*   **Дар.** Если все тратят одинаковое количество энергии, то вперёд уходит тот, кто к этой деятельности лучше приспособлен.
*   **Фокус.** Многие люди начинают, бросают, начинают что-то другое. Из двух одинаково талантливых людей больший успех приходит к тому, кто долбит в одну точку.
*   **Амбиции.** Опять же: управлять одним магазином так же тяжело, как тысячей. Но часто у людей не хватает амбиций, чтобы замахнуться на тысячу.
*   **Смелость.** Если амбиции есть, а куража нет, останешься мечтателем. Многие успешные люди успешны прежде всего потому, что ничего не боятся и лезут напролом.

Итого. Удача от нас не зависит. Выбрав раз свой путь, мы по нему идём — и тут уж ничего не попишешь. Получается, что работать на успех мы можем только тремя способами: постоянно поднимать себе планку, не бояться и не позволять себе сомневаться в главном, долбить в одну точку.

## 2\. Ключевой ресурс — энергия, а не время

Чем дольше живёшь, тем острее ощущаешь, что ключевой ресурс для личной эффективности— это даже не время, а энергия. Можно иметь много хороших замыслов, но если не хватает пороху, мало что получится.

Не сразу удалось осознать, что для любых задач — умственных, творческих, волевых, даже бытовых — человек черпает энергию из одного источника. Хождение по магазинам в поисках хороших штанов так же истощает запасы энергии, как и интенсивная работа над рукописью.

Если от энергии всё и зависит, то как быть, чтобы повысить свою личную эффективность? Какие можно использовать методы?

Во-первых, уменьшать расходы:

*   создавать привычки (всё, что делается на автомате, сжигает меньше топлива);
*   не делать того, что расходует энергию, но не важно (смотри пиджаки Обамы, футболки Цукерберга);
*   менять фокус (чем дольше концентрируешься на одном, тем больше в конце сжигаешь энергии);
*   избегать стрессов, ссор — они сжигают энергию;
*   экономить — не обязательно эмоционально вкладываться в любое действие, учиться быть расслабленным там, где это позволяет обстановка, действовать в определённых ситуациях на автопилоте;
*   мысленно переводить задачи из категории «надо» (принуждение) в категорию «хочу» (исполнение желаний).

Во-вторых, надо пополнять запасы:

*   поймать волну, вдохновение, кураж — всё это сильно наполняет энергией, как правило, для этого нужно поставить перед собой какие-то интересные задачки, для этого люди и бросают себе всякие вызовы;
*   сформировать правильный круг общения (есть люди, которые вдохновляют на подвиги, а есть те, кто убивает последнюю волю к жизни);
*   до определённой степени — заниматься спортом (но если переборщить, эффект может быть обратным);
*   евреи не дураки были, что придумали шаббат — надо специально выделять себе время для подзарядки, запрещая работать.

Как-то так.

## 3\. Не надо ничего покупать

Покупать что-нибудь стоит только в случае крайней необходимости. Потому что любое приобретение влечёт за собой цепочку обременений и снижает личную эффективность. Скажем, купил ты классную компьютерную мышку, произведённую компанией Apple. А к ней же нужен ещё коврик. А ещё батарейки. А чтобы на батарейки не тратиться — аккумуляторы. А к аккумуляторам — зарядник.

Или вот часы купил, механические, раритетные. Так каждый день заводи. И раз в полгода-год изволь купить новый ремешок взамен истрепавшегося. А потом ещё стукнешь — придётся тащиться в мастерскую. А найти мастерскую нынче не так-то просто, потому что везде, где написано «ремонт часов», обычно только ремешки да батарейки меняют.

Или беспроводные наушники. К ним провод. Каждый день заряжать. Но иногда — в самый неподходящий момент — они всё равно садятся. Значит, ещё нужны в сумке резервные, проводные. То есть, взяв, например, рюкзак вместо сумки, не забудь переложить и те и другие. А потом обратно. Уф, уф… А ведь можно же и обойтись. В итоге я считаю так: лучше не рисковать и ничего вообще не покупать.

## 4\. План на два шага вперёд

Изобрёл гениальный в своей простоте метод повышения личной эффективности и получения от жизни всего, чего хочется.

В каждый момент времени нужно иметь план на два шага вперёд. Вроде «сейчас я буду делать это, а потом буду делать то». И когда «это» сделаешь, «то» становится «этим», а на место «того» поступает что-то ещё.

Я называю это «идти с ближним светом». Пришёл к выводу, что для меня это наиболее эффективная система управления собой. Почему?

*   Ситуация всё время меняется, планировать весь день просто бессмысленно. Но и не иметь никакого плана нельзя.
*   Если знаешь, что будешь делать потом, не впадаешь в ступор. Снижаются риски неправильных решений.
*   Настроение тоже изменчиво. Задача должна соответствовать уровню энергии. В 9 часов утра нельзя предсказать своё настроение в 18 часов вечера, но на два шага вперёд предсказать свой уровень энергии и подобрать подходящую задачу можно довольно точно.
*   При этом планирование сразу второго шага даёт достаточную дистанцию, чтобы не поддаваться целиком настроению, помогает видеть перспективу, правильно расставлять приоритеты.
*   Ещё часто надо что-то делать, а делать не хочется. Тогда на первый шаг планируешь что-нибудь попроще, на второй потяжелее. Исполнение лёгкого придаёт уверенности в себе и вдохновляет на сложное.

Всё хорошо, только периодически надо не забывать включать дальний свет, чтобы проверить, туда ли ты вообще прёшь.

## 5\. Зачем откладывать важное на потом

На каждый лайфхак есть свой контрлайфхак.

Вот многие умные люди пишут, что для достижения максимальной личной эффективности надо начало своего трудового дня посвящать не срочным делам, а важным. Якобы у каждого нормального человека есть какие-то заветные задумки, которые всё время приходится откладывать на потом под давлением обстоятельств. Так вот многие выдающиеся люди добиваются неординарных результатов потому, что они сперва всегда делают то, что им нужно, а не то, что нужно другим.

Мне кажется это резонным. С книгами зачастую только так это и работает. (Потому что книга — это такая вещь, которую всегда хочется отложить на потом. Ведь всегда есть что-нибудь куда более неотложное. А книга подождёт. Сдавать-то рукопись через год, не раньше.)

Однако ещё я заметил и обратную вещь. Иногда полезно отложить что-то заветное на самый конец дня.

Под конец дня силы на исходе — и заставить себя заняться какой-то обязательной, но не вдохновляющей рутиной просто немыслимо. При попытке выжать ещё час продуктивности организм просто отключается.

Но он же, зараза, магическим образом приободряется, если предложить ему заняться чем-то ему приятным. Ради заветного дела подлец оказывается способен на ещё один небольшой рывок.

## 6\. Чем вечерние новости лучше утренних

Лайф, простите грешного, хак.

Я ньюз-джанки со стажем. И постоянно ищу способы если не избавиться полностью от зависимости, то хотя бы держать её под контролем. Иначе повысить личную эффективность просто невозможно.

На прошлой неделе начал эксперимент. Запретил себе читать новости до 19 часов. То есть перешёл от модели потребления «утренней газеты» к «вечерней».

Значит, докладываю о результатах.

В течение дня освободилось столько свободного времени, что даже иногда не знаешь, чем заняться. Прибавилось энергии.

Раньше день начинался с погружения в какую-то очередную жуть (как известно, других новостей у них для нас нет). На то, чтобы вынырнуть, уходило немало времени и энергии.

То есть ерунда получалась какая-то: глупо тратить время на то, что от тебя не зависит, и не делать из-за этого то, что в силах изменить (или делать хуже из-за растраченной впустую энергии).

Но полностью отключаться от новостей нельзя. Это не выход. Выход — «вечерняя газета».

Под вечер остаётся не так много времени, чтобы переживать. Дела сделаны. Это как-то придаёт сил. Пару часов ещё попереживаешь — и спать. А за ночь полностью перезагружаешься. По утру уже не так страшно.

К тому же, пропуская день новостей, пропускаешь одновременно много ненужной ерунды. Кто-то что-то заявляет, потом опровергает, потом добавляет, потом уточняет, а потом оказывается, что вообще ничего не было.

Вместо того чтобы тратить жизнь на эту суету, вечером знакомишься с резюме — и всё.

Намерен продолжать.

## 7\. Перфекционизм — отрава

Я тут осознал, что главное для достижения личной эффективности — это выжечь в себе калёным железом стремление к совершенству. Особенно если хочется делать в жизни что-то стоящее.

Это только на первый взгляд перфекционизм — хорошая альтернатива пофигизму. Но он ничем не лучше.

Поработав с некоторым количеством крайне замороченных перфекционистов, я могу точно сказать, что результат у них всегда выходит хуже того, которого можно было бы достичь в этих обстоятельствах.

Собственно, перфекционизм и мешает: заставляет улучшать и без того хорошее (и тем самым всё портить или просто тратить время впустую), работать над деталями, которые на самом деле ничего не меняют, и главное — постоянно сомневаться в себе.

Перфекционизм — отрава.

Стоит допустить мысль о том, что совершенство допустимо, и даже в чём-то к нему приблизиться, как — бац! — тут же вылезет какое-то подлое несовершенство. И будет свербить. И мучить. И снижать эту самую эффективность.

Сделал вроде достойную работу — а где-то что-то не так, как воображалось, и вот уже радость, кажется, не та. Хотелось ведь, чтобы всё было идеально! Чтобы комар носа не подточил.

Купил вроде классную вещь, долго выбирал, советовался, переплатил — и всем она хороша, вот если бы не одна мелочь, так была бы вообще супер.

Но почему-то скоро начинает казаться, что в мелочи-то всё и дело. Уже и остальное не радует, а думаешь только об этой ерунде.

В общем, всё это путь к вечным мукам.

Поэтому теперь меня главный девиз: good enough. Стараюсь отринуть перфекционизм и принять новую веру. Ведь чтобы было счастье, всё — работа, вещи, обстоятельства — должно быть не идеальным, а просто достаточно хорошим.

Не более того.

## 8\. Один и тот же метод может сработать, а может и нет

Один крутой бизнесмен — из тех, чьи состояния подсчитывает некий американский журнал, — как-то сказал мне такую штуку: большинство людей совершенно не врубаются в бизнес-истории.

Читая о каких-нибудь известных предпринимателях, они думают, что надо повторять за ними. Если Джобс, Уолтон или Шульц делали так или эдак, то это и есть путь к успеху.

Но в бизнесе нет правил. Ситуация никогда не повторяется. Что сработало у Джобса, то не получилось бы у Шульца. Что актуально было в 1991 году, в 92-м уже было бы глупостью.

Более того, даже одна и та же компания может применить один и тот же инструмент и получить совершенно разные результаты. Этим бизнес и интересен — тут нельзя написать методичку по достижению успеха на все времена. Это больше искусство, чем наука.

Мне это запомнилось. И я всё думаю, что всё это так же применимо не только к компании, но и к человеку.

Мы все часто пытаемся вывести какие-то универсальные правила и методы личной эффективности, которые должны помочь нам стать продуктивнее, успешнее, счастливее. Но засада в том, что их просто не может быть.

Каждый человек не похож на другого. У каждого своя голова и свой расклад. Более того, каждый из нас постоянно изменяется, эволюционирует, что-то переосмысляет. Так же и ситуация постоянно меняется.

Поэтому главное — гибкость. Способность постоянно анализировать — себя, других, ситуацию. Адаптироваться к постоянно изменяющимся переменным. Пробовать. Анализировать. Пробовать снова. Не падать духом. И двигаться дальше.",null,undefined
2018-01-10T22:55:56.000Z,https://www.sports.ru/tribuna/blogs/golovin/1534868.html,false,"[""best""]",article,«С протезом проблема – во время секса скользит». Потерять ногу и сняться в рекламе Apple,null,pocket,null,"# «С протезом проблема – во время секса скользит». Потерять ногу и сняться в рекламе Apple

[sports.ru](http://sports.ru)

**Телеведущий Дмитрий Игнатов – о «Матч ТВ», работе с Марией Командной, издевательствах в армии и протезе за 4 миллиона.**

  

  

**– Ты потерял ногу в 22 года (шесть лет назад), потому что в армии на тебя упала ракетная установка С-300. Как это возможно?**

  

– Молодец, готовился. А то обычно приходят, спрашивают, я отвечаю какую-то хрень. Что медведь напал или редкая медуза на съемках документального фильма.

  

**– Как на самом деле?**

  

– С-300 оказалась неправильно установлена. Это же прицеп – к нему подъезжает машина и забирает. Из-за этого он находился то в боевом, то в походном состоянии. В один момент как-то неровно стоял. Я проходил мимо. А он завалился на бок. Все произошло так быстро, что я не успел среагировать.

  

**– Сразу отключился?**

  

– Да ты что. Помню все. Как орал, молился. Мне закрывали глаза. Держали за руку, будто в фильмах: «Не смотри! Говори со мной!». Отключили только в больнице – подошел врач, сделал укол. Очнулся от мамы, которая перед лицом маячила.

  

**– Сколько лежал под установкой?**

  

– Казалось, что вечность. На самом деле минут 15-20. За это время приехал кран, поднял ее.

  

**– С чем можно сравнить ту боль?**

  

– Она была какой-то странной. Я просто не понимал, что происходит, что на меня что-то упало. Даже сейчас момент падения не помню. Тогда – тем более. Только дико орал и чувствовал, что не могу пошевелить ногой. Но не врубался, что с ней. Меня же сразу оградили – не видно, что там внизу. Когда положили на носилки, понял, что-то не так. Но сил подняться уже не осталось.

  

**– На какой день очнулся?**

  

**–** Не знаю даже. Но уже без ноги. Ее нельзя было сохранить. Мне еще повезло, что в госпитале попал в пересменку – все врачи находились на месте. Они быстро приняли решение, что лучше спасти жизнь, чем сохранить коленку.

  

**– Молодцы.**

  

– Недели три-четыре я лежал в Северодвинске, где находилась воинская часть. Потом перевезли в Москву. Сразу попросил папу принести гантели, резинки. Хотел заниматься. Я же всегда любил спорт. Распрощался с ним только в студенчестве, когда переехал в Питер из Нарьян-Мара. 

  

**– Из Москвы Нарьян-Мар кажется адской жестью.**

  

– Ничего подобного. Просто холодно. Ветер такой сильный, что срывает крыши даже с пятиэтажек. Но главное впечатление от города – запах. Канализация есть не везде – в некоторых домах вместо туалетов дырки. Прямо в квартирах вместо унитаза. Под домом все это накапливается. И вот идешь с утра – мороз, свежесть и дерьмецо.

  

**– Вспоминаешь с радостью.**

  

– Так я позитивный. Даже в госпитале не терял этого чувства. Помню, на четвертый день в палату пришла психолог. Пообщаться. Начала и сразу поняла, что со мной все отлично. Сказала врачам: «Это мне нужен психолог, а не ему». Хотя рассказал ей, что снятся немцы.

  

**– Серьезно?**

  

– Да. Почему-то снились они, война, солдаты в РХБЗ-защите, стрельба. Один раз ночью даже описался от страха. Так стыдно было. Потом понял, что в моем положении это нормально – находился под какими-то сильными обезболивающими.

  

**– Лечение оплачивали?**

  

– Конечно, я же считался военным. И компенсацию от Минобороны получил – хватило на первый взнос на квартиру в Мытищах и часть протеза. Хотя имелся и конкретный ответственный за эту историю с падением С-300. Но человек растил ребенка. Мы решили, что лучше судиться с министерством, чем с конкретным человеком.

  

## **Отжимания, вонища**

  

  

** – Если бы мог изменить только одну вещь в жизни – не пошел бы в армию?**

  

– Пошел бы. Только на флот. Очень люблю лодки, море.

  

**– Надо же.**

  

– С армией вообще интересная история. Я ведь планировал служить военным журналистом. Даже в военкомате договорился об этом. В тот момент уже работал в ящике. На питерском ТВ вел мужскую программу. Офицеры узнали: «О, давай под Чеховом будешь. По профессии». Я подумал: «Вообще зашибись – сиди и пиши статейки». Согласился. Но на транспортировочном пункте кому-то лень было заполнить лишнюю бумагу, и меня отправили в Северодвинск в ракетные войска.

  

**– Мог совсем откосить?**

  

– А смысл? Я получил повестку – самому стало интересно. Плюс в семье все служили. Зачем скрываться?

  

**– Карьера развивается, и вдруг год теряешь.**

  

– Ну такие правила в стране. Да даже если сейчас призовут, скажут, что война, я с удовольствием пойду.

  

**– Ты хотел написать книгу про то, как круто в армии.**

  

– Вряд ли про круто. Вот про идиотизм могу. Про то, как мы ничего не делали. Просто сидели в классе и тупили. А старшины и лейтенанты вызывали к карте, чтобы повеселиться. Издевались: «Покажи нам Землю Франца-Иосифа. Покажи нам такой-то остров». Человек, который не знает, теряется.

  

**– Ты знал?**

  

– Да. Разок вызвали, спросили. Тыкнул. Они такие: «Ладно, иди отсюда». Если бы не ответил, делал бы 50 отжиманий или рассказывал, что такое двуножный строй.

  

**– Ох! **

  

– Армия – реально глупое время. Оружие в руках я держал всего два раза. Зато знал, сколько граммов масла мне положено в день и постоянно помогал майору в личных вопросах – что-то куда-то перенести, занести. Не армейское, а личное. А знаешь, что в армии самое главное?

  

**– Не уверен.**

  

– Кантик! Это ровный контур стрижки в районе шеи. Еще отвратительнее, что каждый день ты должен быть гладко выбрит. У меня щетина жесткая, растет быстро – в итоге ходил с раздражением. Брился-то в холодной воде.

  

**– Горячую не давали?**

  

– И душ отсутствовал. Казарма вообще без отопления. Носки не просыхали. Ноги всегда, как после ванной, когда ты там долго лежишь – такие распаренные. Вонища жуткая. И такой ад каждый день. Но через него мужчине надо пройти.

  

**– Зачем?**

  

– Отдать долг родине. Больше ничего. Вряд ли это как-то воспитает или сделает из тебя патриота. Скорее оппозиционера. Да и знаний никаких не даст, кроме географии.

  

## **ДЦП, Канделаки**

  

  

**– Кроме работы на ТВ, ты проводишь лекции о ребрендинге инвалидности. Что это значит?**

  

– Все просто. С чем в основном ассоциируется инвалид? С попрошайкой, который сидит на площади трех вокзалов, воняет, мешает окружающим и просит деньги. Или с чем-то непонятным, лежащим дома. Я объясняю, что есть и другие инвалиды. Нормальные, интеллигентные, которые хотят развиваться и приносить пользу обществу.

  

**– Люди этого не понимают?**

  

– Часто – да. Знаю много случаев, когда друзья без рук или ног приходили в больницу. В футболках, шортах. А им сами врачи говорили: «Ты чего тут людей пугаешь?». Или рождается у женщины ребенок с ДЦП. Какая первая мысль? «Что подумают окружающие, я родила урода!»

  

Особенно сильно этот пунктик сидит в голове у старшего поколения. Они помнят Советский Союз – время, когда инвалидов на улице не было. И не воспринимают человека по идеям и действиям. Только по внешнему виду. Вот молодежь не такая.

  

**– Почему?**

  

– Выросла на других примерах. Сейчас же куча мультиков и зарубежных фильмов, где много каких-то инвалидов. Над ними смеются, издеваются, они полноценные участники общества. Вспомни «Американского папашу», «Симпсонов», «Футураму», «1+1», «Форреста Гампа». Мы выросли на этом и спокойно воспринимаем подобных людей. Поэтому сегодня реально встретить инвалида в театре или на тусовке в «Симачеве».

  

**– То есть отношение к ним меняется?**

  

– Не так быстро, как хотелось бы. Вот ты спортивный журналист. Назовешь хотя бы пять фамилий паралимпийцев?

  

**– Только две.**

  

**–** Вот видишь. Они не герои в нашей стране. Они как ветераны. Вспоминают только во время Игр или когда есть допинговые скандалы. Все остальное время паралимпийцы –  какие-то непонятные существа, которые качают свои права, хотят новые коляски, модные протезы.

  

**– Разве они должны считаться героями? Ты ведь сам говорил, что инвалидов надо воспринимать как обычных людей.**

  

– Простых – да. Но паралимийцы – отдельная категория. В других странах они звезды, кумиры. О них снимают программы, используют в рекламе. Но только не у нас. В России продюсерам кажется, что смотреть на инвалидов никто не станет. Я ведь общался по этому поводу с людьми, когда работал на «Матче». Они ответили, что аудитории такое неинтересно. Что на канале шел цикл, посвященный паралимпийцам. И его никто не смотрел.

  

**– Ты другого мнения?**

  

– Именно. Я уверен: со временем наберется огромная аудитория. Просто нужно мастерство и хороший продюсер. Пока я его не встретил. Но очень хочу познакомиться с Картозией (гендиректор «Пятницы» – прим. Sports.ru) и забацать офигенный проект. Если напишешь, что хочу с ним встретиться, буду очень благодарен.

  

**– Без проблем. Расскажи лучше, кто заказывает твои лекции про инвалидов, если это никому не интересно?**

  

– Разные истории. Случается, что компания проводит корпоратив, тимбилдинг. Вокруг одни финансисты, говорят только о работе. И тут заказывают меня. Все сразу в шоке: пришел чувак без ноги и говорит, как ему здорово без нее жить. 

  

Часто зовут на фестивали, посвященные новым технологиям. Я вещаю про новые протезы. Или недавно – «Фестиваль молодежи и студентов». Тина Канделаки позвала, сказала: «Хочу, чтобы ты выступил в моей секции, рассказал свою историю, смотивировал людей».

  

**– Это сейчас в моде. **

  

– Очень. Людям не хватает мотивации. Поэтому Ник Вуйчич так популярен. Хотя билет на его лекцию стоит 15 тысяч рублей.

  

## **Безрукие, колясочники**

  

**– Кто мотивирует тебя?**

  

– Есть несколько товарищей – все из плавания. Я ведь лишился ноги в тот год, когда проходила Олимпиада в Лондоне. И Паралимпиада. Лежал в госпитале, смотрел на ребят. Тогда закралась мысль, что было бы круто пообщаться с этими пловцами. Подружиться. Подумал, что тоже смогу, как они. И вот через какое-то время меня позвали героем в одну программу. Мы поехали смотреть, в каких местах в Москве инвалидам реально заниматься спортом.

  

**– Такие есть?**

  

– Конечно. Их достаточно, они бесплатные. Но я хочу сказать про другое. В один момент мы пришли на съемки в бассейн, и я увидел там Настю Диадорову – девчонку без рук. Паралимпийскую чемпионку. И понял, что мне надо остаться. Начал общаться с тренерами, заниматься. Потом как-то иду на старт, смотрю по сторонам и вижу, что вокруг люди из телека, которые впечатлили в 2012-м. Думаю: «Вау!».

  

  

_Анастасия Диадорова (в центре)_

  

**– Сбылась мечта.**

  

– Да. Еще много смотрел на заграничных ребят. Понимал, что надо протезироваться. Интересовался, как там люди с протезами. И понял, что они живут интереснее и веселее, чем обычные.

  

**– В чем это выражается?**

  

– Делают все, что не позволяют себе простые смертные. Поднимают тяжести, ползают по горам, камням, плавают.

  

**– В России инвалиды другие.**

  

**–** Есть разные. Некоторые очень активные. Возьми ребят из сборной, Настю. Они плавают без рук – дельфином. Результаты блестящие, бьет свои же рекорды.

  

**– В обычной жизни надевает протезы?**

  

– Большинство безруких их не любят. Используют ноги: рисуют ими, открывают двери, едят.

  

**– Едят?**

  

– Ну да. Вот Настя спокойно делает это. Просит принести что-то из блюд, берет вилку в ногу и вперед. Понимаешь уровень активности? При этом есть и те, которые боятся выйти, не хотят. Мне много таких пишут: «Как преодолеть себя? Как сделать первый шаг? Я боюсь, что будут неправильно смотреть, показывать пальцем».

  

**– Что отвечаешь?**

  

– «Бояться не надо. Откройте соцсети и посмотрите, как живут инвалиды разных стран».

  

**– Но мы живем в России.**

  

– И что? Если хочешь так думать, сиди дальше и жди лучших времен. Считаешь, что-то произойдет? Кто-то постучит в дверь? Только ребята из социальной службы, чтобы ты проголосовал.

  

**– С тобой так было? **

  

– Звонили в каком-то году. Спросили: «Нужно ли вам принести избирательную урну?» – «Нет» – «А за кого будете голосовать?». Вежливо отправил по нужному адресу.

  

– **Давай все-таки разберемся. Ты критикуешь инвалидов, которые боятся выйти из дома. Но согласись, что если ты без ног, живешь в Бугульме и получаешь 7 тысяч рублей пенсии, заняться спортом очень тяжело.**

  

– Все зависит от мечты и желания. Сначала нужно заставить себя, потом войдет в привычку. Мне тоже непросто. Я живу за МКАДом, а некоторые тренировки начинаются в 8:30 на Проспекте мира. То есть выехать должен до 6:30, чтобы не застрять в пробке. Значит проснуться еще раньше. И вот лежишь и уговариваешь себя: «Чувак, ты или идешь сейчас, или будешь выглядеть глупо на соревнованиях и станешь толстым».

  

Понимаешь, надо договариваться с собой как-то. Устанавливать личные рекорды: «Сегодня я наконец вышел из дома. Завтра дойду до дальнего магазина».

  

**– Что делать, если ты колясочник и живешь на пятом этаже хрущевки без лифта?**

  

– Окружить себя правильными людьми. Я уверен, что они есть. Нужно просто кому-то написать или попросить. Люди в космос летают. И без двух ног на Эверест залезают. А ты про пятый этаж. Просто мотивация требуется.

  

**– Ты понимаешь, что твой кейс уникальный?**

  

– В чем?

  

**– Ты пробился наверх.**

  

– Кто тебе это сказал?

  

**– Ты читаешь лекции, работаешь на ТВ и ходишь туда как гость. Даешь интервью сейчас.**

  

– Но я не знаю, почему это происходит. Да и на ТВ стараюсь не ходить. Оно себя полностью скомпрометировало. Когда звонят с больших шоу, стараюсь найти кучу отговорок, чтобы отказаться. 

  

  

**– Какие темы предлагают обсудить?**

  

– Абсолютно идиотские. Дети выбросились из окна в Мытищах – зовут меня. У девочки две мамы, но они не знают друг о друге, хотя она общается с обеими – снова хотят, чтобы приехал. Только не понимаю зачем.

  

## **Милостыня, девчонки**

  

**– В английском термин disabled (инвалид) уже не прокатывает, это оскорбляет людей. Теперь надо physically challenged (физически ограниченный). В России продолжают говорить инвалид. Это правильно?**

  

– Меня и друзей не обижает. Вот когда мама слышит, что называю себя инвалидом, меняется в лице: «Какой инвалид? У тебя есть все, ты обычный человек». А мне слух не режет. Хотя чаще употребляю слово киборг. Оно интереснее.

  

**– Киборг – это железка. Человека с ДЦП не назовешь киборгом.**

  

– Не факт. Может, он в себе что-то поменял. Мы же все ходим к стоматологу, хирургу. Любое изменение в человеке мне хочется называть киборгизацией. И уж тем более тех, кто с протезами. Кстати, люблю рассказывать на лекциях, что инвалиды – это не пандус, а космические технологии. Мы первые люди на планете, которые испытывают на себе новые гаджеты. Чтобы вы, двуногие и здоровые, жили полноценной жизнью.

  

**– При этом в Москве даже пандусов особо нет.**

  

– Это вопрос не ко мне. Я только знаю, что единственный лифт в переходе, который работает – на Проспекте мира. Но думаю, колясочники подтвердят, что с пандусами все ужасно. Конечно, есть показательные места, куда водят пропагандистских журналистов, делегации. Но если по чесноку, все очень плохо. В центре города посади колясочника: «Спустись здесь». Он ответит: «Вы че? Я не сумасшедший».

  

**– Есть страна, где для инвалидов все еще хуже?**

  

– Давай честно: что-то в России делается. Очень медленно, но в нужную сторону. А другие страны… Там отношение другое. Никакая бабка или дед не подойдет и не спросит: «Какого черта ты в шортах?»

  

**– К тебе подходили?**

  

– Не раз. Заметил, что подходящие делятся на два лагеря. Одни интересуют: «А вот у меня у брата… Посоветуйте, подскажите». Второй уклон: «Ты чего? Офигел? Че в городе в шортах ходишь?». Но несколько раз случались веселые истории: люди пытались дать милостыню.

  

**– Просто так?**

  

– Ну да. Суть в том, что тогда я только учился ходить и был с костылем. На нем есть ведерочко типа бардачка. Если руки заняты, можно что-то положить. Пока ходил с ним, три раза засовывали деньги. Первый – у монастыря Матроны. Второй – в парке, когда ждал приятеля. Последний случай – в метро. Спускался на какой-то станции, чувак предложил мелочь. Я не взял. Так он обиделся и орал вслед, что я зажравшийся инвалид. А на станции Мытищи мне вообще предлагали стоять и просить деньги.

  

**– В смысле?**

  

– Собирать милостыню. Зарплата фиксированная – 70 тысяч рублей в месяц. Причем я тогда уже работал на «Матче». Но человек увидел, что без ноги: «Давай будешь стоять в Сергиевом Посаде, ходить по электричкам?». С тех пор периодически подходит: «Ну как? Созрел?».

  

**– Более странную просьбу помнишь? **

  

**–** Не. В основном все по делу. Люди пишут в директ, всем стараюсь отвечать. Иногда потом подходят: «Я переписывался с тобой, ты мне помог».

  

**– Чем?**

  

– Советами. Чаще всего спрашивают: «Какую ногу выбрать? Какой протез лучше? Чем они отличаются? Где ты протезировался?». В последнее время девчонки чего-то стали: «Я приеду в Москву, можно с тобой погулять?».

  

**– Что отвечаешь?**

  

– Если буду не занят, то пожалуйста.

  

**– Смотришь на внешность?**

  

– Так пишут очень аппетитные. Прямо вау. Редакторы Maxim могут позавидовать.

  

**– Уже были встречи?**

  

– Одна. Находился дома у родителей, какой-то семейный ужин. Пишет девчонка из инстаграма: «Проезжаю мимо, могу заехать в гости». Отвечаю: «Заезжай за сладким, скоро буду».

  

**– Что дальше?**

  

– Увиделись. Было весело.

  

**– Что именно?**

  

– Все, что нужно. 

  

## **Протез, секс**

  

**– Твой протез стоит почти 4 миллиона рублей. Предыдущий – 2,5. В чем разница?**

  

– Как у телефонов. Каждый год выходит что-то новое. Этот дольше держит заряд. Он влагозащитный. С ним я могу зайти в душ, море и бассейн.

  

  

Существуют протезы и дороже 4 миллионов. Единичные прототипы, которые умеют шевелить пальцами. Которыми чувствуешь, гладкое это или шершавое. Горячее или холодное. Я вот ногой не могу такое понимать. Но если и куплю подобное, не смогу пользоваться.

  

**– Почему?**

  

– Придется постоянно жить в стране изобретения. Связываться с разработчиками.

  

**– Где сделали твой?**

  

– Тут надо понимать, что протез – это конструктор. Состоит из трех частей. Главная – гильза. То, куда вставляется нога. Ее создают по слепку в Москве. Дальше идет коленный модуль. Он немецкий. Потом стопа – исландская. Но под свои задачи можешь менять эти части – брать их от разных компаний. Главное, чтобы было удобно. Ведь если дать мою коленку какой-нибудь бабушке, она не справится. 

  

**– Как это?**

  

– Да просто не поймет, как пользоваться. Или не сможет распорядиться всем функционалом.

  

**– А что умеет твоя нога?**

  

– Все, что твоя. Никаких ограничений. Могу бегать, ходить, в футбол играть. Удар даже сильнее получится, потому что бьешь железом. Недавно ходил на открытие катка в Парке Горького – освоил коньки. Еще у всех бионических протезов есть мозги. Они считают темп ходьбы, скорость. На некоторых установлен GPS. 

  

**– Для всех целей один протез?**

  

– У меня три. Один тот, что за 2,5 миллиона. Но он сломанный, уже исчерпал ресурс. Если кому надо, могу отдать. Хотя проще новый купить.

  

Второй – беговой, с изогнутой стопой. И третий – повседневный, который сейчас на мне.

  

  

**– Ты сказал, что все еще привыкаешь к нему.**

  

– Конечно. Я до сих пор очень неровно хожу, прихрамываю. Стараюсь работать над этим каждый день. Смешно, что над коленкой часто протираются штаны. Там установлен тубер – не очень гладкая штука.

  

**– Случалось, что девушка отказывала, потому что ты в протезе?**

  

– Наоборот! Это вызывает дикий интерес. Все хотят посмотреть, как это, что это.

  

**– А как-то необычно его можно использовать?**

  

– Куда-то засовывать? Нет. Я вообще предпочитаю не пользоваться протезом во время секса. Снимаю. Но если не снять и стоять на полу без носка, то проблематично. Ноги разъезжаются. Приходится балансировать.

  

**– Однажды тебя спросили про главное открытие в жизни. Ответ: «Недавно узнал, как занимаются сексом парализованные люди». Как же?**

  

– С помощью специального устройства. Изобрели в Китае или Японии. Такая машина, они в нее залезают. Нажимают кнопку. Она их сдвигает, сближает.

  

**– Зачем, если ничего не чувствуют?**

  

– Может, что-то и чувствуют. Бывают же разные степени поражения. Плюс все хотят заниматься сексом.

  

## **Пенсия, бабки**

  

**– Ногу за 4 миллиона тебе оплатило государство.**

  

**–** Рассматриваю это по-другому. Что взял в аренду. Я ведь плачу налоги. Ты тоже. Думать, что на эти деньги построили дом для уточки или чьи-то собаки полетели бизнес-классом – не прикольно. Гораздо приятнее считать, что они пошли на доброе дело – ногу ампутанту.

  

**– Не каждому дают такую крутую, как у тебя.**

  

– Это правда. Чтобы получить ее, надо доказать государству, что ты активный гражданин. Что не сидишь дома. Многие ведь получают протезы и не ходят на них. Ставят в углу дома, чтобы пылился.

  

В этом смысле правильная система в Исландии. Там сначала предлагают пробный механизм. Очень простенький, но с датчиками. По ним смотрят, как часто пользуешься. Через время сдаешь его, тебе говорят: «Красавчик. Все показатели на уровне, получай классный протез». Или: «Слушайте, зачем вам дорогой, если вы ходите один раз в день и то – пять минут в магазин?»

  

**– В России та же история?**

  

– Нет. Есть только какой-то опросник. Но там можно соврать. В моем случае есть вариант заглянуть в соцсети. Но в большинстве случаев этого не сделаешь.

  

**– Что делать, если не врать?**

  

– Выбивать. Это опять тема с желанием и хотением. Если просто сидишь дома, тебе не принесут протез, который ты хочешь. Нужно приложить усилия. 

  

**– Какие льготы, кроме аренды протеза, у тебя есть?**

  

– Пенсия – 15 тысяч рублей в месяц. Бесплатный проезд в транспорте. В Москве – везде. В Подмосковье дают только четыре места в каждом автобусе. Борюсь за них с другими льготниками.

  

Прикольно получать шенгенские визы – не платишь консульский и визовый сбор. Такую же историю реально провернуть для сопровождающего. Причем в законе не прописано, кто это. Можно взять любого друга и сказать: «Это сопровождающий».

  

**– Класс.**

  

  

– Иногда бывает бесплатная парковка в торговых центрах. Папа не любит ставить на такие места. Друзья, если едут со мной, – без проблем. Хотя, как правило, все занято неинвалидами. Тогда я пишу или звоню в этот ТЦ: «Что за фигня?». Прибегает дядечка, не понимает, что случилось.

  

Один раз приятель воспользовался моей помощью, чтобы разобраться с полицейскими.

  

**– Как?**

  

– Поставил авто на место для инвалидов на улице и потом увидел, как его эвакуируют. Мы приехали разными компаниями, но он попросил помочь. Я вышел в шортах, говорю: «Машина не моя, но возит меня. Не забирайте». Офицер вошел в положение: «Ладно-ладно».

  

**– В метро уступают?**

  

– С этим целая история. Я ведь имею полное право сидеть в вагоне. У меня нет ноги, у меня есть удостоверение. И вот едешь после тяжелой тренировки. А какая-нибудь противная бабка – именно бабка, а не бабушка – начинает орать: «Какого черта ты здесь расселся? Хватит! Ты молодой парень, иди работай!». Тут начинается самое интересное.

  

**– Что?**

  

– Говорю: «Могу удостоверение показать» – «Здесь все его могут показать» – «Тогда сейчас я покажу одну вещь, и вам станет очень стыдно» – «Ой, чем ты меня можешь удивить?» – «Смотрите».

  

В этом момент или поднимаю штанину. Бабка краснеет, извиняется. Или разблокирую поворотный механизм и начинаю крутить протез.

  

**– Реакция?**

  

– Одни сразу выходят. Другие убегают в конец вагона. Бывало, что и крестом себя осеняли.

  

## **«Матч ТВ», Командная**

  

**– На Игры-2020 в Токио ты едешь?**

  

– Вряд ли. Я плохо плаваю. По сравнению с тобой, конечно, хорошо. Но с другими калечами – не очень. С каждым годом регресс сильнее – становлюсь старше, пропускаю тренировки из-за работы, плюс не получаю за это деньги.

  

**– Сколько надо сбросить, чтобы попасть в сборную?**

  

– Секунд 10. Но сборная еще ничего не гарантирует. Ее отстранили от всех международных стартов. Многих это тревожит. Даже говорят, что не видят смысла заниматься дальше. Некоторые готовы ждать, пока платят.

  

Сейчас самое большое соревнование – чемпионат России. Я участвовал в нем летом. В данный момент готовлюсь к кубку страны. Если улучшу результат и получу мастера спорта – продолжу. Нет – буду ходить в бассейн три раза в недельку. Переплыву Босфор, как делают бизнесмены – у них это популярно. И пойду в зал качаться. Нет ничего проще: три месяца – и твое тело идеально.

  

**– Как часто тренируешься сейчас?**

  

– В неделю пять раз. Иногда до 10 – два раза в день. Две воды или вода и зал. В бассейне провожу полтора часа. Успеваю проплыть 3-3,2 километра. Специально гоняю для этого в «Олимпийский» из Мытищ.

  

  

**– Зачем?**

  

– Здесь работает мой тренер. Занимаюсь бесплатно в школе «Юность Москвы». 

  

**– Во сколько надо просыпаться, чтобы успевать в бассейн, потом на работу и встречи, как со мной?**

  

– Сегодня встал в 5:20. В 6:15 вышел из дома, в 6:30 сел на автобус – я без машины. В Москве она бессмысленна. В 7:10 был в метро, в 7:30 у «Олимпийского». Попил кофе в «Макдоналдсе», подождал тренера. В 8:30 прыгнул в воду. В 10 закончил, через полчаса уже принимал пищу и ждал тебя. До часу поговорим, потом поеду в редакцию. Надо подобрать музыку к завтрашней программе. Потом доделаю зуб у дантиста или съезжу в ИКЕА – куплю кое-что для дома. Завтра весь день съемки в лесу.

  

**– Что за лес?**

  

– Недалеко от озера Круглого. Там есть беседка. Концепция программы («Мужская кухня» на канале «Т24» – прим. Sports.ru) такая, что в этой беседке стоят два мужика, готовят что-то на мангале и общаются. В формате ВГТРК – духовные скрепы, семья, дети, как их воспитывать, как любить жену. Герои разные, но все ассоциируются с мужской профессией.

  

**– Тебе интересно?**

  

– Да. Программа получается добрая, веселая. Но мне и на «Матче» нравилось. Вел там «Ты можешь больше». Сначала она шла три часа, потом два, потом час. Дальше 30 минут. И закрылась.

  

**– Почему?**

  

– Точно не знаю. Может, деньги закончились. Может, не соответствовала философии канала. Но время было интересное. Ребята звали на специальные прямые эфиры. Как-то шли разговоры, что поеду на Паралимпиаду в Рио спецкором. Когда команду отстранили, я, естественно, остался в Москве.

  

На форуме в Сочи спросил Тину: «Почему мне не дают работу?». Ответила: «У нас меняются форматы. Будем делать больше трансляций и меньше инфотейнмента».

  

**– Чем запомнилось время на канале?**

  

– Весельем. Командной, которая постоянно ругала, что я не разбираюсь в спорте, не знаю многих фамилий. Мне казалось это неважным – программа-то про лайфстайл.

  

**– Про смузи и моноброви.**

  

– Не-не. Весь трэш закончился до меня. Я пришел, когда все стало понятно. Мы рассказывали, какую еду нужно есть, чтобы быть здоровыми. Раскрывали героев, показывали, как надо тренироваться. Говорили о редких видах спорта. Прога была классной и вполне себе утренней. Такой видеожурнал про ЗОЖ.

  

**– Зарплату положили царскую?**

  

– Ага, меньше сотни.

  

**– Не смущало, что у Командной за 200?**

  

– Так она опытнее и красивее. А я инвалид. Чего мне жаловаться?

  

  

С ней один раз произошла веселая история. В ухо что-то одновременно говорила редактор и Маша. Я шикнул: «Отстань, тихо!». Она обиделась и ушла с площадки. Но вернули.

  

**– Не разговаривала?**

  

– Подулась и нормально.

  

## **Водка,** **Apple**

  

**– Твоя цитата: «Всегда есть с собой социальная карта, воск для бороды и пол-литра водки».**

  

– Воск кто-то приплел. Вместо него плавки. А водка – да. В виде спрея, чтобы ногу переодеть. Смазывающее вещество, с ним это делать проще.

  

**– Внутрь употребляешь?**

  

– Иногда на каких-то вечеринках. Последний раз напился на открытии выставки Такаси Мураками. Все проходило в «Гараже», потом переместилось на афтепати в Дом Союзов. Там и случилось.

  

**– Когда пришло письмо от Apple, ты был подвыпивший. Правда**?

  

– Хмельной. Все-таки отпуск, «все включено».

  

**– Зачем ты им вообще написал первым?**

  

– По приколу. Мне ведь тоже некоторые пишут, потом говорят: «Ой, мы не думали, что вы ответите». Так же и я. Через коллег нашел имейл – какой-то info@... Рассказал, что я киборг из России. Наобум. Ни на какой ответ не надеялся.

  

**– В какой стране снимали твой эпизод для презентации?**

  

– Не могу сказать из-за контракта.

  

  

**– Гонорар получил?**

  

– Тоже секрет.

  

**– Сколько длится контракт?**

  

– Ха-ха, не скажу. Может, в книге обо всем напишу.

  

**– После той презентации жизнь изменилась?**

  

– Не заметил. Только на следующий день как будто день рождения справил. Звонили все. Журналисты что-то хотели, спрашивали.

  

**– Новую работу не предлагали?**

  

– Нет.

  

**– То есть кроме лекций ты занят только на «Т24»?**

  

– Пока да. Но контракт неограничен. По нему я просто не могу работать ведущим еще одной программы о кухне. Все остальное – пожалуйста.

  

**– Сколько получаешь в месяц со всех проектов?**

  

– Ты не Юра Дудь, я тебе не скажу. 

  

**– Отвечай!**

  

– Моя пенсия 15 тысяч рублей. Я же инвалид. Для меня все, что больше 15 – много. Я нигде официально не работаю.

  

\*\*\*

  

**– Никогда не думал, что если бы не был киборгом, не оказался таким популярным, как сейчас?**

  

– Наоборот. С ногой я стал бы еще круче.

  

**– Ты не читал бы лекции, тебя не звали бы на телек. **

  

– Наоборот звали бы. Я был бы намного функциональнее. Похож на всех. И у людей не выстраивался бы барьер: «Он не такой, как мы».

  

**– Что сейчас мешает стать еще популярнее? **

  

– Отношение. Пока ТВ – это реклама, продажа кока-колы и прокладок. Когда человек без ноги появляется в кадре: «Ой, что это такое?». Так что вопрос больше не ко мне, а к обществу.

  

Фото: [instagram.com/dvignatov](http://www.instagram.com/dvignatov); [РИА Новости](http://www.ria.ru/)/Григорий Сысоев; [Gettyimages.ru](http://gettyimages.ru)/Charles Laberge/",null,undefined
2020-03-22T16:58:00.000Z,https://twitter.com/0leGG/status/1241771117603254274,true,"[""best""]",tweet,0leGG_1241771117603254274,0leGG,twitter,null,"Идеальное сообщение об ошибке компилятора https://t.co/G3imiN4kjJ
![](https://pbs.twimg.com/media/ETuoP26UwAAnkAo.jpg)
",Oleg Godovykh,undefined
2020-04-20T18:46:50.000Z,https://twitter.com/16pxl/status/1252307758210322434,true,"[""best""]",tweet,16pxl_1252307758210322434,16pxl,twitter,null,"keep seeing color collection posts, but i'm more of a fan of contrast 💙❤️ #pixelart https://t.co/idbBetT48t
![](https://pbs.twimg.com/media/EWEXDVsUEAAV90R.png)
![](https://pbs.twimg.com/media/EWEXEa7VcAA8BPK.png)
",Jubilee ❣️,undefined
2020-06-13T12:48:29.000Z,https://twitter.com/kovchiy/status/1271561392525586433,false,[],article,3016345933,null,pocket,null,"[twitter.com](http://twitter.com)

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

We've detected that JavaScript is disabled in your browser. Would you like to proceed to legacy Twitter?",null,undefined
2020-04-06T18:44:56.000Z,https://twitter.com/50pets/status/1247233849899319298,true,"[""best""]",tweet,50pets_1247233849899319298,50pets,twitter,null,"https://t.co/yWR4Umw83g
![](https://pbs.twimg.com/media/EU8QkslWkAAigLT.jpg)
",Barking News,undefined
2015-07-14T19:47:44.000Z,https://rauchg.com/2014/7-principles-of-rich-web-applications,false,"[""best""]",article,A great writeup on future improvements in web apps: “7 Principles of Rich W,null,pocket,null,"# 7 Principles of Rich Web Applications

[rauchg.com](http://rauchg.com)

[

rauchg](https://twitter.com/rauchg) views

Also available in: [Japanese](http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415), [Russian](http://habrahabr.ru/post/242429/), [Portuguese](http://wmonline.ucoz.com.br/publ/melhores_praticas/usabilidade/7_principios_de_aplicacoes_rich_web_e/22-1-0-35).

This is a writeup based on a presentation I gave at BrazilJS in August 2014. It builds on some of the ideas I’ve been [blogging](https://cloudup.com/blog/the-need-for-speed) [about](https://cloudup.com/blog/introducing-mydb) recently related mostly to UX and performance.

I want to introduce 7 actionable principles for websites that want to make use of JavaScript to control their UI. They are the result of my experience as a web developer, but also as a long-time user of the WWW.

JavaScript has undeniably become an indispensable tool for frontend developers. Its usage is now expanding into other areas like [servers](http://nodejs.org/) and [microcontrollers](https://tessel.io/). It’s the language of choice for [introducing](http://web.stanford.edu/class/cs101/) computer science concepts by prestigious universities.

Yet a lot of questions on its precise role and usage on the web remain a mystery, even to many framework and library authors.

*   Should JavaScript be used to replace browser functions like history, navigation and page rendering?
*   Is the backend dying? Should I render HTML at all?
*   Are Single Page Applications (SPAs) the future?
*   Is JS supposed to augment pages for websites, but render pages in web apps?
*   Should techniques like PJAX or TurboLinks be used?
*   What’s the precise distinction between a website and a web application? Should there be one at all?

What follows is my attempt to answer these. My approach is to examine the usage of JavaScript _exclusively_ from the lens of user experience (UX). In particular, I put a strong focus on the idea of minimizing the time it takes the user to get the data they are interested in. Starting with networking fundamentals all the way to predicting the future.

**tl;DR:**

Server rendering is not about SEO, it’s about performance. Consider the additional roundtrips to get scripts, styles, and subsequent API requests. In the future, consider HTTP 2.0 “pushing” of resources.

The first thing I’m compelled to point out is a fairly common false dichotomy. That of “server-rendered apps vs single-page apps”. If we want to optimize for the best possible user experience and performance, giving up one or the other is never a good idea.

The reasons are fairly straightforward. The medium by which pages are transmitted, the internet, has a theoretical speed limit. This has been memorably illustrated by the famous essay/rant [“It’s the latency, stupid”](http://www.stuartcheshire.org/rants/latency.html) by Stuart Cheshire:

```
The distance from Stanford to Boston is 4320km.
The speed of light in vacuum is 300 x 10^6 m/s.
The speed of light in fibre is roughly 66% of the speed of light in vacuum.
The speed of light in fibre is 300 x 10^6 m/s * 0.66 = 200 x 10^6 m/s.
The one-way delay to Boston is 4320 km / 200 x 10^6 m/s = 21.6ms.
The round-trip time to Boston and back is 43.2ms.
The current ping time from Stanford to Boston over today’s Internet is about 85ms (…)
So: the hardware of the Internet can currently achieve within a factor of two of the speed of light.
```

The cited 85ms round-trip time between Boston and Stanford will certainly improve over time, and your own experiments right now might already show it. But it’s important to note that there’s a theoretical minimum of about **50ms** between the two coasts.

The bandwidth capacity of your users’ connections might improve noticeably, as it steadily has, but the latency needle won’t move much at all. This means that minimizing the number of roundtrips you make to display information on page is essential to great user experience and responsiveness.

This becomes particularly relevant to point out considering the rise of JavaScript-driven applications that usually consist of no markup other than `<script>` and `<link>` tags beside an empty `<body>`. This class of application has received the name of “Single Page Applications” or “SPA”. As the name implies, there’s only one page the server consistently returns, and all the rest is figured out by your client side code.

Consider the scenario where the user navigates to `http://app.com/orders/` after following a link or typing in the URL. At the time your application receives and processes the request, it already has important _information_ about what’s going to be shown on that page. It could, for example, pre-fetch the orders from the database and include them in the response. In the case of most SPAs, a blank page and a `<script>` tag is returned instead, and another roundtrip will be made to get the scripts contents. So that then another roundtrip can be made to get the data needed for rendering.

Analysis of the HTML sent by the server for every page of a SPA in the wild

At this point many developers consciously accept this tradeoff because they make sure the extra network hops happen only once for their users by sending the proper cache headers in the script and stylesheet responses. The general consensus is that it’s an acceptable tradeoff because once the bundle is loaded, you can then handle most of the user interaction (like transitions to other pages) without requesting additional pages or scripts.

However, even in the presence of a cache, there’s a performance penalty when considering script parsing and evaluation time. [“Is jQuery Too Big For Mobile?”](http://modernweb.com/2014/03/10/is-jquery-too-big-for-mobile/) describes how even for jQuery alone this could be in the order of hundreds of milliseconds for certain mobile browsers.

What’s worse, usually no feedback whatsoever is given to the user while the scripts are loading. This results in a blank page displaying and then a sudden transition to a fully loaded page.

Most importantly, we usually forget that the current prevailing transport of internet data (TCP) _starts slowly_. This pretty much guarantees that most script bundles won’t be fetched in one roundtrip, making the situation described above even worse.

A TCP connection starts with an initial roundtrip for the handshake. If you’re using SSL, which happens to be important for safe script delivery, an additional two roundtrips are used (only one if the client is resuming a session). Only then can the server start sending data, but as it turns out, it does so slowly and incrementally.

A congestion control mechanism called _slow start_ is built into the TCP protocol to send the data in a growing number of _segments_. This has two serious implications for SPAs:

1\. Large scripts take a lot longer to download than it seems. As explained in the book [“High Performance Browser Networking”](http://chimera.labs.oreilly.com/books/1230000000545/ch02.html#thats_four_rou) by Ilya Grigorik, it takes “four roundtrips (…) and hundreds of milliseconds of latency, to reach 64 KB of throughput between the client and server”. In this example, considering a great internet connection between London and New York, it takes 225ms before TCP is able to reach the maximum packet size.

2\. Since this rule applies also for the initial page download, it makes the initial content that comes rendered with the page all that much more important. As Paul Irish concludes in his presentation [“Delivering the Goods”](https://docs.google.com/presentation/d/1MtDBNTH1g7CZzhwlJ1raEJagA8qM3uoV7ta6i66bO2M/present#slide=id.g3eb97ca8f_10), the first 14kb are crucially important. This is a helpful illustration of the amount of data the server can send in each round-trip over time:

How many KB a server can send for each phase of the connection by segments

Websites that deliver content (even if it’s only the basic layout without the data) within this window will seem extremely responsive. In fact, to many authors of fast server-side applications JavaScript is deemed unneeded or as something to be used sparingly. This bias is further strengthened if the app has a fast backend and data sources and its servers located near users (CDN).

The role of the server in assisting and speeding up content presentation is certainly application-specific. The solution is not always as straightforward as “render the entire page on the server”.

In some cases, parts of the page that are not essential to what the user is likely after are better left out of the initial response and fetched later by the client. Some applications, for example, opt to render the “shell” of the page to respond immediately. Then they fetch different portions of the page in parallel. This allows for great responsiveness even in a situation with slow legacy backend services. For some pages, pre-rendering the content that’s “above [the fold](https://varvy.com/pagespeed/prioritize-visible-content.html)” is also a viable option.

Making a _qualitative assessment_ of scripts and styles based on the information the server has about the the session, the user and the URL is absolutely crucial. The scripts that deal with sorting orders will obviously be more important to `/orders` than the logic to deal with the settings page. Maybe less intuitively, one could also make a distinction between “structural CSS” and the “skin/theme CSS”. The former might be required by the JavaScript code, so it should block, but the latter could be loaded asynchronously.

A neat example of a SPA that does not incur in extra roundtrip penalties is a proof-of-concept clone of [StackOverflow in 4096 bytes](http://danlec.com/blog/stackoverflow-in-4096-bytes) (which can theoretically be delivered on the first post-handshake roundtrip of a TCP connection!). It manages to pull this off at the expense of cacheability, by inlining all the assets within the response. With [SPDY or HTTP/2 server push](http://www.chromium.org/spdy/link-headers-and-server-hint), it should be theoretically possible to deliver client code that’s cacheable in a single hop. For the time being, rendering part or all of the page on the server is the most common solution to avoiding extra roundtrips.

Proof-of-concept SPA with inlined CSS and JS that doesn’t incur in extra roundtrips

A flexible enough system that can share rendering code between browser and server and provides tools for progressively loading scripts and styles will probably eliminate the colloquial distinction between _websites and webapps_. Both are reigned by the same UX principles. A blog and a CRM are fundamentally not that different. They have URLs, navigation, they show data to the user. Even a spreadsheet application, which traditionally relies a lot more on client side functionality, first needs to show the user the data he’s interested in modifying. And doing so in the least number of network roundtrips is paramount.

In my view, the major tradeoffs in performance seen in many widely deployed systems these days have to do with the progressive accumulation of complexity in the stack. Technologies like JavaScript and CSS were added over time. Their popularity increased over time as well. Only now can we appreciate the impact of the different ways they’ve been applied. Some of this is addressed by improving protocols (as shown by the ongoing enhancements seen in SPDY and QUIC), but the application layer is where most of the benefits will come from.

It’s helpful to refer to some of the initial discussions around the design of the initial WWW and HTML to understand this. In particular, [this mailing list thread](http://1997.webhistory.org/www.lists/www-talk.1993q1/0260.html) from 1997 proposing the addition of the `<img>` tag to HTML. Marc Andreessen re-iterates the importance of serving information fast:

> ""If a document has to be pieced together on the fly, it could get arbitrarily complex, and even if that were limited we’d certainly start experiencing major hits on performance for documents structured in this way. This essentially throws the **single-hop principle of WWW** out the door (well, IMG does that too but for a very specific reason and in a very limited sense) — are we sure we want to do that?”  

The first principle builds heavily on the idea of minimizing latency as the user interacts with your website.

That said, despite how much effort you invest into minimizing the back-and-forth between server and client, there’s a few things beyond your control. A theoretical lower bound given by the distance between your user and your server being the unescapable one.

Poor or unpredictable network quality being the other significant one. If the network connection is not great, packet re-transmission will occur. What you would expect to result in a couple roundtrips could end up taking several.

And in this lies JavaScript’s greatest strength towards improving UX. With client-side code driving user interaction, we are now able to _mask latency_. We can create the perception of speed. We can artificially approach zero latency.

Let’s consider the basic HTML web again for a second. Documents connected together through hyperlinks, or `<a>` tags. When any of them are clicked, the browser will make a network request that’ll take unpredictably long, then get and process its response and finally transition to the new state.

JavaScript allows to **act immediately** and **optimistically** on user input. A click on a link or button can result in an immediate reaction without hitting the network. A famous example of this is Gmail (or Google Inbox), where archiving an email will happen immediately on the UI while the server request is sent and processed asynchronously.

In the case of a form, instead of waiting for some HTML as a response after its submission, we can act right after the user presses enter. Or even better, like Google Search does, we can respond to the user holding down a key:

Google adapts its layout as soon as you hold down a key

That particular behavior is an example of what I call _layout adaptation_. The basic idea is that the first state of a page “knows” about the layout of the next state, so it can transition to it before there’s any data to populate the page with. It’s “optimistic” because there’s still a risk that the data never comes and an error should be displayed instead, but that’s obviously rare.

Google’s homepage is particularly relevant to this essay because its evolution illustrates the first two principles we’ve discussed very clearly.

First of all, analyzing the [packet dump](https://gist.github.com/rauchg/3e1b2d7529009370b986) of the TCP connection to `www.google.com` reveals they make sure to send their entire homepage all at once after the request comes in. The whole exchange, including closing the connection, takes 64ms for me in San Francisco. This has likely been the case ever since [the beginning](http://en.wikipedia.org/wiki/Google#mediaviewer/File:Google1998.png).

In late 2004, Google [pioneered](http://googleblog.blogspot.com/2004/12/ive-got-suggestion.html) the usage of JavaScript to provide inline as-you-type suggestions (curiously, as a 20% time project, like Gmail). This even became an inspiration for [coining AJAX](http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/):

> Take a look at Google Suggest. Watch the way the suggested terms update as you type, almost instantly \[…\] with no waiting for pages to reload. Google Suggest and Google Maps are two examples of a new approach to web applications that we at Adaptive Path have been calling Ajax  

And in 2010 they [introduced](http://googleblog.blogspot.com/2010/09/search-now-faster-than-speed-of-type.html) Instant Search, which puts JS front and center by skipping the page refresh altogether and transitioning to the “search results” layout as soon as you press a key as we saw above.

Another prominent example of layout adaptation is most likely in your pocket. Ever since the early days, iPhone OS would request app authors to provide a `default.png` image that would be rendered right away, while the actual app was loading.

iPhone OS enforced loading default.png before the application

In this case, the OS was compensating not necessarily for network latency, but CPU. This was crucial considering the constraints of the original hardware. There’s however a scenario where this technique breaks. That would be when the layout doesn’t match the stored image, as in the case of login screens. A thorough analysis of its implications was provided by [Marco Arment in 2010](http://www.marco.org/2010/11/11/my-default-png-dilemma).

Another form of input besides clicks and form submissions that’s greatly enhanced by JavaScript rendering is **file input**.

We can capture the user’s intent to upload through a variety of means: drag and drop, paste, file picker. Then, thanks to new [HTML5 APIs](https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications) we can display content as if it had been uploaded. An example of this in action is in the work we did with Cloudup uploads. Notice how the thumbnail is generated and rendered immediately:

The image gets rendered and fades in before the upload completes

In all of these cases, we’re enhancing the perception of speed. Thankfully, there’s plenty of evidence that this is a good idea. consider [the example](http://www.nytimes.com/2012/08/19/opinion/sunday/why-waiting-in-line-is-torture.html) of how _increasing_ the walk to baggage claim reduced the number of complaints at the Houston Airport, without necessarily making baggage handling faster.

The application of this idea should have very profound implications on the UI of our applications. I contend that spinners or “loading indicators” should become a rarity, especially as we transition to applications with _live data_, discussed in the next section.

There are situations where the illusion of immediacy could actually be detrimental to UX. Consider a payment form or a logout link. Acting optimistically on those, telling the user everything is done when it’s not, can result in a negative experience.

But even in those cases, the display of spinners or loading indicators should be **deferred**. They should only be rendered after the user no longer considers the response was immediate. According to the often-cited [research by Nielsen](http://www.nngroup.com/articles/response-times-3-important-limits/):

> The basic advice regarding response times has been about the same for thirty years Miller 1968; Card et al. 1991:  
> **0.1 second** is about the limit for having the user feel that the system is reacting instantaneously, meaning that no special feedback is necessary except to display the result.  
> **1.0 second** is about the limit for the user’s flow of thought to stay uninterrupted, even though the user will notice the delay. **Normally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second**, but the user does lose the feeling of operating directly on the data.  
> **10 seconds** is about the limit for keeping the user’s attention focused on the dialogue. For longer delays, users will want to perform other tasks while waiting for the computer to finish  

Techniques like PJAX or TurboLinks unfortunately largely miss out on the opportunities described in this section. The client side code doesn’t “know” about the future representation of the page, until an entire roundtrip to the server occurs.

The third principle is that of _reactivity_ of the UI with respect to data changes in the source, typically one or more database servers.

Serving an HTML snapshot of data that remains static until the user refreshes the page (traditional websites) or interacts with it (AJAX) is increasingly becoming obsolete.

Your UI should be **self-updating**.

This is crucially important in a world of an ever-increasing number of data points, in the form of watches, phones, tablets and wearable devices yet to be designed.

Consider the Facebook newsfeed at the time of its inception, when data was primarily entered through personal computers. Rendering it statically was not optimal, but it made sense if people were updating their profiles maybe once a day, if that.

We now live in a world where you can upload a photo, and have your peers like it or comment on it almost immediately. The need for realtime feedback is natural due to the highly concurrent usage of the application.

It would be wrong, however, to assume that the benefits of reactivity are limited to multi-user applications. Which is why I like to talk about _concurrent data_ points as opposed to _users_. Consider the common scenario of sharing a photo you have on your phone with your own laptop:

A single-user application can still benefit from reactivity

It’s useful to think of all the data exposed to the user as reactive. **Session and login state synchronization** is an example of applying this principle uniformly. If users of your application have multiple tabs open simultaneously, logging out of one will invalidate them all. This inevitably results in enhanced privacy and security, especially in situations where multiple people have access to the same device.

Each page reacts to the session and login state

Once you set up the expectation that the information on the screen updates automatically, it’s important to consider a new need: **state reconciliation**.

When receiving ordered atomic data updates, it’s easy to forget that your application should be able to update appropriately even after long periods of disconnection. Consider the scenario of closing your laptop’s lid and reopening it days later. What how does your app behave then?

Example of what would occur if we disregard elapsed time upon reconnection

The ability for your application to reconcile states disjointed in time is also relevant to our first principle. If you opt to send data with the initial page load, you must consider the time the data is on the wire until your client-side scripts load. That time is essentially equivalent to a disconnection, and the initial connection by your scripts is a session resumption.

When the WWW was conceived, data exchange between the client and server was limited to a few ways:

*   Clicking a link would `GET` a new page and render the new page
*   Submitting a form would `POST` or `GET` and render a new page
*   Embedding an image or object would `GET` it asynchronously and render it

The simplicity of this model is attractive, and we certainly have a much higher learning curve today when it comes to understanding how data is sent and received.

The biggest limitations were around the second point. The inability to send data without necessarily triggering a new page load was not optimal from a performance standpoint. But most importantly, it completely broke the back button:

Possibly the most annoying artifact of the old web

The web as an **application platform** was thus inconceivable without JavaScript. AJAX constituted a _leapfrog_ in terms of the user experience around user submission of information.

We now have a variety of APIs (`XMLHttpRequest`, `WebSocket`, `EventSource` to name a few) that give us fine-grained control of the data flow. In addition to the ability to send data the user inputs into a form, we now have some new opportunities to enhance UX.

One that’s specially relevant to our previous principle is the ability to display the _connection state_. If we set up the expectation that the data updates automatically, we ought to notify the user about being _disconnected_ and ongoing _reconnection attempts_.

When detecting a disconnection, it’s useful to store data in memory (or even better, `localStorage`) so that it can be sent later. This is specially important in light of the introduction of [ServiceWorker](http://jakearchibald.com/2014/using-serviceworker-today/), which enables JavaScript web applications to run in the _background_. If your application is not open, you can still attempt to sync user data in the background.

Consider timeouts and errors when sending data and **retry on behalf of the user**. If a connection is re-established, attempt to send the data again. In the case of a persistent failure, communicate it to the user.

Certain errors should be handled carefully. For example, an unexpected `403` could mean the user’s session has been invalidated. In such cases, you have the opportunity to prompt the user to resume it by showing a login screen.

It’s also important to make sure the user doesn’t inadvertently interrupt the data flow. This can happen under two situations. The first and most obvious one is closing the browser or tab, which you can attempt to prevent with `beforeunload` handlers.

The beforeunload browser warning

The other (and less obvious) one is capturing page transitions before they happen, like clicking links that trigger a new page load. This gives you a chance to display your own modals.

Form submissions aside, if we were to design any modern web application with only hyperlinks, we’d end up with fully functional back/forward navigation.

Consider, for example, the typical “infinite pagination scenario”. The typical way it’s implemented involves capturing the click with JavaScript, requesting some data / HTML, injecting it. Making the `history.pushState` or `replaceState` call is an optional step, unfortunately not taken by many.

And this is why I use the word “break”. With the simpler model the web proposed initially, this situation was not in the picture. Every state transition relied on a URL change.

The flip side of this is that new opportunities emerge for enhancing history now that we can control it with JavaScript.

One such opportunity is what Daniel Pipius dubbed [Fast Back](https://medium.com/joys-of-javascript/beyond-pushstate-building-single-page-applications-4353246f4480):

> Back should be quick; users don’t expect data to have changed much.  

This is akin to considering the back button an application-level button and applying principle _2: act immediately on user input_. The key is that you can now decide how to cache the previous page and render it instantly. You can then apply principle 3 and then inform the user of _new_ data changes that happened to that page.

There are still a few cases where you won’t be in control of the caching behavior. For example, if you render a page, then navigate to a third party website, and the user clicks back. Applications that render HTML on the server and then modify it on the client are at particular risk of this subtle bug:

Pressing back incorrectly loads the initial HTML from the pageload

Another way of breaking navigation is by ignoring _scrolling memory_. Once again, pages that don’t rely on JS and manual history management most likely won’t have an issue with this. But dynamic ones usually do. I tested the two most popular JavaScript-driven newsfeeds of the web: Twitter and Facebook. Both exhibited _scrolling amnesia_.

Infinite pagination is usually susceptible to scrolling amnesia

Finally, be aware of state changes that are relevant only while navigating history. Consider this example of toggling the display of comment subtrees.

The toggling of comments should be preserved when navigating history

If the page was re-rendered by following a link within the application, the expectation of the user might be that all comments appear uncollapsed. The state was _volatile_ and only associated with the entry in the history stack.

Making your application react to code changes is crucially important.

First of all, it reduces the surface for possible errors and increases reliability. If you make a breaking change to your backend APIs, then clients’ code _must_ be updated. They might otherwise not be able to understand new data, or they may send data in an incompatible format.

Another equally important reason has to do with the implementation of principle #3. If your UI is self-updating, there’s little reason for users to trigger a page refresh.

Keep in mind that in a traditional website, a page refresh accomplishes two things: reload the data and reload the code. Setting up a mechanism to push data without one to push code is not enough, especially in a world where a single tab (session) might stay open for a very long time.

If a server push channel is in place, a notification can be emitted to clients when new code is available. In the absence of that, a version number can be appended as a header to outgoing HTTP requests. The server can then compare it to its latest known version, opt to handle request or not, and advice the client.

After this, some web applications opt to refresh the page on behalf of the user when deemed appropriate. For example, if the page is [not visible](https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API) and no form inputs are filled out.

A better approach is to perform **hot code reloading**. This means that there would be no need to perform a full page refresh. Instead, certain modules can be swapped on the fly and their code re-executed.

It’s certainly hard to make hot code reloading work for many existing codebases. It’s worth discussing then a type of architecture that elegantly separates _behavior_ (code) from _data_ (state). Such a separation would allow us to make a lot of different patches very efficient.

Consider for example a module in your application that sets up an event bus (e.g: [socket.io](http://socket.io/)). When events are received, the state of a certain component is populated and it renders to the DOM. Then you modify the behavior of that component, for example, so that it produces different DOM markup for existing and new state.

The ideal scenario is that we’re able to update the code on a per-module basis. It wouldn’t make sense to restart the socket connection, for example, if we can get away with just updating the modified component’s code. Our ideal architecture for hot-code pushing is thus _modular_.

But the next challenge is that modules should be able to be re-evaluated without introducing undesirable side effects. This is where an architecture like the one proposed by [React](http://facebook.github.io/react/) comes particularly handy. If a component code is updated, its logic can be trivially re-executed and the DOM efficiently updates. An exploration of this concept by Dan Abramov can be [found here](http://gaearon.github.io/react-hot-loader/).

In essence, the idea that you _render to_ the DOM (or _paint_ it) is what significantly helps with hot code swapping. If state was kept in the DOM, or event listeners where set up manually by your application, updating code would become a much more complicated task.

A rich JavaScript application can have mechanisms in place for predicting the _eventual user input_.

The most common application of this idea is to preemptively request data from the server before an action is consummated. Starting to fetch data when you hover a hyperlink so that it’s ready when it’s clicked is a straightforward example.

A slightly more advanced method is to monitor mouse movement and analyze its trajectory to detect “collisions” with actionable elements like buttons. A [jQuery example](https://medium.com/@cihadturhan/a-ux-idea-i-know-where-you-are-aiming-3e00d152afb2):

jQuery plugin that predicts the mouse trajectory

The web remains one of the most versatile mediums for the transmission of information. As we continue to add more dynamism to our pages, we must ensure that we retain some of its great historical benefits while we incorporate new ones.

Pages interconnected by hyperlinks are a great building block for any type of application. Progressive loading of code, style and markup as the user navigates through them will ensure great performance without sacrificing interactivity.

New unique opportunities have been enabled by JavaScript that, once universally adopted, will ensure the best possible user experience for the broadest and freest platform in existence.",null,undefined
2016-05-16T17:21:17.000Z,http://blog.invisible.ru/no-cork-screw/?utm_source=newsletter&utm_medium=email&utm_campaign=e.2016-05.w19&utm_term=no-cork-screw,false,"[""best""]",article,7 способов открыть вино без штопора | Блог Invisible.ru,null,pocket,null,"# 7 способов открыть вино без штопора

[journal.invisible.ru](http://journal.invisible.ru) | November 8, 2019 03:08 AM

Квест «Открой вино без штопора» можно считать посвящением в истинного энофила. Если справитесь, конечно. Способов открыть бутылку без штопора полно — и сейчас самое время их изучить. Все-таки в теплую погоду спонтанно выпить вина хочется чаще, а нужные инструменты в наличии не всегда.

Итак, если вас угораздило взять вино с обычной пробкой, а не под винтом, открыть бутылку можно с помощью этих предметов:

## 1\. Тапком

**Что нужно:** Надежная стена и ботинок (оксфорды, броги, лоферы, гриндерсы, непонятные боты с рынка — пойдет всё), а вот туфли на шпильке и прочие лабутены лучше не подключать.

**Как открыть:** Снимаем с бутылки фольгу, бутылку помещаем дном в ботинок, прямо над каблуком — так, чтобы все прилегало плотно. Несильно ударяем этой конструкцией о стену. Тут важно не переусердствовать, чтобы не устроить винный фонтан и не разбить бутылку. Поэтому, когда пробка выйдет чуть больше чем на половину, отходим от стены и аккуратно достаем ее уже руками.

## 2\. Ключами

**Что нужно:** Ключи с узким кончиком — от машины, квартиры, где деньги лежат, или ящика с приставкой Денди и детскими письмами из летнего лагеря, в которых вы просите маму забрать вас из этого ада.

**Как открыть:** Втыкаем ключ в край пробки под углом 45 градусов. Когда ключ войдет в пробку на ⅔, начинаем осторожно прокручивать его и вытягивать пробку. После удачного вскрытия вина важно на волне успеха случайно не выбросить пробку вместе с ключами в мусорку.

## 3\. Ножом

**Что нужно:** Нож с узким лезвием, в идеале зазубренный, но сойдет и гладкий. На практике нормально себя показывает и нож грибника, и складной перочинный. Главное, чтобы не тупой был.

**Как открыть:** Выпрямляем указательный палец и представляем, что он сделан из стали и принадлежит Терминатору. Давим пальцем на пробку так, чтобы немного втолкнуть ее в бутылку. Тут важно войти в образ кибермашины и не сгибать палец в первой фаланге. Потом слегка под углом аккуратно вонзаем клинок в пробку до ее середины и осторожно поворачиваем его в одном направлении, вытягивая вверх. Так пробка выйдет легче и, возможно, даже не раскрошится.

## 4\. Косметикой

**Что нужно:** Помада, а лучше блеск для губ или тушь диаметром не больше пробки.

**Как открыть:** Если вы девушка — поройтесь в сумке, подходящее орудие наверняка найдется. Если вы парень — одолжите у ближайшей женщины гигиеническую помаду со словами: «Губы пересохли». Прикладываем эту самую Ланкоме, MAC, Мэйбеллин к пробке и начинаем давить изо всех сил — пока пробка не проскочит в бутылку. Только помаду не упустите туда же.  

## 5\. Насосом для велосипеда

**Что нужно:** Насос для велосипеда или мяча с насадкой в виде иглы, атмосфера ликования и пикника и оператор с камерой на телефоне — чтобы залить эпичное видео с этим фокусом на Youtube.  

**Как открыть:** Вставляем кончик насоса в пробку как можно глубже и начинаем вкачивать воздух в бутылку (обычно хватает двух-трех движений). Пробка вылезет, а то и вылетит под давлением. Делать все это лучше осторожно, чтобы бутылка не треснула. Эффектность метода зашкаливает.

## 6\. Плоскогубцами

**Что нужно:** Отвертка, шуруп, плоскогубцы, а также ловкость рук и желание переплюнуть сантехника Петровича, который мастерски чистит вам трубы.  

**Как открыть:** Отверткой или просто рукой ввинчиваем до середины пробки шуруп. Не увлекайтесь, иначе пробка может повредиться. Дальше за этот самый ввинченный шуруп вытаскиваем пробку плоскогубцами. Впечатляет, если проделать все это изящно, без пота на лбу и смачных ругательств (вы сможете).  

## 7\. Вешалкой

**Что нужно:** Вешалка из тонкой стальной проволоки, портрет Дэвида Копперфильда в нагрудном кармане и вера в чудо.  

**Как открыть:** Вспоминаем уроки труда и передачу «Очумелые ручки» — сначала выпрямляем крючок у вешалки, потом плоскогубцами делаем на конце такой же, но маленький — вроде рыболовного. Загнуть его желательно под углом около 30 градусов, а потом просунуть между пробкой и стеклом бутылки. Когда крючок зацепит пробку снизу, слегка поворачиваем ее и начинаем вытягивать.  

**P.S.** Ну а если упрямая бутылка все-таки не поддается, вы знаете, [что делать](http://cdn.firstwefeast.com/assets/2013/07/OpenW_Gun.gif). Шутка. Как видите, при желании открыть бутылку вина можно хоть голыми руками. Разом и окружающих поразите, и привнесете в атмосферу вечера экшн. А если эксперименты не про вас, просто носите с собой штопор, с ним спокойнее — и для вина, и для самообороны пригоден.

Кстати, лето же грядет, будут вылазки на природу — отличный повод потренировать на просторах навыки экстремального открытия игристого. Без риска сбить люстру и поранить телевизор. Инструкция [здесь](http://blog.invisible.ru/sabrage/).",null,undefined
2015-06-28T14:26:44.000Z,http://ilyakharitonov.ru/blog/all/a-big-step-in-our-march-toward-equality/,false,"[""best""]",article,A big step in our march toward equality,null,pocket,null,"# A big step in our march toward equality ★

[ilyakharitonov.ru](http://ilyakharitonov.ru)

или новости из параллельного мира

Вчера, 26 июня, Верховный суд США принял историческое решение о легализации однополых браков во всех штатах. Вполне предсказуемо, российская блогосфера сильно возбудилась по этому поводу и даже в моей, тщательно отфильтрованной по критерию адекватности ленте, начали появляться возмущенные комментарии.

Гомофобская аргументация (хотя что там, вся картина мира) зиждется на одном искреннем заблуждении. Естественно, речь об аргументации рациональной, с религиозной спорить невозможно, ибо там рациональность отсутствует как класс.

Заблуждение это заключается в том, что гомосексуальность — это что-то вроде болезни или психического отклонения, девиации, и этим можно заразить, увлечься, оказаться втянутым, пасть жертвой пропаганды и т. д. Отсюда проистекают все доводы типа «Вот все станут гомосеками, вымрем», «Ребенок который вырастет в гейской семье станет геем», «Вот твой сын насмотрится гей-парадов и тоже геем станет» и т. д. Как правило, эти люди либо вообще не обременяют себя поиском информации по этой теме, либо сознательно фильтруют поток, игнорируя то, что не согласуется с их убеждениями. А между тем, всё что нужно знать о человеческой сексуальности, физиологической природе ориентации, гендерной идентичности, статистические данные о количестве геев и их изменении, популярные лекции, в конце концов — всё это лежит в свободном доступе, достаточно просто зайти в гугл.

Кому лень копаться в научных трудах, советую популярную лекцию Аси Казанцевой «[Мозг мужчины и мозг женщины...](https://youtu.be/nfY0pc2VcBY)», или серию публикаций «Метрополя» [http://mtrpl.ru/bad-boys-blue](http://mtrpl.ru/bad-boys-blue) [http://mtrpl.ru/bad-boys-blue-II](http://mtrpl.ru/bad-boys-blue-II) [http://mtrpl.ru/bad-boys-blue-III](http://mtrpl.ru/bad-boys-blue-III)

Рациональная, научно доказанная объективная реальность состоит в том, что гетеросексуальность, гомосексуальность, бисексуальность и асексуальность — это врожденная особенность. Как цвет глаз или рост. Люди не выбирают себе ориентацию, они с ней рождаются. Никакая пропаганда не может сделать из гетеросексуала гея и наоборот. И процент гомосексуальных людей практически во всех человеческих сообществах, независимо от уровня развития, государственного строя и религии, примерно одинаковый. И он относительно стабилен.

Это как спросить: «А если твои дети будут рыжими, ты будешь их любить?»  

Итак, заменяем исходное заблуждение на достоверную информацию, и от аргументов гомофобов не остается и следа. Нет, не вымрем, нет, твой ребенок не станет геем, если не родится им, нет, ребенок выросший в семье гомосексуалов не станет гомосексуалом (опять же, если не родится таким).

Другая проблема — люди которые делают вид, что не гомофобы, и говорят что-то вроде «Я не против геев, пусть себе живут, никто их не ущемляет, но пусть не высовываются, к чему это выпячивание, парады, бла-бла». Часто к такому «убежищу» прибегают люди, которые достаточно рациональны, чтобы воспринимать разумные доводы, но не могут побороть внутреннее неприятие и отвращение. Это конечно, гораздо лучше, чем призывать вешать геев на столбах, но все же остается гомофобией.

Вообще, для описания ситуации с геями в России лучше всего подходит аналогия с временами расовой сегрегации в США. Когда де-юре негры уже были свободными людьми, но де-факто не имели права садиться на «места для белых» в транспорте, ресторанах, кино, селиться в «белых» кварталах, учиться в «белых» школах. Естественно, периодически возникали протесты, митинги, негры демонстративно занимали «запретные» места, провоцируя конфликты, и тогда находились точно такие же люди, которые заявляли «Ну что этим неграм неймётся, рабство же отменили, чего им еще надо? Я не против негров, но зачем вот эти протесты, показушность, бла-бла-бла». Сейчас, все эти истории из того времени кажутся нелепостью, типа: «А помните, в Штатах неграм было запрещено ездить в передней части автобуса? Вот же идиотизм!». Очень надеюсь, что лет через двадцать, нынешнее положение вещей тоже будет казаться нелепым. «А помните, раньше браки между геями были запрещены? Вот же дикость!».

Всё это я пишу потому, что сам когда-то прошел весь этот путь — от оголтелой гомофобии и призывов сжечь и повесить (юношеский максимализм, что поделать ¯ \\ \_ (ツ) \_ / ¯ ), через «ну ладно пусть живут, но что б я их не видел», к сегодняшней искренней радости за всё ЛГБТ-сообщество в США.",null,undefined
2014-05-14T23:11:01.000Z,https://theoatmeal.com/comics/tesla_model_s,false,"[""best""]",article,http://theoatmeal.com/comics/tesla_model_s2,null,pocket,null,"# A cartoonist's review of his magical space car

[theoatmeal.com](http://theoatmeal.com)

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

[The Name](https://theoatmeal.com/comics/tesla_model_s#intergalactic) [The Acceleration](https://theoatmeal.com/comics/tesla_model_s#acceleration) [The Touchscreen](https://theoatmeal.com/comics/tesla_model_s#touchscreen) [A Smartphone](https://theoatmeal.com/comics/tesla_model_s#smartphone) [Safety](https://theoatmeal.com/comics/tesla_model_s#safety) [The Fires](https://theoatmeal.com/comics/tesla_model_s#fires) [The Sun](https://theoatmeal.com/comics/tesla_model_s#sun) [Tesla Motors](https://theoatmeal.com/comics/tesla_model_s#tesla_motors)

[

](https://theoatmeal.com/comics/tesla_model_s2)",null,undefined
2020-06-13T13:26:47.000Z,https://www.nocode.tech/,false,"[""nocode""]",article,"A curated directory of resources, tools & hacks for non-techs",null,pocket,null,"# A curated directory of resources, tools & hacks for non-techs

[nocode.tech](http://nocode.tech)

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

# [NoCode 3.0](https://www.nocode.tech/)

[Showcase  
‍](https://www.nocode.tech/builds)[Tools](https://www.nocode.tech/tools)[Articles](https://www.nocode.tech/articles)[Members](https://www.nocode.tech/members)[**Signup**](https://www.nocode.tech/signup)

[Log Out](https://www.nocode.tech/#)[Login](https://www.nocode.tech/login)

See Tutorials

[Online Store](https://www.nocode.tech/build/online-store)[Newsletter](https://www.nocode.tech/build/newsletter)[Website](https://www.nocode.tech/build/website)[Landing Page](https://www.nocode.tech/build/landing-page)[Web Application](https://www.nocode.tech/build/web-app)

[](https://www.nocode.tech/tools/weebly)

# Weebly

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Weebly is the easiest drag and drop web builder out there

Weebly is the easiest drag and drop web builder out there

[](https://www.nocode.tech/tools/carbonmade)

# Carbonmade

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Stripped-back portfolio maker

Stripped-back portfolio maker

[](https://www.nocode.tech/tools/webyo)

# Webyo

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Visually build stunning white label websites for your clients without code.

Visually build stunning white label websites for your clients without code.

[](https://www.nocode.tech/tools/free-stock-images)

# Free Stock Images

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

A huge repository of over 15,000 high-quality stock images

A huge repository of over 15,000 high-quality stock images

[](https://www.nocode.tech/tools/mailerlite)

# Mailerlite

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Advanced email marketing tools

Advanced email marketing tools

[](https://www.nocode.tech/tools/hubspot)

# Hubspot

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

HubSpot offers a full platform of marketing, sales, customer service, and CRM software

HubSpot offers a full platform of marketing, sales, customer service, and CRM software

[](https://www.nocode.tech/tools/pay-with-a-tweet)

# Pay With A Tweet

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Grant access to your content or pages when a customer tweets about you

Grant access to your content or pages when a customer tweets about you

[](https://www.nocode.tech/tools/domainr)

# Domainr

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Explore the entire domain name space to find the write .com for your business

Explore the entire domain name space to find the write .com for your business

[](https://www.nocode.tech/tools/all-you)

# All You

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

All You is the perfect portfolio creator for creatives who have an eye for design but no patience for complicated interfaces.

All You is the perfect portfolio creator for creatives who have an eye for design but no patience for complicated interfaces.

[](https://www.nocode.tech/tools/semrush)

# SEMRush

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Find out how your competitors rank on Google Search

Find out how your competitors rank on Google Search

[](https://www.nocode.tech/tools/podia)

# Podia

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Everything you need to sell online courses, downloads, and memberships without worrying about the tech.

Everything you need to sell online courses, downloads, and memberships without worrying about the tech.

[](https://www.nocode.tech/tools/contractbook)

# Contractbook

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Create, sign and store all your contract documents at one, safe place.

Create, sign and store all your contract documents at one, safe place.

[](https://www.nocode.tech/tools/insightly)

# Insightly

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

The modern customer relationship platform

The modern customer relationship platform

[](https://www.nocode.tech/tools/foodies-feed)

# Foodies Feed

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Beautiful stock photos of food.

Beautiful stock photos of food.

[](https://www.nocode.tech/tools/salesforce)

# Salesforce

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

The world’s #1 CRM platform

The world’s #1 CRM platform

[](https://www.nocode.tech/tools/kajabi)

# Kajabi

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Kajabi gives you everything you need to create, market, and sell your digital products.

Kajabi gives you everything you need to create, market, and sell your digital products.

[](https://www.nocode.tech/tools/cool-name-ideas)

# Cool Name Ideas

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

A great way to come up with…cool name ideas!

A great way to come up with…cool name ideas!

[](https://www.nocode.tech/tools/pixteller)

# PixTeller

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

An image editor with animation capabilities

An image editor with animation capabilities

[](https://www.nocode.tech/?da95ec14_page=2)

See More

[](https://www.nocode.tech/tools/parabola)

# Parabola

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Hand off your routine data tasks by describing them in Parabola. Build once, reuse infinitely.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/buildbox)

# Buildbox

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Build Video Games - Without Code!

This is some text inside of a div block.

[](https://www.nocode.tech/tools/appmachine)

# AppMachine

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Quick mobile apps for your small business

This is some text inside of a div block.

[](https://www.nocode.tech/tools/placeit)

# Placeit

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

A mockup generator with options reaching into the thousands

This is some text inside of a div block.

[](https://www.nocode.tech/tools/outgrow)

# Outgrow

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Simple, no-code tools to acquire qualified leads

This is some text inside of a div block.

[](https://www.nocode.tech/tools/survey-anyplace)

# Survey Anyplace

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Interactive questionnaires without the hassle of a custom-built solution

This is some text inside of a div block.

[](https://www.nocode.tech/tools/strikingly)

# Strikingly

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Websites for the non-technically-minded

This is some text inside of a div block.

[](https://www.nocode.tech/tools/snov-io)

# Snov.io

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Cold outreach automation platform

This is some text inside of a div block.

[](https://www.nocode.tech/tools/domain-and-compare)

# Domain And Compare

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Find your ideal domain name across more than 30 top registrars.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/berta)

# Berta

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

A website maker for creatives

This is some text inside of a div block.

[](https://www.nocode.tech/tools/landbot)

# Landbot

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

The most intuitive NoCode Chatbot Builder

This is some text inside of a div block.

[](https://www.nocode.tech/tools/flauntly)

# Flauntly

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Build custom landing pages that drive successful campaigns and boost conversions.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/sendinblue)

# SendInBlue

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

An affordable email marketing tool

This is some text inside of a div block.

[](https://www.nocode.tech/tools/loom)

# Loom

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

The easiest way to create screen recordings

This is some text inside of a div block.

[](https://www.nocode.tech/tools/memberspace)

# MemberSpace

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Turn any part of your website into members-only with just a few clicks

This is some text inside of a div block.

[](https://www.nocode.tech/tools/peopleperhour)

# PeoplePerHour

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Get any project done on PeoplePerHour - the #1 freelancing community.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/squarespace-logos)

# Squarespace Logos

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Great selection of clean modern logo icons and fonts - by Squarespace

This is some text inside of a div block.

[](https://www.nocode.tech/tools/pixlr)

# Pixlr

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

A comprehensive photo editor with over 600 overlays, effects and borders.

This is some text inside of a div block.

[](https://www.nocode.tech/?e1e4f416_page=2)

Next

[](https://www.nocode.tech/tools/parabola)

# Parabola

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Hand off your routine data tasks by describing them in Parabola. Build once, reuse infinitely.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/wix)

# Wix

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Choose a stunning template and customize anything with the Wix website builder—no coding skills needed.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/browse-frame)

# Browse Frame

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Browser frame mockups in a modern flat design.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/promotion-directory)

# Promotion Directory

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

An open sourced list of ~100 websites to submit and promote your startup.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/hubspot)

# Hubspot

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

HubSpot offers a full platform of marketing, sales, customer service, and CRM software

This is some text inside of a div block.

[](https://www.nocode.tech/tools/twilio)

# Twilio

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Enable SMS, voice calls and more in your no-code apps.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/magic-mockups)

# Magic Mockups

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Impose your product mockups on a variety of real-world backgrounds

This is some text inside of a div block.

[](https://www.nocode.tech/tools/screenpeek)

# Screenpeek

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Capture any website within a high quality mockup in seconds.

This is some text inside of a div block.

[](https://www.nocode.tech/tools/webyo)

# Webyo

This tool has been personally reviewed be me

An exclusive discount is available on this tool - click for details

Visually build stunning white label websites for your clients without code.

This is some text inside of a div block.

[](https://www.nocode.tech/?eabbb628_page=2)

See More

## Built with No Code

See what others have built without code!

## Food Still Good

Built with [Coda](https://coda.io/?ref=nocode), this beautiful web app lets you track the expiration date of your food. The pictured landing page was built with [Webflow](https://nocode.tech/tools/webflow)!

[Learn how to build a company like this](https://www.nocode.tech/build/web-app)[Check out the site](https://foodstillgood.webflow.io/?ref=nocode)

## Uma

Uma is a voice app equipped to help business owners navigate funding, work/life balance and more - without a line of code thanks to [VoiceFlow](http://voiceflow.com/?ref=nocode)

[Learn how to build a company like this](https://www.nocode.tech/build/web-app)[Check out the site](https://heyuma.co/?ref=nocode)

## NFL Draft

This handy guide to NFL players was built with [Glide](https://glideapps.com/?Ref=nocode) by Carlo De Marchis to work on iOS + Android

[Learn how to build a company like this](https://www.nocode.tech/build/website)[Check out the site](https://nfl-draft.glideapp.io/?ref=nocode)

## NoCode.Tech

We put this site together with Webflow. Revue powers our newsletter, Zapier connects them both together and Screely was used to create the beautiful screenshots

[Learn how to build a company like this](https://www.nocode.tech/build/website)

[Join NoCode (It's free!)](https://www.nocode.tech/signup)

Thank you! Your submission has been received!

Oops! Something went wrong while submitting the form :(

[Back to Top](https://www.nocode.tech/#top)

# NoCode

Helping non-techs create stuff 🤓  
by [@Nile](https://www.twitter.com/nile)

##### Tools

[All Tools](https://www.nocode.tech/tools)[App Builders](https://nocode.tech/category/app-builders)[Mockups](https://nocode.tech/category/mockups)[Internal tools](https://nocode.tech/category/internal-tools)

##### Content

[Builds](https://www.nocode.tech/builds)[Articles](https://www.nocode.tech/articles)[Newsletter Archive](https://www.getrevue.co/profile/nocode)

##### Account/Legal

[Privacy](https://www.nocode.tech/privacy)[Signup](https://www.nocode.tech/signup)[Login](https://www.nocode.tech/login)[**Get Listed**](https://www.nocode.tech/get-listed)",null,undefined
2020-01-31T15:58:24.000Z,https://twitter.com/A_Kapustin/status/1223274337391775744,true,"[""best""]",tweet,A_Kapustin_1223274337391775744,A_Kapustin,twitter,null,"Я не знаю кто сделал это видео, но оно идеально показывает как я пытался друзьям рассказать о своём первом и единственном LSD-трипе 

ИДЕАЛЬНО https://t.co/2OuMT4RzFw
![](https://pbs.twimg.com/ext_tw_video_thumb/1223274234543267843/pu/img/53yo5TSYOn15Jmk_.jpg)
",анатолий ноготочки💅,undefined
2020-02-04T20:33:46.000Z,https://twitter.com/A_Kapustin/status/1224793187111313408,true,"[""best""]",tweet,A_Kapustin_1224793187111313408,A_Kapustin,twitter,null,"когда друг в клубе предлагает ещё по одной таблеточке, а тебя ещё от прошлой не отпустило https://t.co/1jYyu9VHZa
![](https://pbs.twimg.com/ext_tw_video_thumb/1224793115380408324/pu/img/q9leDE-qInjmre_I.jpg)
",анатолий ноготочки💅,undefined
2020-02-23T12:22:54.000Z,https://twitter.com/A_Kapustin/status/1231555027703128064,true,"[""best""]",tweet,A_Kapustin_1231555027703128064,A_Kapustin,twitter,null,"Когда заказал в кафе что вкусное, тарелку поставили на стол и твоя девушка такая: https://t.co/YzKo6uFjQE
![](https://pbs.twimg.com/ext_tw_video_thumb/1231554996426153984/pu/img/hiK1jgwLB5AZofE3.jpg)
",анатолий ноготочки💅,undefined
2020-03-02T20:02:55.000Z,https://twitter.com/A_Kapustin/status/1234569899244183552,true,"[""best""]",tweet,A_Kapustin_1234569899244183552,A_Kapustin,twitter,null,"СТОЛЬКО РАЗ ВИДЕЛ ЭТУ КАРТИНКУ И ТОЛЬКО СЕГОДНЯ ПОНЯЛ ЧТО ЭТО ЛОСС(((((((((((((((((((((((((((((((((((( https://t.co/AWavnsti0f
![](https://pbs.twimg.com/media/ESISo77W4AEQ0zP.png)
",анатолий ноготочки💅,undefined
2020-03-15T20:00:52.000Z,https://twitter.com/A_Kapustin/status/1239280422510628867,true,"[""best""]",tweet,A_Kapustin_1239280422510628867,A_Kapustin,twitter,null,"Любой фильм становится круче, если смотреть его на криво повешенном экране проектора, ДАЖЕ СУМЕРКИ https://t.co/RYiDlTJTYQ
![](https://pbs.twimg.com/ext_tw_video_thumb/1239280381435805696/pu/img/an_Fv2JjvC709C6P.jpg)
",анатолий ноготочки💅,undefined
2020-03-19T16:07:50.000Z,https://twitter.com/A_Kapustin/status/1240671329235406848,true,"[""best""]",tweet,A_Kapustin_1240671329235406848,A_Kapustin,twitter,null,"Никто:
Совсем никто:
Ни единая живая душа:
Российские сайты с рецептами еды: https://t.co/smRazMKkuh
![](https://pbs.twimg.com/media/ETe_xToXkAAfDiO.jpg)
![](https://pbs.twimg.com/media/ETe_zxKXsAAKjkF.png)
![](https://pbs.twimg.com/media/ETe_2rJXkAA9Cb9.jpg)
![](https://pbs.twimg.com/media/ETe_5BEXYAYoc11.jpg)
",анатолий ноготочки💅,undefined
2020-04-07T11:00:17.000Z,https://twitter.com/A_Kapustin/status/1247479304834953217,true,"[""best""]",tweet,A_Kapustin_1247479304834953217,A_Kapustin,twitter,null,"неприлично громко смеюсь https://t.co/lBblXpY0QD
![](https://pbs.twimg.com/ext_tw_video_thumb/1247479263235899392/pu/img/yAncxO8Vlh4C94zY.jpg)
",анатолий ноготочки💅,undefined
2020-04-11T19:34:18.000Z,https://twitter.com/A_Kapustin/status/1249058212399243274,true,"[""best""]",tweet,A_Kapustin_1249058212399243274,A_Kapustin,twitter,null,"https://t.co/ydcgVKzhsO
![](https://pbs.twimg.com/media/EVWLyq0WsAQhYM4.jpg)
",анатолий ноготочки💅,undefined
2020-04-12T08:45:14.000Z,https://twitter.com/A_Kapustin/status/1249257253863129089,true,"[""best""]",tweet,A_Kapustin_1249257253863129089,A_Kapustin,twitter,null,"Сначала не понял НО ПОТОМ ПОНЯЛ И ЗАОРАЛ https://t.co/aEnUr6R29v
![](https://pbs.twimg.com/media/EVZA2RCWkAAkpJu.jpg)
",анатолий ноготочки💅,undefined
2020-04-13T08:25:31.000Z,https://twitter.com/A_Kapustin/status/1249614679892262912,true,"[""best""]",tweet,A_Kapustin_1249614679892262912,A_Kapustin,twitter,null,"Такое чувство, что школьные знания про то, чем отличается морфология от морфия и тригонометрия от триппера и расстрижения нужно только для того, чтоб понимать СЛОЖНЫЕ МЕМЫ В ТВИТОРЕ https://t.co/joazDIkkvf
![](https://pbs.twimg.com/media/EVeF67RXkAAXur7.jpg)
",анатолий ноготочки💅,undefined
2020-04-14T12:31:01.000Z,https://twitter.com/A_Kapustin/status/1250038853660008448,true,"[""best""]",tweet,A_Kapustin_1250038853660008448,A_Kapustin,twitter,null,"Поставьте пожалуйста лайк, если вам принципе комфортно работать из дома и сидеть дома из-за коронавируса?
А то мне все ок, благо доставки есть, но кажется, что всем вокруг не ок и я чувствую себя немного одиноко из-за этого(
",анатолий ноготочки💅,undefined
2020-04-19T10:28:05.000Z,https://twitter.com/A_Kapustin/status/1251819855533289474,true,"[""best""]",tweet,A_Kapustin_1251819855533289474,A_Kapustin,twitter,null,"Да не, пацаны, чот в этот раз меня не накрыло:( https://t.co/SMv08tm7mH
![](https://pbs.twimg.com/ext_tw_video_thumb/1251819806585749504/pu/img/DsH7hosWSi5CDidP.jpg)
",анатолий ноготочки💅,undefined
2020-04-22T16:51:00.000Z,https://twitter.com/A_Kapustin/status/1253003379623768064,true,"[""best""]",tweet,A_Kapustin_1253003379623768064,A_Kapustin,twitter,null,"ничего себе как медведи по деревьям лазают! https://t.co/l8Ia1KPpQP
![](https://pbs.twimg.com/ext_tw_video_thumb/1253003307452444673/pu/img/QZko2arRT5y4Aze-.jpg)
",анатолий ноготочки💅,undefined
2020-04-23T08:30:47.000Z,https://twitter.com/A_Kapustin/status/1253239886280343552,true,"[""best""]",tweet,A_Kapustin_1253239886280343552,A_Kapustin,twitter,null,"девушки на карантине: смотрите какое у меня белье есть!

парни на карантине: КУЛАК ДЕЛАЕТ БОМ БОМ ЫЫ https://t.co/hfSmZyFoQU
![](https://pbs.twimg.com/ext_tw_video_thumb/1253239692604162048/pu/img/Mm9OsoKPzjJl2aJE.jpg)
",анатолий ноготочки💅,undefined
2020-04-24T15:24:05.000Z,https://twitter.com/A_Kapustin/status/1253706283141795841,true,"[""best""]",tweet,A_Kapustin_1253706283141795841,A_Kapustin,twitter,null,"когда в 2020 году вышел за хлебушком не в самый ближайший магазин и пытаешься не попасться мусорам https://t.co/jEwZnCNNye
![](https://pbs.twimg.com/ext_tw_video_thumb/1253706242599632898/pu/img/_PJjiPZA7fLXEass.jpg)
",анатолий ноготочки💅,undefined
2020-05-26T20:45:31.000Z,https://twitter.com/A_Kapustin/status/1265383585315463174,true,"[""best""]",tweet,A_Kapustin_1265383585315463174,A_Kapustin,twitter,null,"ДА ГОСПОДИИИИИ https://t.co/SlJCUmxZyZ
![](https://pbs.twimg.com/media/EY-LqUsWoAA8F5o.jpg)
",анатолий ноготочки💅,undefined
2020-06-07T09:54:46.000Z,https://twitter.com/A_Kapustin/status/1269568474415849472,true,"[""best""]",tweet,A_Kapustin_1269568474415849472,A_Kapustin,twitter,null,"https://t.co/NxVmvqhN0L
![](https://pbs.twimg.com/media/EZ5pzCMWkAENaZJ.jpg)
",анатолий ноготочки💅,undefined
2020-06-07T10:01:02.000Z,https://twitter.com/A_Kapustin/status/1269570051822280704,true,"[""best""]",tweet,A_Kapustin_1269570051822280704,A_Kapustin,twitter,null,"Я: пытаюсь уснуть в 4 часа ночи, когда уже птицы петь начали

Мой мозг: https://t.co/4bmORfZpSG
![](https://pbs.twimg.com/media/EZ5rO0dWkAAaTfF.jpg)
",анатолий ноготочки💅,undefined
2020-06-12T12:41:04.000Z,https://twitter.com/A_Kapustin/status/1271422266199474178,true,"[""best""]",tweet,A_Kapustin_1271422266199474178,A_Kapustin,twitter,null,"Инстаграмная критика искусства 19 века это красиво👍 https://t.co/tm2Oqiozev
![](https://pbs.twimg.com/media/EaT_yM4WAAgTUU2.jpg)
![](https://pbs.twimg.com/media/EaT_yM-X0AcSmU7.jpg)
![](https://pbs.twimg.com/media/EaT_yNFXYAICtJh.jpg)
![](https://pbs.twimg.com/media/EaT_yNBWAAMNQEj.jpg)
",анатолий ноготочки💅,undefined
2020-04-08T13:55:03.000Z,https://twitter.com/aalien/status/1247885672498618370,true,"[""best""]",tweet,aalien_1247885672498618370,aalien,twitter,null,"https://t.co/i26GhQtXIj
![](https://pbs.twimg.com/media/EVFhZopUUAATrXs.jpg)
",David Homak,undefined
2020-04-03T09:47:10.000Z,https://twitter.com/aarexer/status/1246011350754766848,true,"[""best""]",tweet,aarexer_1246011350754766848,aarexer,twitter,null,"Любой твиттерский дед. https://t.co/g6nwx9fPw6
![](https://pbs.twimg.com/media/EUq4nQzUEAAvjL2.png)
",Александр Кучук,undefined
2020-05-24T18:42:29.000Z,https://twitter.com/aarexer/status/1264627847857156096,true,"[""best""]",tweet,aarexer_1264627847857156096,aarexer,twitter,null,"Девушка до отношений: Нихуя ты долбоеб))

Девушка во время отношений: Нихуя ты долбоеб...

Девушка после отношений: Нихуя ты долбоеб ((
",Александр Кучук,undefined
2020-03-03T13:12:18.000Z,https://twitter.com/alexmak/status/1234828952319012867,true,"[""best""]",tweet,alexmak_1234828952319012867,alexmak,twitter,https://twitter.com/2242231/status/1234828054989561856,"Некоторые фото-победители https://t.co/0KJhWe7bUy
![](https://pbs.twimg.com/media/ESL-YBZW4AAQn_T.jpg)
![](https://pbs.twimg.com/media/ESL-YDxWoAEt3zk.jpg)
![](https://pbs.twimg.com/media/ESL-YC9W4AAPBEw.jpg)
![](https://pbs.twimg.com/media/ESL-YCNWoAAg9Bq.jpg)
",Очумелая Cobra,undefined
2020-03-06T19:51:59.000Z,https://twitter.com/alexmak/status/1236016696823083008,true,"[""best""]",tweet,alexmak_1236016696823083008,alexmak,twitter,null,"Мощь https://t.co/IsJhya2l1Z
![](https://pbs.twimg.com/ext_tw_video_thumb/1236016637091999745/pu/img/IIAshzCKtXGOuwlF.jpg)
",Очумелая Cobra,undefined
2020-05-13T02:15:15.000Z,https://twitter.com/alexmak/status/1260393138386075649,true,"[""best""]",tweet,alexmak_1260393138386075649,alexmak,twitter,null,"> [In reply to](https://twitter.com/juliaferraioli/status/1260233745921126400):
> I've been working remotely for 2.5 years. The past 2.5 months have left me more *exhausted* than ever before.> 
> 
This is your reminder that you're not working remotely. You're working remotely during a global health crisis.

Как человек, работающий удаленно очень давно, подтверждаю - как-то гораздо тяжелее все в последние пару месяцев https://t.co/ZbhLfSU49g
",Очумелая Cobra,undefined
2020-02-06T19:53:13.000Z,https://twitter.com/alphyna/status/1225507758805540866,true,"[""best""]",tweet,alphyna_1225507758805540866,alphyna,twitter,null,"и всё-таки я считаю, что сбрасывать букву «ё» с корабля современности пока что рано https://t.co/gEiktfiZmZ
![](https://pbs.twimg.com/media/EQHgzzVWoAES8Hi.png)
",Альфина @ самоизоляция,undefined
2020-06-01T12:42:18.000Z,https://twitter.com/Ar_car_na/status/1267436309129433089,true,"[""best""]",tweet,Ar_car_na_1267436309129433089,Ar_car_na,twitter,https://twitter.com/2399687505/status/1267429826543132673,"@twlldun @MysteriosoX I know where they could buy an office kettle. https://t.co/8vfqiBMVG5
![](https://pbs.twimg.com/media/EZbWmxvWAAAkx4M.jpg)
",Ar-Car-Na (Actually building his models),undefined
2020-06-12T12:44:28.000Z,https://twitter.com/arauchynnikau/status/1271423122529554440,true,"[""best""]",tweet,arauchynnikau_1271423122529554440,arauchynnikau,twitter,null,"> [In reply to](https://twitter.com/A_Kapustin/status/1271422266199474178):
> Инстаграмная критика искусства 19 века это красиво👍 https://t.co/tm2Oqiozev
> ![](https://pbs.twimg.com/media/EaT_yM4WAAgTUU2.jpg)
> ![](https://pbs.twimg.com/media/EaT_yM-X0AcSmU7.jpg)
> ![](https://pbs.twimg.com/media/EaT_yNFXYAICtJh.jpg)
> ![](https://pbs.twimg.com/media/EaT_yNBWAAMNQEj.jpg)

Мое любимое - это критерий оценки художественного произведения в формате ""кто захочет повесить это в своей панельной двушке?"" https://t.co/8waNiYybfX
",ледоколы и секспросвет,undefined
2020-03-09T15:52:07.000Z,https://twitter.com/ArfMeasures/status/1237043496227409920,true,"[""best""]",tweet,ArfMeasures_1237043496227409920,ArfMeasures,twitter,null,"Interviewer: Why do you want to work for Facebook?

Me: I'm keen on protecting people's data and want them to have a good user experience

Interviewer:

Me:

Interviewer:

Me: haha I'm joking I don't give a shit

Interviewer: haha omg I was like whaaatttt lmao
",Jon,undefined
2020-03-05T05:56:22.000Z,https://twitter.com/arxont/status/1235444019431387136,true,"[""best""]",tweet,arxont_1235444019431387136,arxont,twitter,null,"Ребятки, ходите чаще к врачу и раз в год сдавайте кровь-мочу-кал-флюшку. 
 
И если чё-то беспокоит не надо думать, что ""хуйня само пройдёт"", или ""чё я за мужик, с такой хуйнёй людей беспокоить"", или ""сейчас надо работать, некогда по врачам ходить"". Иногда не проходит.
",Ivan,undefined
2020-05-16T02:28:00.000Z,https://twitter.com/ashleycacioppo/status/1261483507832020992,true,"[""best""]",tweet,ashleycacioppo_1261483507832020992,ashleycacioppo,twitter,null,"absolutely no one:
my dad doing virtual reality: https://t.co/nkLmtEJlZj
![](https://pbs.twimg.com/ext_tw_video_thumb/1261483469852626944/pu/img/UYzXU6Z9w2xjVKPm.jpg)
",Ashley Madison,undefined
2020-05-15T22:03:02.000Z,https://twitter.com/AVBoets/status/1261416829089574913,true,"[""best""]",tweet,AVBoets_1261416829089574913,AVBoets,twitter,null,"Не все поймут, но... https://t.co/UsQMc0eqYh
![](https://pbs.twimg.com/media/EYFz6gWX0AAsypr.jpg)
",Саша ПодМосковный,undefined
2020-05-23T19:29:08.000Z,https://twitter.com/beckyvenus/status/1264277200376913921,true,"[""best""]",tweet,beckyvenus_1264277200376913921,beckyvenus,twitter,null,"smoking a bong then staring at this for hours https://t.co/ALLS7P28OM
![](https://pbs.twimg.com/media/EYudaSDXsAk2Jaj.jpg)
",becky venus,undefined
2020-02-21T16:28:54.000Z,https://twitter.com/BladeCityKnives/status/1230892161136238593,true,"[""best""]",tweet,BladeCityKnives_1230892161136238593,BladeCityKnives,twitter,null,"Incredible 😮 https://t.co/PFDbVWPIvc
![](https://pbs.twimg.com/ext_tw_video_thumb/1230892074205097986/pu/img/9_gCHBOHi7Vd79v-.jpg)
",Blade City,undefined
2020-02-23T17:13:49.000Z,https://twitter.com/CarlHerberger/status/1231628241334566913,true,"[""best""]",tweet,CarlHerberger_1231628241334566913,CarlHerberger,twitter,null,"Wow! I heard about this but seeing it is amazingly creepy and dystopian to see! #coronavirus https://t.co/6nmetL33wM
![](https://pbs.twimg.com/ext_tw_video_thumb/1231628184766033920/pu/img/wVWWCquDuzafsqE6.jpg)
",Carl Herberger,undefined
2020-05-28T19:04:53.000Z,https://twitter.com/changelog/status/1266083035713331202,true,"[""best""]",tweet,changelog_1266083035713331202,changelog,twitter,null,"Code Review Cat does NOT like what it sees https://t.co/gIRKbYPF7I
![](https://pbs.twimg.com/ext_tw_video_thumb/1266082579465351169/pu/img/puY8q_ZkT-YDB3QU.jpg)
",Changelog,undefined
2020-05-14T19:22:05.000Z,https://twitter.com/Chilikto/status/1261013935051935744,true,"[""best""]",tweet,Chilikto_1261013935051935744,Chilikto,twitter,null,"https://t.co/x2kopImHVz
![](https://pbs.twimg.com/media/EYAFe4rWoAQc6gB.jpg)
",Чилик,undefined
2020-02-14T14:59:44.000Z,https://twitter.com/chilipizdrohan/status/1228333004705206272,true,"[""best""]",tweet,chilipizdrohan_1228333004705206272,chilipizdrohan,twitter,null,"🇷🇺: кто в каком классе учился? я в а
🇺🇦: о и я в а
🇧🇾: а я в б
🇰🇿: а я и в а и в б
иностранцы: мы для вас шутка да?
",🌿 император лени 🌿,undefined
2020-03-04T13:16:54.000Z,https://twitter.com/ClayTravis/status/1235192497162399744,true,"[""best""]",tweet,ClayTravis_1235192497162399744,ClayTravis,twitter,null,"Soccer coach is asked about coronavirus, gives fantastic response. https://t.co/nIgS8OmZcm
![](https://pbs.twimg.com/ext_tw_video_thumb/1234986114403971072/pu/img/ldqNoOSH0URNOGBy.jpg)
",Clay Travis,undefined
2020-05-09T18:18:21.000Z,https://twitter.com/Criogenz/status/1259185956890071046,true,"[""best""]",tweet,Criogenz_1259185956890071046,Criogenz,twitter,null,"https://t.co/GJnQYvFsMg
![](https://pbs.twimg.com/media/EXmG8o4XgAE_EHw.jpg)
",Criogenz,undefined
2020-03-11T00:42:28.000Z,https://twitter.com/davidhoang/status/1237539349970878464,true,"[""best""]",tweet,davidhoang_1237539349970878464,davidhoang,twitter,null,"Leadership role expectations:

- 24/7 thought leadership
- Conference speaking
- Podcasts interviews 

Leadership role reality:

- Saying the same things over again consistently at scale
- Asking two teams if they’ve talked to each other
- Finding where that Google doc is
",David Hoang,undefined
2020-05-15T03:30:51.000Z,https://twitter.com/DerArto/status/1261136936795766784,true,"[""best""]",tweet,DerArto_1261136936795766784,DerArto,twitter,null,"А сколько вам было лет, когда вы узнали, что закрывать коробки с хлопьями и крупами, на самом деле, нужно вот так? https://t.co/BkE4MQsOxv
![](https://pbs.twimg.com/ext_tw_video_thumb/1261136659426488320/pu/img/OqgWZTAqzbDyKGi8.jpg)
",Артём Дерягин,undefined
2018-07-22T17:53:06.000Z,https://gist.github.com/swalkinshaw/3a33e2d292b60e68fcebe12b62bbb3e2,false,"[""graphql"",""best""]",article,Designing a GraphQL API,null,pocket,null,"# Designing a GraphQL API

by 262588213843476, [gist.github.com](http://gist.github.com)  
February 13, 2019

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!",null,undefined
2020-05-01T16:05:08.000Z,https://twitter.com/disruptnhandlr/status/1256253329732014080,true,"[""best""]",tweet,disruptnhandlr_1256253329732014080,disruptnhandlr,twitter,null,"На платформе https://t.co/2E7lDXLDS4 очень полезный курс с мягким введением в сложные алгоритмы. Для меня стала проясняться динамика, которую я никогда раньше как следует не понимал (после того, как неделю решал три последние задачи в разделе Восстановление ответа) https://t.co/ZZTDP36y99
![](https://pbs.twimg.com/media/EW8bo25VAAYp2gt.jpg)
",Amir,undefined
2020-04-12T13:58:34.000Z,https://twitter.com/DobryVojakSvejk/status/1249336107189374976,true,"[""best""]",tweet,DobryVojakSvejk_1249336107189374976,DobryVojakSvejk,twitter,null,"Печень алкоголика, спившегося крафтовым пивом. Красиво, но стоит ли это таких жертв? https://t.co/a58QaABWjM
![](https://pbs.twimg.com/media/EVaIkKyXkA0p61N.jpg)
",чехословакия,undefined
2020-02-10T12:38:09.000Z,https://twitter.com/dushnila_damn/status/1226847824840712192,true,"[""best""]",tweet,dushnila_damn_1226847824840712192,dushnila_damn,twitter,null,"Тред деталей и отсылок в фильме Квентина Тарантино «Однажды ... в Голливуде». 
Я буду пополнять его в течение недели, собрав все детали, что смогу найти. https://t.co/I7B6BqVI1r
![](https://pbs.twimg.com/tweet_video_thumb/EQajlsCXYAANh9S.jpg)
",душнила ебучий,undefined
2020-03-08T19:00:26.000Z,https://twitter.com/ebany_ohuet/status/1236728502575128576,true,"[""best""]",tweet,ebany_ohuet_1236728502575128576,ebany_ohuet,twitter,null,"В СОПЛИ https://t.co/Sj4chsynNZ
![](https://pbs.twimg.com/media/ESm-As7XgAE8I1D.png)
![](https://pbs.twimg.com/media/ESm-BApWsAA5HDW.jpg)
",⛓ebany,undefined
2015-02-24T21:21:00.000Z,http://rauchg.com/2015/ecmascript-6/,false,"[""best""]",article,rauchg.com/2015/ecmascrip… by @rauchg is the best intro to ES6  I've read s,null,pocket,null,"# ECMAScript 6

[rauchg.com](http://rauchg.com) | February 22, 2015

> The limits of my language mean the limits of my world.  
> – Ludwig Wittgenstein

For the past few months I’ve been exclusively writing ECMAScript 6 code by taking advantage of transpilation[\[1\]](https://rauchg.com/2015/ecmascript-6#f1) to a currently supported version of JavaScript.

ECMAScript 6, henceforth ES6 and formerly ES.next, is the latest version of the specification. As of August 2014 no new features are being discussed, but details and edge cases are still being sorted out. It’s expected to be completed and published mid-2015.

Adopting ES6 has simultaneously resulted in increased productivity (by making my code more succinct) and eliminated entire classes of bugs by addressing common JavaScript gotchas.

More importantly, however, it’s reaffirmed my belief in an evolutionary approach towards language and software design as opposed to [clean-slate recreation](http://www.sigcomm.org/sites/default/files/ccr/papers/2008/January/1341431-1341436.pdf)

This should be fairly obvious to you if you’ve been using CoffeeScript, which set out to focus on the good parts of JS and hide the broken ones. ES6 has been able to adopt a lot of CoffeeScript’s great innovations in a non-disruptive way, to such an extent that some have even questioned its [role moving forward](https://github.com/jashkenas/coffeescript/issues/3859).

> For all intents and purposes, JavaScript has merged CoffeeScript into master.  > I call that a victory for making things and trying them out.  
> – \[object Object\]

Instead of making a thorough review of [all the new features](https://github.com/lukehoban/es6features), I’ll point out the most interesting ones. To incentivize developers to upgrade, new languages or frameworks need to (1) feature a compelling compatibility story and (2) give you a [big enough carrot](http://teddziuba.tumblr.com/post/26426290981/python-3s-marketing-problem).

ES6 introduces **syntax** for defining modules and declaring dependencies. I emphasize the word syntax because ES6 is not concerned with the actual implementation details of how modules are fetched or loaded.

This further strengthens the **interoperability** between the different contexts in which JavaScript can be executed.

Up to now, no guidelines existed for how to actually do this. A common approach is to introduce a function declaration:

Consider as an example the simple task of writing a reusable implementation of [CRC32](http://en.wikipedia.org/wiki/Cyclic_redundancy_check) in JavaScript.

Up to now, no guidelines existed for how to actually do this. A common approach is to introduce a function declaration:

```
function crc32 () {
  // …
}
```

With the caveat, of course, that it introduces a single fixed global name that other parts of the code will have to refer to. And from the perspective of the code that uses that `crc32` function, there’s no way to declare the dependency. One just has to assume the function will exist prior to the code’s interpretation.

With this situation in mind, Node.JS led the way with the introduction of the `require` runtime function and the `module.exports` and `exports` objects. Despite succeeding in creating a thriving ecosystem of modules around it, the interoperability possibilities were still somewhat limited.

A common scenario to illustrate this is the generation of browser bundles of modules, with tools like [browserify](http://browserify.org/) or [webpack](https://github.com/webpack/webpack). These can only be conceived because they treat `require()` as syntax, effectively ridding it of its inherent dynamism.

If you’re trying to transport code to the browser, the following is not subject to static analysis and therefore breaks:

```
require(woot() + ‘_module.js’)
```

In other words, the packer’s algorithm can’t possibly know what `woot()` means ahead of time.

ES6 has introduced the right set of restrictions while accomodating for most existing use cases, drawing inspiration from most of the informally-specified ad-hoc module systems out there, like jQuery’s `$`.

The syntax does take some getting used to. The most common pattern for dependency definitions is surprisingly impractical.

The following code:

```
import crc32 from ‘crc32’
```

works for

```
export default function crc32(){}
```

but not for

```
export function crc32()
```

the latter is considered a _named export_ and requires the `{ }` syntax in the import statement:

```
import { crc32 } from ‘crc32’
```

In other words, the simplest (and arguably most desirable) form of module definition requires the extra default keyword. Or in the absence of that, the usage of `{ }` when importing.

One of the most common patterns that has emerged in modern JavaScript code is the usage of option objects.

So common is this practice that newly specified browser APIs, like WHATWG’s [fetch](https://fetch.spec.whatwg.org/) (a modern substitute for XMLHttpRequest) follow it:

```
fetch(‘/users’, {
  method: ‘POST’,
  headers: {
    Accept: ‘application/json’,
    ‘Content-Type’: ‘application/json’
  },
  body: JSON.stringify({
    first: ‘Guillermo’,
    last: ‘Rauch’
  })
})
```

The widespread adoption of this pattern has effectively prevented the JavaScript ecosystem from falling into [The Boolean Trap](http://ariya.ofilabs.com/2011/08/hall-of-api-shame-boolean-trap.html).

If said API accepted regular parameters as opposed to an options object, calling fetch would be an exercise in argument order memorization and the typing of the `null` keyword.

```
// artistic rendition of a nightmare alternative world
fetch(‘/users’, ‘POST’, null, null, {
  Accept: ‘application/json’,
  ‘Content-Type’: ‘application/json’
}, null, JSON.stringify({
  first: ‘Guillermo’,
  last: ‘Rauch’
}))
```

On the implementation side of things, however, things haven’t looked nearly as pretty. Looking at the function’s declaration signature is no longer descriptive of its input’s possibilities:

```

function fetch(url, opts){
  // …
}
```

Usually followed by the manual assignment of defaults to local variables:

```
opts = opts || {}
var body = opts.body || ''
var headers = opts.headers || {}
var method = opts.method || 'GET'
```

And unfortunately for us, despite being common, the `||` practice actually introduces subtle bugs. In this case we’re not admitting that `opts.body` could be 0, so robust code would most likely look like:

```
var body = opts.body === undefined ? '' : opts.body
```

Thanks to destructured parameters we can at once clearly define the parameters, properly set defaults and expose them to the local scope:

```
fetch(url, { body='', method='GET', headers={} }){
  console.log(method) // no opts. everywhere!

```

As a matter of fact, defaults can also apply to the entire object parameter as well:

```
fetch(url, { method='GET' } = {}){
  // the second parameter defaults to {}
  // the following will output ""GET"":
  console.log(method)
}
```

You can also destructure with the assignment operator as follows:

```
var { method, body } = opts
```

This is reminiscent to me of the expressiveness granted by `with`, without the magic or negative performance implications.

Some parts of the language have been altogether replaced with better alternatives that’ll quickly become a new default for how you write JavaScript.

I’ll go over some of them.

Instead of writing `var x = y` you’ll most likely be writing `let x = y`. let scopes your variable definition to the block it’s defined in:

```
if (foo) {
  let x = 5
  setTimeout(function(){ 
    // x is `5` here   
  }, 500)
}
// x is `undefined` here
```

This is especially useful for `for` or `while` loops:

```
for (let i = 0; i < 10; i++) {}
// `i` doesn't exist here.
```

When you want to ensure [binding immutability](https://mathiasbynens.be/notes/es6-const) with the same semantics as `let`, use `const` instead.

With the lack of `sprintf` or similar utilities in the standard JavaScript library, composing strings has always been more painful than it should.

Template strings make the embedding of expressions trivial, as well as support for multiple lines. Simply replace `‘` with `` ` ``.

```
let str = `
  Hello ${first}. 
  We are in the year ${new Date().getFullYear()}
`
```

Defining a class was cumbersome and required a deep understanding of the language internals. Even though it’s still obviously useful to grasp the inner-workings, the barrier to entry to newcomers was unnecessarily high.

`class` offers syntax sugar for defining a constructor `function`, the methods within `prototype` and getters / setters. It also provides prototypical inheritance with syntax alone (no utilities or 3rd party modules).

```
class A extends B {
  constructor(){}
  method(){}
  get prop(){}
  set prop(){}
}
```

I initially was surprised to learn classes are not hoisted (explanation [here](https://esdiscuss.org/history/2014-06-05T15%3A54%3A16.000Z-rossberg.google.com?path=%2Ftopic%2Fin-es6-strict-mode-do-function-declarations-within-a-block-hoist)). You should therefore think of them translating roughly to `var A = function(){}` as opposed to `function A(){}`.

Not only is `(x, y) => {}` shorter to write than `function (x,y) {}`, but the behavior of this within the function body will most likely refer to what you want.

The so-called “fat arrow” functions are _lexically bound_. Consider the example of a method within a class that launches two timers:

```
class Person {
  constructor(name){
    this.name = name
  }

  timers(){
    setTimeout(function(){
      console.log(this.name)
    }, 100)

    setTimeout(() => {
      console.log(this.name)
    }, 100)
  }
}
```

To the dismay of newcomers to the language, the first timer (using `function`) will log `""undefined""`. The second one will now correctly log name.

Asynchronous code execution has been around for almost the entire history of the language. `setTimeout`, after all, was introduced around the time JavaScript 1.0 came out.

But arguably, the language didn’t _really support_ it. The return value of function calls that scheduled “future work” is normally `undefined`, or in the case of `setTimeout` a `Number`.

The introduction of `Promise` addresses this, and by doing so fills a very large hole of interoperability and [composability](https://blog.jcoglan.com/2011/03/11/promises-are-the-monad-of-asynchronous-programming/).

On one hand, APIs you’ll encounter become wholly more predictable. As a test of this, consider the new `fetch` API. How does it work beyond the signature we described? You guessed right. It returns a `Promise`.

If you’ve used Node.JS in the past, you know that there’s an informal contract that callbacks will follow the signature:

```
function (err, result){}
```

Also informally specified is the idea that callbacks will fire _only once_. And that `null` will be the value in the absence of an error (and not `undefined` or `false`). Except, this might not always [be the case](https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b#7cda).

ES6 is gaining a lot of momentum in the ecosystem. [Chrome](https://twitter.com/addyosmani/status/541978036904554496) and [io.js](https://iojs.org/en/es6.html) have already incorporated some of its features. A lot has already been written about it.

But what’s worth pointing out is that this momentum has been largely enabled by _transpilation_ rather than actual support. [Great tools](http://babeljs.io/) have emerged to enable transpiling and polyfilling, and browsers have over time added proper debugging and error reporting support for them (through source maps).

The evolution of the language and its proposed features are outpacing implementation. As mentioned above, `Promise` is genuinely exciting as a building block alone, but consider the benefits of solving [the callback problem](http://tirania.org/blog/archive/2013/Aug-15.html) once and for all.

**ES7** is poised to do this by introducing the possibility of `await`\-ing a promise:

```
async function uploadAvatar(){
  let user = await getUser()
  user.avatar = await getAvatar()
  return await user.save()
}
```

Even though the spec is in its [early discussions](https://esdiscuss.org/notes/2014-01-30#async-await), the same tool that compiles ES6 to ES5 already [enables it](http://babeljs.io/docs/usage/transformers/#async-to-generator).

There’s still substantial work left to do to make sure the process of adopting new language syntax and APIs becomes even more friction-less to those getting started.

But one thing is for certain: we must embrace the moving target.

1\. [^](https://rauchg.com/2015/ecmascript-6#s1) I use the word “transpilation” throughout the article on the basis of its popularity to refer to JavaScript source-to-source compilation. That aside, the merits of the term are [technically debatable](https://twitter.com/fogus/status/550717447163355136).",null,undefined
2020-04-17T05:28:14.000Z,https://twitter.com/ElliottZ/status/1251019617704660993,true,"[""best""]",tweet,ElliottZ_1251019617704660993,ElliottZ,twitter,null,"Did you know Chrome has a fast path that makes toggling descendant selectors super fast? So if you want to toggle a dark theme,  or change some styles when the page is not scrolled to the top, by far the fastest way is to toggle a class on body like .scrolled or .dark-theme
",Elliott Sprehn,undefined
2020-06-11T09:49:26.000Z,https://twitter.com/elonmusk/status/1271016684489281536,true,"[""best""]",tweet,elonmusk_1271016684489281536,elonmusk,twitter,null,"lol
",Elon Musk,undefined
2020-03-23T06:46:05.000Z,https://twitter.com/eto_prekrasno/status/1241979514458181637,true,"[""best""]",tweet,eto_prekrasno_1241979514458181637,eto_prekrasno,twitter,null,"как-то так обстоят дела https://t.co/NlQULjKPK3
![](https://pbs.twimg.com/media/ETxlx-gX0AAflxc.jpg)
",это прекрасно,undefined
2020-04-04T12:49:22.000Z,https://twitter.com/eugenekudashev/status/1246419589107417088,true,"[""best""]",tweet,eugenekudashev_1246419589107417088,eugenekudashev,twitter,null,"тред лучших поправок в конституцию https://t.co/d59e4baCT0
![](https://pbs.twimg.com/media/EUwrsMOXkAMVppr.jpg)
",should i write something funny here,undefined
2020-05-28T09:35:54.000Z,https://twitter.com/FallFrom/status/1265939849611223040,true,"[""best""]",tweet,FallFrom_1265939849611223040,FallFrom,twitter,null,"Заказчик скульптуры: и какие аллегории тут скрыты?
Скульптор: хвать за жепку
Заказчик: Что?
Скульптор: Что? https://t.co/BbU9qYshID
![](https://pbs.twimg.com/media/EZGFkzIWkAEeT8V.jpg)
",нет,undefined
2020-02-07T06:16:15.000Z,https://twitter.com/FelixTheBest/status/1225664553179992066,true,"[""best""]",tweet,FelixTheBest_1225664553179992066,FelixTheBest,twitter,null,"Шон Иллинг: Что такое «булшит-работа»?
Дэвид Гребер: Это работа, существование которой не может объяснить даже человек, который ее выполняет, и ему приходится притворяться, что какая-то причина все-таки существует.

Доброе утро, разработчики.
",Felix The Bestovitch,undefined
2020-02-07T11:18:55.000Z,https://twitter.com/FelixTheBest/status/1225740718645358593,true,"[""best""]",tweet,FelixTheBest_1225740718645358593,FelixTheBest,twitter,https://twitter.com/1107249433/status/1225739464808464386,"Вообще забавно бывает.
Узнаёшь про A компании B: 100 человек, кластер микросервисов, ежегодно обновляемый стек, бла-бла -- страница про кота.
Узнаёшь про X компании Y: 10 человек, монолит на C/Erlang, миграция версий раз в 2..3 года -- автоматика космической базы на Меркурии.
",Felix The Bestovitch,undefined
2020-02-17T06:48:03.000Z,https://twitter.com/FelixTheBest/status/1229296433175650304,true,"[""best""]",tweet,FelixTheBest_1229296433175650304,FelixTheBest,twitter,https://twitter.com/1107249433/status/1229295928735141888,"Джуны и миддлы об этом могут не париться. Но сеньор+ нередко участвует в дискуссиях, в которых ему надо продавить свою точку зрения, позицию своего коллектива, не прогнуться под очевидно невыгодные условия. Мычишь? Долго думаешь? Разбиваешься в хлам от любой агрессии -- ну ы.
",Felix The Bestovitch,undefined
2020-02-17T19:16:06.000Z,https://twitter.com/FelixTheBest/status/1229484686671519745,true,"[""best""]",tweet,FelixTheBest_1229484686671519745,FelixTheBest,twitter,https://twitter.com/1107249433/status/1229483812347957250,"И вот вдруг огромный пухлый мешок ситуаций, в которых все хорошие и умные, но вам надо убеждать, объяснять, отстаивать позицию.

Уж не говорю про другой мешок, в котором вы на белой лошадке со шпагой в зубах должны оборонять правое дело от уже несколько менее умных и хороших.
",Felix The Bestovitch,undefined
2020-02-18T18:53:47.000Z,https://twitter.com/FelixTheBest/status/1229841455738433544,true,"[""best""]",tweet,FelixTheBest_1229841455738433544,FelixTheBest,twitter,null,"[Алан Стерн, Дэвид Гринспун. За новыми горизонтами. Первый полет к Плутону] — рассказ о проекте реального мира. Рекомендую фиалочкам под баночкой от разработки, считающим, что конфликт или отстаивание позиции или торг — это ужас-ужас и т.п. Читать вдумчиво.
",Felix The Bestovitch,undefined
2020-04-08T13:54:39.000Z,https://twitter.com/FelixTheBest/status/1247885572795813889,true,"[""best""]",tweet,FelixTheBest_1247885572795813889,FelixTheBest,twitter,null,"Столько раз за рабочую жизнь натыкался на «если бы в этом тупом месте был тупой юнит-тест, мы не убили бы неделю», что даже не спорю с теми, кто не покрывает «тупые места», ведь ну тривиально же, очевидно же, бла-бла-бла. Каждому «Титанику» свой айсберг.
",Felix The Bestovitch,undefined
2020-04-08T14:05:31.000Z,https://twitter.com/FelixTheBest/status/1247888307494633475,true,"[""best""]",tweet,FelixTheBest_1247888307494633475,FelixTheBest,twitter,https://twitter.com/1107249433/status/1247885572795813889,"Вообще граница между сеньором и [настоящим] сеньором в понимании, принятии и соломке факта: ты не самый умный и однажды налажаешь ровно там, где «ну какой идиот будет так делать». Первых жизнь не научила, что все мы так себе гении. Просто не всех ещё свой снаряд нашёл.
",Felix The Bestovitch,undefined
2020-04-20T14:45:37.000Z,https://twitter.com/FelixTheBest/status/1252247050672058368,true,"[""best""]",tweet,FelixTheBest_1252247050672058368,FelixTheBest,twitter,https://twitter.com/1107249433/status/1252244932775026689,"И всё это не ИНДУСТРИЯ. Это, блин, толпа разномастных чудаков, лабающих свои утилитки кто в лес, кто по дрова, не способных выработать (и придерживаться) жёсткий стандарт, жёсткие правила. Вместо результата постоянный процесс, блин. А мне за 30 лет надоел процесс ради процесса.
",Felix The Bestovitch,undefined
2020-05-09T13:42:40.000Z,https://twitter.com/FelixTheBest/status/1259116578253217792,true,"[""best""]",tweet,FelixTheBest_1259116578253217792,FelixTheBest,twitter,null,"Зачастую токсичный разработчик в команде — человек, который видит вашу реальную квалификацию и у него в нескольких местах сломана ладонь фейспалмить от ваших отжигов. Но вы-то считаете себя ок, выше головы не прыгнешь. Потому не вы лишнее звено, но это он токсичный, конечно.
",Felix The Bestovitch,undefined
2020-05-22T16:11:54.000Z,https://twitter.com/FelixTheBest/status/1263865177923084288,true,"[""best""]",tweet,FelixTheBest_1263865177923084288,FelixTheBest,twitter,null,"«Офицер не должен быть конструктором, но он должен быть способен судить о конструкциях» — привет от Тирпица.
",Felix The Bestovitch,undefined
2020-05-27T05:44:42.000Z,https://twitter.com/FelixTheBest/status/1265519276573757441,true,"[""best""]",tweet,FelixTheBest_1265519276573757441,FelixTheBest,twitter,null,"К вопросу о постоянном вертикальном росте из разрабов в CTO. https://t.co/8dzDpX3FIg
![](https://pbs.twimg.com/media/EZAHDd9XQAEd8Dn.jpg)
",Felix The Bestovitch,undefined
2020-05-27T07:59:31.000Z,https://twitter.com/FelixTheBest/status/1265553203778719745,true,"[""best""]",tweet,FelixTheBest_1265553203778719745,FelixTheBest,twitter,https://twitter.com/1107249433/status/1265552670301007872,"Отсюда простой вывод по краям:
* программист сайта-магазина должен быстро наговнякать и в прод (грубо «не писать код дольше, чем этот код приносит прибыль»);
* программист линкора должен кодить максимально тщательно (код всё равно проживёт дольше), время не в приоритете.
",Felix The Bestovitch,undefined
2020-05-05T13:20:22.000Z,https://twitter.com/fooljulian/status/1257661417873911809,true,"[""best""]",tweet,fooljulian_1257661417873911809,fooljulian,twitter,null,"software engineering https://t.co/r8b4kh5qkT
![](https://pbs.twimg.com/media/EXQcXKWWkAguKzp.jpg)
",Julian Marinus,undefined
2020-05-28T21:30:52.000Z,https://twitter.com/fun_taril/status/1266119773492043777,true,"[""best""]",tweet,fun_taril_1266119773492043777,fun_taril,twitter,null,"сук https://t.co/he3PtT12yW
![](https://pbs.twimg.com/media/EZIpNk7XsAQinD6.jpg)
",Илюхер,undefined
2016-09-12T16:37:27.000Z,https://blog.freeletics.com/en/flexibility-techniques/,false,"[""best""]",article,Flexibility techniques,null,pocket,null,"# Get bendy: flexibility techniques

[freeletics.com](http://freeletics.com) | August 30, 2016 01:00 PM

**Flexibility is about way more than backflips and being able to touch your toes. Did you know that improved flexibility increases range of motion and your ability to smash that star performance? If you’re someone who neglects flexibility training, it’s now time to work on your stiffness. Here’s a few dynamic and static movements you can try out.**

**Isn’t flexibility all down to genetics?**

Of course there are many factors that contribute to how flexible you are. You can discover these on the [Freeletics Knowledge Center.](https://www.freeletics.com/en/knowledge/flexibility/) However, if flexibility isn’t your core strength, don’t worry. It can be worked on. Flexibility can be increased by exercising regularly and practicing various dynamic or static stretching movements. Here’s how we do them:

**Dynamic movements:**

## World’s greatest stretch

– _for mobility in the hips, legs and spine._

1.  _Lunge forward and try to touch your ankle with your elbow while keeping your shin fairly vertical. The other hand rests on the ground in line with the foot._
2.  _Rotate your upper body, trying to point your chest upwards. Switch between both positions for about five repetitions. When going up, try to straighten both legs with your hands still touching the ground and your back straight. Pull the front toes towards you._

## Step Back Squat

**–** _opens the hips and activates the legs. Ideal prior to a leg workout. Also good for balance ._

1.  _Raise your knee, swing leg outward and take a step back. Try to have one leg fully extended while you go into a full squat with the other leg. Use your arms to maintain balance, trying to have both heels on the ground._

## Knee to chest/Butt kick

– _ideal for runners if you’ve been sitting all day. Activates both the hip flexors and the hip extensors prior to a running workout._

1.  _Pull your knee firmly to your chest._
2.  _Swing the leg through, grab your ankle and pull the ankle towards your butt._
3.  _Extend the other arm to lengthen your upper body. Maintain a straight body line throughout the full movement._

## Warmup Roll

**–** _good to stretch the whole posterior chain and mobilize your spine. Ideal for workouts that include jumps and lifts._

1.  _With your legs spread wide and straight, reach forward as far as possible and touch the ground._
2.  _Roll back onto your shoulders with some momentum and try to touch the ground with your feet together and your legs straight. Tightening your core helps you to further push up your butt._

## Deep Squat

– _opens hips, relaxes spine, activates legs. Always recommended._

1.  _go down into a deep squat with your heels on the ground. Use a low object to rest your heels on if you don’t have the flexibility for the full squat, such as a mat or some wooden board._
2.  _Try to keep your back upright._
3.  _Place your elbows inside your knees with the hands together in the middle._
4.  _Carefully push the knees outward to increase tension in your hips._

**Static movements:**

## Camel

**–** stretches _upper legs/thighs/quads, the abs and opens the chest. Also stretches the hip flexors. Recommended after workouts that stress these regions._

1.  _Kneel down, reach for your heels._
2.  _Point the chest upward and push your hips forward until you feel a tension in the upper legs and the hip flexors. You can vary the height of your heels by the positioning of your feet. But always push your hips forward._

## Toes Reach

**–** _good to stretch the back side of your legs and your lower back muscles._

1.  _With your legs fully straight, reach for your toes._
2.  _When you can reach your toes, try to put the palms  
    of your hands on the ground, pulling your forehead towards your shins._

## Pancake

**–** _good to stretch muscles in your lower back and the hip extendors. Recommended to do when you’re lifting a lot. Maybe not directly after a lifting session, because the muscles are already under a lot of tension._

1.  _Spread your legs as wide as you can and keep them straight._
2.  _Pull your upper body forward, reaching for the ground between your legs (and beyond)._
3.  _Try to roll your hips forward to reach even further._

## Butterfly

**–** _open the hips, stretch the inside of your upper leg, good after every leg workout._

1.  _With your feet together, pull the heels firmly towards you._
2.  _Maintain an upright position with a straight spine and push  
    _the knees down towards the ground.__

**You might be wondering “why so many movements for the hips”. We all sit too much. This causes our hips to lose flexibility over time. If you gain more flexibility in your hips, you will become a better runner, be able to perform burpees, squats, jumps and so many more exercises a lot easier and faster.**

**Dedicate 10 minutes of every workout to flexibility and with every workout your flexibility will improve. Better posture. Better form. Better movements. Better performance.**",null,undefined
2020-06-13T13:00:17.000Z,null,false,[],note,glvrdru_27,glvrdru,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_6.jpg)
Лучшая книга про бизнес в России — это, конечно же, «Бизнес без MBA», которую я редактировал, а писали эксперты бизнес-подразделения Тинькофф-банка. Бестселлер, входит в топ-100 бизнес-книг «Озона». Покупайте настоящее: https://www.ozon.ru/context/detail/id/149249149/
",null,2020-06-13T13:58:10.089Z
2014-10-16T12:45:09.000Z,https://www.vitsoe.com/gb/about/good-design,false,"[""best""]",article,Ten principles for good design,null,pocket,null,"# Good design

[vitsoe.com](http://vitsoe.com)

Here at Vitsœ we stand for the inordinate power of good design in everything we do: designing thoughtfully, responsibly and intelligently for our company, our furniture and the many people who share a profound interest in all of our tomorrows.

For over 60 years, Vitsœ has worked continuously with Dieter Rams. He still improves his designs to this day and is often cited by a new generation as a key influence on their work that is shaping the 21st century.",null,undefined
2020-01-12T20:57:14.000Z,https://overreacted.io/goodbye-clean-code/,false,"[""best""]",article,"Goodbye, Clean Code",null,pocket,null,"# Goodbye, Clean Code

[overreacted.io](http://overreacted.io) | January 11, 2020

It was a late evening.

My colleague has just checked in the code that they’ve been writing all week. We were working on a graphics editor canvas, and they implemented the ability to resize shapes like rectangles and ovals by dragging small handles at their edges.

The code worked.

But it was repetitive. Each shape (such as a rectangle or an oval) had a different set of handles, and dragging each handle in different directions affected the shape’s position and size in a different way. If the user held Shift, we’d also need to preserve proportions while resizing. There was a bunch of math.

The code looked something like this:

```
let Rectangle = {
  resizeTopLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTopRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};

let Oval = {
  resizeLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTop(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottom(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};

let Header = {
  resizeLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },  
}

let TextBlock = {
  resizeTopLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTopRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};
```

That repetitive math was really bothering me.

It wasn’t _clean_.

Most of the repetition was between similar directions. For example, `Oval.resizeLeft()` had similarities with `Header.resizeLeft()`. This was because they both dealt with dragging the handle on the left side.

The other similarity was between the methods for the same shape. For example, `Oval.resizeLeft()` had similarities with the other `Oval` methods. This was because they all dealt with ovals. There was also some duplication between `Rectangle`, `Header`, and `TextBlock` because text blocks _were_ rectangles.

I had an idea.

We could _remove all duplication_ by grouping the code like this instead:

```
let Directions = {
  top(...) {
    // 5 unique lines of math
  },
  left(...) {
    // 5 unique lines of math
  },
  bottom(...) {
    // 5 unique lines of math
  },
  right(...) {
    // 5 unique lines of math
  },
};

let Shapes = {
  Oval(...) {
    // 5 unique lines of math
  },
  Rectangle(...) {
    // 5 unique lines of math
  },
}
```

and then composing their behaviors:

```
let {top, bottom, left, right} = Directions;

function createHandle(directions) {
  // 20 lines of code
}

let fourCorners = [
  createHandle([top, left]),
  createHandle([top, right]),
  createHandle([bottom, left]),
  createHandle([bottom, right]),
];
let fourSides = [
  createHandle([top]),
  createHandle([left]),
  createHandle([right]),
  createHandle([bottom]),
];
let twoSides = [
  createHandle([left]),
  createHandle([right]),
];

function createBox(shape, handles) {
  // 20 lines of code
}

let Rectangle = createBox(Shapes.Rectangle, fourCorners);
let Oval = createBox(Shapes.Oval, fourSides);
let Header = createBox(Shapes.Rectangle, twoSides);
let TextBox = createBox(Shapes.Rectangle, fourCorners);
```

The code is half the total size, and the duplication is gone completely! So _clean_. If we want to change the behavior for a particular direction or a shape, we could do it in a single place instead of updating methods all over the place.

It was already late at night (I got carried away). I checked in my refactoring to master and went to bed, proud of how I untangled my colleague’s messy code.

## [](https://overreacted.io/goodbye-clean-code/#the-next-morning)The Next Morning

… did not go as expected.

My boss invited me for a one-on-one chat where they politely asked me to revert my change. I was aghast. The old code was a mess, and mine was _clean_!

I begrudgingly complied, but it took me years to see they were right.

## [](https://overreacted.io/goodbye-clean-code/#its-a-phase)It’s a Phase

Obsessing with “clean code” and removing duplication is a phase many of us go through. When we don’t feel confident in our code, it is tempting to attach our sense of self-worth and professional pride to something that can be measured. A set of strict lint rules, a naming schema, a file structure, a lack of duplication.

You can’t automate removing duplication, but it _does_ get easier with practice. You can usually tell whether there’s less or more of it after every change. As a result, removing duplication feels like improving some objective metric about the code. Worse, it messes with people’s sense of identity: _“I’m the kind of person who writes clean code”_. It’s as powerful as any sort of self-deception.

Once we learn how to create [abstractions](https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction), it is tempting to get high on that ability, and pull abstractions out of thin air whenever we see repetitive code. After a few years of coding, we see repetition _everywhere_ — and abstracting is our new superpower. If someone tells us that abstraction is a _virtue_, we’ll eat it. And we’ll start judging other people for not worshipping “cleanliness”.

I see now that my “refactoring” was a disaster in two ways:

*   Firstly, I didn’t talk to the person who wrote it. I rewrote the code and checked it in without their input. Even if it _was_ an improvement (which I don’t believe anymore), this is a terrible way to go about it. A healthy engineering team is constantly _building trust_. Rewriting your teammate’s code without a discussion is a huge blow to your ability to effectively collaborate on a codebase together.
*   Secondly, nothing is free. My code traded the ability to change requirements for reduced duplication, and it was not a good trade. For example, we later needed many special cases and behaviors for different handles on different shapes. My abstraction would have to become several times more convoluted to afford that, whereas with the original “messy” version such changes stayed easy as cake.

Am I saying that you should write “dirty” code? No. I suggest to think deeply about what you mean when you say “clean” or “dirty”. Do you get a feeling of revolt? Righteousness? Beauty? Elegance? How sure are you that you can name the concrete engineering outcomes corresponding to those qualities? How exactly do they affect the way the code is written and [modified](https://overreacted.io/optimized-for-change/)?

I sure didn’t think deeply about any of those things. I thought a lot about how the code _looked_ — but not about how it _evolved_ with a team of squishy humans.

Coding is a journey. Think how far you came from your first line of code to where you are now. I reckon it was a joy to see for the first time how extracting a function or refactoring a class can make convoluted code simple. If you find pride in your craft, it is tempting to pursue cleanliness in code. Do it for a while.

But don’t stop there. Don’t be a clean code zealot. Clean code is not a goal. It’s an attempt to make some sense out of the immense complexity of systems we’re dealing with. It’s a defense mechanism when you’re not yet sure how a change would affect the codebase but you need guidance in a sea of unknowns.

Let clean code guide you. **Then let it go.**",null,undefined
2020-02-19T06:35:47.000Z,https://twitter.com/grayraw/status/1230018123077570561,true,"[""best""]",tweet,grayraw_1230018123077570561,grayraw,twitter,null,"Кстати да, вы вряд ли навалите лайков, но если их тут будет больше 50, напишу, как начинать серфить, на что обращать внимание и почему там все так тяжело
",Дмитро Веселов,undefined
2020-04-12T10:36:52.000Z,https://twitter.com/gruppa_voina/status/1249285347579748353,true,"[""best""]",tweet,gruppa_voina_1249285347579748353,gruppa_voina,twitter,null,"ЛУЧШЕЕ https://t.co/U3h3Q79kFl
![](https://pbs.twimg.com/media/EVZaZjkWkAInz5F.jpg)
",Пётр Верзилов,undefined
2020-06-13T11:03:37.000Z,null,false,[],note,hamosapience_18,hamosapience,telegram,null,"Somw

",Kalentine,2020-06-13T13:57:53.147Z
2020-06-13T11:04:14.000Z,null,false,[],note,hamosapience_19,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_1.jpg)
",Kalentine,2020-06-13T13:57:55.248Z
2020-06-13T11:04:14.000Z,null,false,[],note,hamosapience_20,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_5.png)
",Kalentine,2020-06-13T13:57:57.426Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_21,hamosapience,telegram,null,"https://youtu.be/6ooDM2i4kU0 13:40

",Kalentine,2020-06-13T13:57:58.970Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_22,hamosapience,telegram,null,"Incredible speed of Taylor Crabb
И я тоже могу иметь incredible speed. Надо не потерять, надо работать.

",Kalentine,2020-06-13T13:58:00.758Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_23,hamosapience,telegram,null,"Моя ключевая ошибка заключалась в том, что я пропустил момент, когда от парадигмы ""делайте классные штуки"" мир вокруг меня перешёл к принципу ""делайте голсы"". И что вместо идеи ""классным ребятам нужно давать как можно больше"" пришло ""придумай, как прокатить человека, чтобы он делал ещё больше работы за те же деньги"". 
Я пока не знаю, то ли это неизбежное следствие роста проекта, или просто я теперь на какой-то другой корпоративной ступени – вероятно, оба фактора важны – но результатом этого становится то, что Дзен уже совсем не такое классное место, как было раньше. И я вижу, что к людям здесь относятся теперь по-другому.

",Kalentine,2020-06-13T13:58:02.934Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_24,hamosapience,telegram,null,"Самый богатый человек в Вавилоне

",Kalentine,2020-06-13T13:58:04.770Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_25,hamosapience,telegram,null,"https://twitter.com/A_Kapustin/status/1218168281955282944

",Kalentine,2020-06-13T13:58:06.313Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_26,hamosapience,telegram,null,"- Тамифлю 1 в день
- 2 пшика в каждую ноздрю 3 раза в день

",Kalentine,2020-06-13T13:58:07.957Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_28,hamosapience,telegram,null,"A 0
V 43

",Kalentine,2020-06-13T14:12:53.355Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_29,hamosapience,telegram,null,"Заказ nespresso 10833576/75040026347 получите: Раменское Гурьева 7 Ростелеком пн-вс 10-17 Хранение до 10.06 Пин-код: 3333

",Kalentine,2020-06-13T14:12:55.236Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_30,hamosapience,telegram,null,"Существовавшая ранее практика, когда, выяснив, что у водителя нет при себе прав, инспектор мог отстранить его от управления автомобилем и поместить машину на штрафстоянку, сейчас не актуальна. Об этом говорит часть 1 статьи 27.13 КоАП РФ: «в целях пресечения нарушений правил эксплуатации, использования транспортного средства и управления транспортным средством соответствующего вида, предусмотренных <…> частью 1 статьи 12.3 <…> применяются задержание транспортного средства <...> и хранение на специализированной стоянке до устранения причины задержания». Но часть 1 – это управление автомобилем без регистрационных документов, а управление автомобилем без ВУ относится к части 2, на которую не распространяется действие статьи 27.13. То есть, отправить автомобиль на штрафстоянку, если у вас нет при себе прав, инспектор не может.

",Kalentine,2020-06-13T14:12:59.057Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_32,hamosapience,telegram,null,"Tools of Titans

",Kalentine,2020-06-13T14:13:03.686Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_33,hamosapience,telegram,null,"The power of now

",Kalentine,2020-06-13T14:13:05.681Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_34,hamosapience,telegram,null,"https://www.youtube.com/watch?v=Ljso2xru-0U&feature=share 48:38

",Kalentine,2020-06-13T14:13:08.062Z
2020-06-13T13:00:17.000Z,null,false,[],note,hamosapience_35,hamosapience,telegram,null,"Я не так устаю, чтобы пить по вечерам

",Kalentine,2020-06-13T14:13:10.180Z
2020-06-13T14:07:34.000Z,null,false,[],note,hamosapience_36,hamosapience,telegram,null,"Test

",Kalentine,2020-06-13T14:12:57.233Z
2020-06-13T14:09:15.000Z,null,false,[],note,hamosapience_37,hamosapience,telegram,null,"asdfasdf

",Kalentine,2020-06-13T14:09:46.445Z
2020-06-13T14:10:10.000Z,null,false,[],note,hamosapience_38,hamosapience,telegram,null,"asa

",Kalentine,2020-06-13T14:10:11.453Z
2020-06-13T14:12:22.000Z,null,false,[],note,hamosapience_39,hamosapience,telegram,null,"a

",Kalentine,2020-06-13T14:12:23.574Z
2020-06-13T14:12:44.000Z,null,false,[],note,hamosapience_40,hamosapience,telegram,null,"Testing the trigger

",Kalentine,2020-06-13T14:13:12.000Z
2020-06-13T14:14:13.000Z,null,false,[],note,hamosapience_41,hamosapience,telegram,null,"Testing 2

",Kalentine,2020-06-13T14:14:14.571Z
2020-06-13T14:16:33.000Z,null,false,[],note,hamosapience_42,hamosapience,telegram,null,"https://youtu.be/w7BaTEkkIew

",Kalentine,2020-06-13T14:16:34.650Z
2020-06-13T14:16:33.000Z,null,false,[],note,hamosapience_43,hamosapience,telegram,null,"16 секунда

",Kalentine,2020-06-13T14:16:36.596Z
2020-06-13T15:36:24.000Z,null,false,[],note,hamosapience_45,hamosapience,telegram,null,"Test 2

",Kalentine,2020-06-13T15:36:25.200Z
2020-06-13T17:05:17.000Z,null,false,[],note,hamosapience_46,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_8.jpg)
",Kalentine,2020-06-13T17:05:19.320Z
2020-06-13T17:07:21.000Z,null,false,[],note,hamosapience_47,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_9.jpg)
",Kalentine,2020-06-13T17:07:22.437Z
2020-06-13T17:08:15.000Z,null,false,[],note,hamosapience_48,hamosapience,telegram,null,null,Kalentine,2020-06-13T17:08:16.307Z
2020-06-13T17:10:22.000Z,null,false,[],note,hamosapience_49,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_10.jpg)
",Kalentine,2020-06-13T17:10:24.196Z
2020-06-13T17:11:02.000Z,null,false,[],note,hamosapience_50,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_11.jpg)
",Kalentine,2020-06-13T17:11:03.947Z
2020-06-13T17:11:20.000Z,null,false,[],note,hamosapience_51,hamosapience,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_11.jpg)
",Kalentine,2020-06-13T17:11:22.056Z
2018-12-08T21:03:24.000Z,https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339,false,"[""rxjs"",""best""]",article,Hot vs Cold Observables,null,pocket,null,"# Hot vs Cold Observables

by [Ben Lesh](https://medium.com/@benlesh), [medium.com](http://medium.com)  
October 11, 2017 11:54 AM

# Hot vs Cold Observables

## TL;DR: You want a HOT observable when you don’t want to create your producer over and over again.

## COLD is when your observable creates the producer

// COLD  
var cold = new Observable((observer) => {  
  var producer = new Producer();  
  // have observer listen to producer here  
});

## HOT is when your observable closes over the producer

// HOT  
var producer = new Producer();  
var hot = new Observable((observer) => {  
  // have observer listen to producer here  
});

# Getting deeper into what’s going on…

My last article about [Learning Observable By Building Observable](https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87) was mostly to illustrate that observables are just functions. The goal there was to demystify observables themselves, but it doesn’t really dive into one of the issues that seem to confuse people the most about observables: The notion of “hot” vs “cold”.

## Observables are just functions!

Observables are functions that tie an observer to a producer. That’s it. They don’t necessarily set up the producer, they just set up an observer to listen to the producer, and generally return a teardown mechanism to remove that listener. The act of subscription is the act of “calling” the observable like a function, and passing it an observer.

## What’s a “Producer”?

A producer is the source of values for your observable. It could be a web socket, it could be DOM events, it could be an iterator, or something looping over an array. Basically, it’s anything you’re using to get values and pass them to \`observer.next(value)\`.

# Cold Observables: Producers created \*inside\*

An observable is “cold” if its underlying producer is **created and activated** during subscription. This means, that if observables are functions, then the producer is created and activated by _calling that function._

1.  creates the producer
2.  activates the producer
3.  starts listening to the producer
4.  unicast

The example below is “cold” because it creates and listens to the WebSocket _inside_ of the subscriber function that is called when you subscribe to the Observable:

const source = new Observable((observer) => {  
  const socket = new WebSocket('ws://someurl');  
  socket.addEventListener('message', (e) => observer.next(e));  
  return () => socket.close();  
});

So anything that subscribes to \`source\` above, will get its own WebSocket instance, and when it unsubscribes, it will \`close()\` that socket. This means that our source is really only ever unicast, because the producer can only send to one observer. [Here is a basic JSBin illustrating the idea.](http://jsbin.com/wabuguy/1/edit?js,output)

# Hot Observables: Producers created \*outside\*

An observable is “hot” if its underlying producer is either created or activated outside of subscription.¹

1.  shares a reference to a producer
2.  starts listening to the producer
3.  multicast (usually²)

If we were to take our example above and move the creation of the WebSocket _outside_ of our observable it would become “hot”:

const socket = new WebSocket('ws://someurl');const source = new Observable((observer) => {  
  socket.addEventListener('message', (e) => observer.next(e));  
});

Now anything that subscribes to \`source\` will share the same WebSocket instance. It will effectively multicast to all subscribers now. But we have a little problem: We’re no longer carrying the logic to teardown the socket with our observable. That means that things like errors and completions, as well as unsubscribe, will no longer close the socket for us. So what we really want is to make our “cold” observable “hot”. [Here is a JSBin showing this basic concept.](http://jsbin.com/godawic/edit?js,output)

## Why Make A “Hot” Observable?

From the first example above showing a cold observable, you can see that there might be some problems with having all cold observables all the time. For one thing, if you’re subscribing to an observable more than once that is creating some scarce resource, like a web socket connection, you don’t want to create that web socket connection over and over. It’s actually really easy to create more than one subscription to an observable without realizing it too. Let’s say you want to filter all of the “odd” and “even” values out of your web socket subscription. You’ll end up creating two subscriptions in the following scenario:

source.filter(x => x % 2 === 0)  
  .subscribe(x => console.log('even', x));source.filter(x => x % 2 === 1)  
  .subscribe(x => console.log('odd', x));

# Rx Subjects

Before we can make our “cold” observable “hot”, we need to introduce a new type: The Rx Subject. It has a few properties:

1.  It’s an observable. It’s shaped like an observable, and has all the same operators.
2.  It’s an observer. It duck-types as an observer. When subscribed to as an observable, will emit any value you “next” into it as an observer.
3.  It multicasts. All observers passed to it via \`subscribe()\` are added to an internal observers list.
4.  When it’s done, it’s done. Subjects cannot be reused after they’re unsubscribed, completed or errored.
5.  It passes values through itself. To restate #2, really. If you \`next\` a value into it, it will come out of the observable side of itself.

An Rx Subject is called a “subject” for item #3 above. “Subjects” in the Gang of Four Observer-Pattern are classes with an \`addObserver\` method, generally. In this case, our \`addObserver\` method is \`subscribe\`. [Here is a JSBin showing the basic behavior of an Rx Subject.](http://jsbin.com/muziva/1/edit?js,output)

# Making A Cold Observable Hot

Armed with our Rx Subject above, we can use a bit of functional programming to make any “cold” observable “hot”:

function makeHot(cold) {  
  const subject = new Subject();  
  cold.subscribe(subject);  
  return new Observable((observer) => subject.subscribe(observer));  
}

Our new \`makeHot\` method will take any cold observable and make it hot by creating a subject that is shared by the resulting observable. [Here’s a JSBin of this in action.](http://jsbin.com/ketodu/1/edit?js,output)

We still have a little problem, though, we’re not tracking our subscription to source, so how can we tear it down when we want to? We can add some reference counting to it to solve that:

function makeHotRefCounted(cold) {  
  const subject = new Subject();  
  const mainSub = cold.subscribe(subject);  
  let refs = 0;  
  return new Observable((observer) => {  
    refs++;  
    let sub = subject.subscribe(observer);  
    return () => {  
      refs--;  
      if (refs === 0) mainSub.unsubscribe();  
      sub.unsubscribe();  
    };  
  });  
}

Now we have an observable that is hot, and when all subscriptions to it are ended, the \`refs\` we’re using to do reference counting will hit zero, and we’ll unsubscribe from our cold source observable. [Here is a JSBin demonstrating this in action](http://jsbin.com/lubata/1/edit?js,output).

# In RxJS, Use \`publish()\` or \`share()\`

You probably shouldn’t use any of the \`makeHot\` functions above, and instead should use operators like \`publish()\` and \`share()\`. There are a lot of ways and means to make a cold observable hot, and in Rx there are efficient and concise ways to perform each of those things. One could write an entire article just on the various operators used for this in Rx, but that wasn’t the goal here. The goal was to solidify the idea of what “hot” and “cold” really mean.

In RxJS 5, the operator \`share()\` makes a hot, refCounted observable that can be retried on failure, or repeated on success. Because subjects cannot be reused once they’ve errored, completed or otherwise unsubscribed, the \`share()\` operator will recycle dead subjects to enable resubscription to the resulting observable.

[Here is a JSBin demonstrating using \`share()\` to make a source hot in RxJS 5, and showing that it can be retried.](http://jsbin.com/mexuma/1/edit?js,output)

# The “Warm” Observable

Given everything stated above, one might be able to see how an Observable, being that it’s _just a function_, could actually be both “hot” and “cold”. Perhaps it observes two producers? One it creates and one it closes over? That’s probably bad juju, but there are rare cases where it might be necessary. A multiplexed web socket for example, must share a socket, but send its own subscription and filter out a data stream.

# “Hot” And “Cold” Are All About The Producer

If you’re closing over a shared reference to a producer in your observable, it’s “hot”, if you’re creating a new producer in your observable, it’s “cold”. If you’re doing both…. what are you doing? It’s “warm” I guess.

## NOTES

¹ (NOTE: It’s sort of weird to say the producer is “activated” inside the subscription, but not “created” until some later point, but with proxies, that could be possible.) Usually “hot” observables have their producers both created and activated outside of the subscription.

² Hot observables are usually multicast, but they could be listening to a producer that only supports one listener at a time. The grounds for calling it “multicast” at that point are a little fuzzy.

**Want to learn more? I run RxJS workshops at** [**RxWorkshop.com**](http://rxworkshop.com)**!**",null,undefined
2020-04-08T13:46:07.000Z,https://twitter.com/huliotebenado/status/1247883426092298243,true,"[""best""]",tweet,huliotebenado_1247883426092298243,huliotebenado,twitter,null,"— Вы к какому специалисту?
— Орнитолог-гинеколог
— А что с вами?
— У меня кукуха по пизде пошла
",Илья Харитонов,undefined
2020-04-02T12:47:11.000Z,https://twitter.com/iamvasabi/status/1245694267001049090,true,"[""best""]",tweet,iamvasabi_1245694267001049090,iamvasabi,twitter,null,"Очень интересно происхождение этой фамилии https://t.co/P9oCoSZHcl
![](https://pbs.twimg.com/media/EUmYVFhWkAAst_V.jpg)
",Василий Сабиров,undefined
2020-05-06T10:33:18.000Z,https://twitter.com/igrekde/status/1257981761163792384,true,"[""best""]",tweet,igrekde_1257981761163792384,igrekde,twitter,null,"На Podlodka Crew я проводил показательное собеседование тимлида. Взял участника сообщества, свой стандартный список вопросов и кейсов, и 1.5 часа в прямом эфире их разбирал, давая в процессе обратную связь и озвучивая свои выводы. 
Короче, тред про то, как я собеседую тимлидов.
",Egor Tolstoy,undefined
2020-05-25T13:19:45.000Z,https://twitter.com/igrekde/status/1264909018428059650,true,"[""best""]",tweet,igrekde_1264909018428059650,igrekde,twitter,null,"Демотивация команды – тонкое оружие в руках тимлида, ловца душ человеческих. В этом треде разберемся, как это делать правильно!

За каждый ретвит по совету, как всегда
",Egor Tolstoy,undefined
2020-02-14T09:53:32.000Z,https://twitter.com/ImperatorOfPuns/status/1228255948512387072,true,"[""best""]",tweet,ImperatorOfPuns_1228255948512387072,ImperatorOfPuns,twitter,null,"суууууука https://t.co/lRIzrGQK2e
![](https://pbs.twimg.com/media/EQukRWCXkAAL206.jpg)
",The Most Antibacterial of Clan Rats Kolya,undefined
2020-02-25T07:44:16.000Z,https://twitter.com/JACKASSVOL2/status/1232209682011262979,true,"[""best""]",tweet,JACKASSVOL2_1232209682011262979,JACKASSVOL2,twitter,null,"BRUH https://t.co/xdCXgDpT2M
![](https://pbs.twimg.com/media/ERmwKr2U0AAHTYq.jpg)
",kiers,undefined
2020-03-25T10:59:08.000Z,https://twitter.com/Jacklouisfox/status/1242767970071457792,true,"[""best""]",tweet,Jacklouisfox_1242767970071457792,Jacklouisfox,twitter,null,"The best thing you will see all day.  https://t.co/N2duQmNup5
![](https://pbs.twimg.com/ext_tw_video_thumb/1242554267115884544/pu/img/rQeUXwQn8SgDc_mf.jpg)
",Jack Fox,undefined
2015-11-16T11:43:34.000Z,https://developer.chrome.com/devtools/docs/javascript-memory-profiling,false,"[""best""]",article,JavaScript Memory Profiling - Google Chrome,null,pocket,null,"# Fix Memory Problems

by Kayce Basques, [developers.google.com](http://developers.google.com)  
February 12, 2019

Learn how to use Chrome and DevTools to find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.

*   Find out how much memory your page is currently using with the Chrome Task Manager.
*   Visualize memory usage over time with Timeline recordings.
*   Identify detached DOM trees (a common cause of memory leaks) with Heap Snapshots.
*   Find out when new memory is being allocated in your JS heap with Allocation Timeline recordings.

## Overview

In the spirit of the [RAIL](https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail) performance model, the focus of your performance efforts should be your users.

Memory issues are important because they are often perceivable by users. Users can perceive memory issues in the following ways:

*   **A page's performance gets progressively worse over time.** This is possibly a symptom of a memory leak. A memory leak is when a bug in the page causes the page to progressively use more and more memory over time.
*   **A page's performance is consistently bad.** This is possibly a symptom of memory bloat. Memory bloat is when a page uses more memory than is necessary for optimal page speed.
*   **A page's performance is delayed or appears to pause frequently.** This is possibly a symptom of frequent garbage collections. Garbage collection is when the browser reclaims memory. The browser decides when this happens. During collections, all script execution is paused. So if the browser is garbage collecting a lot, script execution is going to get paused a lot.

### Memory bloat: how much is ""too much""?

A memory leak is easy to define. If a site is progressively using more and more memory, then you've got a leak. But memory bloat is a bit harder to pin down. What qualifies as ""using too much memory""?

There are no hard numbers here, because different devices and browsers have different capabilities. The same page that runs smoothly on a high-end smartphone might crash on a low-end smartphone.

The key here is to use the RAIL model and focus on your users. Find out what devices are popular with your users, and then test out your page on those devices. If the experience is consistently bad, the page may be exceeding the memory capabilities of those devices.

## Monitor memory use in realtime with the Chrome Task Manager

Use the Chrome Task Manager as a starting point to your memory issue investigation. The Task Manager is a realtime monitor that tells you how much memory a page is currently using.

1.  Press Shift+Esc or go to the Chrome main menu and select **More tools** > **Task manager** to open the Task Manager.
    
2.  Right-click on the table header of the Task Manager and enable **JavaScript memory**.
    

These two columns tell you different things about how your page is using memory:

*   The **Memory** column represents native memory. DOM nodes are stored in native memory. If this value is increasing, DOM nodes are getting created.
*   The **JavaScript Memory** column represents the JS heap. This column contains two values. The value you're interested in is the live number (the number in parentheses). The live number represents how much memory the reachable objects on your page are using. If this number is increasing, either new objects are being created, or the existing objects are growing.

## Visualize memory leaks with Timeline recordings

You can also use the Timeline panel as another starting point in your investigation. The Timeline panel helps you visualize a page's memory use over time.

Tip: It's a good practice to start and end your recording with a forced garbage collection. Click the **collect garbage** button (

) while recording to force garbage collection.

To demonstrate Timeline memory recordings, consider the code below:

```
var x = [];

function grow() {
  for (var i = 0; i < 10000; i++) {
    document.body.appendChild(document.createElement('div'));
  }
  x.push(new Array(1000000).join('x'));
}

document.getElementById('grow').addEventListener('click', grow);

```

Every time that the button referenced in the code is pressed, ten thousand `div` nodes are appended to the document body, and a string of one million `x` characters is pushed onto the `x` array. Running this code produces a Timeline recording like the following screenshot:

First, an explanation of the user interface. The **HEAP** graph in the **Overview** pane (below **NET**) represents the JS heap. Below the **Overview** pane is the **Counter** pane. Here you can see memory usage broken down by JS heap (same as **HEAP** graph in the **Overview** pane), documents, DOM nodes, listeners, and GPU memory. Disabling a checkbox hides it from the graph.

Now, an analysis of the code compared with the screenshot. If you look at the node counter (the green graph) you can see that it matches up cleanly with the code. The node count increases in discrete steps. You can presume that each increase in the node count is a call to `grow()`. The JS heap graph (the blue graph) is not as straightforward. In keeping with best practices, the first dip is actually a forced garbage collection (achieved by pressing the **collect garbage** button). As the recording progresses you can see that the JS heap size spikes. This is natural and expected: the JavaScript code is creating the DOM nodes on every button click and doing a lot of work when it creates the string of one million characters. The key thing here is the fact that the JS heap ends higher than it began (the ""beginning"" here being the point after the forced garbage collection). In the real world, if you saw this pattern of increasing JS heap size or node size, it would potentially mean a memory leak.

## Discover detached DOM tree memory leaks with Heap Snapshots

A DOM node can only be garbage collected when there are no references to it from either the page's DOM tree or JavaScript code. A node is said to be ""detached"" when it's removed from the DOM tree but some JavaScript still references it. Detached DOM nodes are a common cause of memory leaks. This section teaches you how to use DevTools' heap profilers to identify detached nodes.

Here's a simple example of detached DOM nodes.

```
var detachedNodes;

function create() {
  var ul = document.createElement('ul');
  for (var i = 0; i < 10; i++) {
    var li = document.createElement('li');
    ul.appendChild(li);
  }
  detachedNodes = ul;
}

document.getElementById('create').addEventListener('click', create);

```

Clicking the button referenced in the code creates a `ul` node with ten `li` children. These nodes are referenced by the code but do not exist in the DOM tree, so they're detached.

Heap snapshots are one way to identify detached nodes. As the name implies, heap snapshots show you how memory is distributed among your page's JS objects and DOM nodes at the point of time of the snapshot.

To create a snapshot, open DevTools and go to the **Profiles** panel, select the **Take Heap Snapshot** radio button, and then press the **Take Snapshot** button.

The snapshot may take some time to process and load. Once it's finished, select it from the lefthand panel (named **HEAP SNAPSHOTS**).

Type `Detached` in the **Class filter** textbox to search for detached DOM trees.

Expand the carats to investigate a detached tree.

Nodes highlighted yellow have direct references to them from the JavaScript code. Nodes highlighted red do not have direct references. They are only alive because they are part of the yellow node's tree. In general, you want to focus on the yellow nodes. Fix your code so that the yellow node isn't alive for longer than it needs to be, and you also get rid of the red nodes that are part of the yellow node's tree.

Click on a yellow node to investigate it further. In the **Objects** pane you can see more information about the code that's referencing it. For example, in the screenshot below you can see that the `detachedTree` variable is referencing the node. To fix this particular memory leak, you would study the code that uses `detachedTree` and ensure that it removes its reference to the node when it's no longer needed.

## Identify JS heap memory leaks with Allocation Timelines

The Allocation Timeline is another tool that can help you track down memory leaks in your JS heap.

To demonstrate the Allocation Timeline consider the following code:

```
var x = [];

function grow() {
  x.push(new Array(1000000).join('x'));
}

document.getElementById('grow').addEventListener('click', grow);

```

Every time that the button referenced in the code is pushed, a string of one million characters is added to the `x` array.

To record an Allocation Timeline, open DevTools, go to the **Profiles** panel, select the **Record Allocation Timeline** radio button, press the **Start** button, perform the action that you suspect is causing the memory leak, and then press the **stop recording** button (

) when you're done.

As you're recording, notice if any blue bars show up on the Allocation Timeline, like in the screenshot below.

Those blue bars represent new memory allocations. Those new memory allocations are your candidates for memory leaks. You can zoom on a bar to filter the **Constructor** pane to only show objects that were allocated during the specified timeframe.

Expand the object and click on its value to view more details about it in the **Object** pane. For example, in the screenshot below, by viewing the details of the object that was newly allocated, you'd be able to see that it was allocated to the `x` variable in the `Window` scope.

## Investigate memory allocation by function

Use the **Record Allocation Profiler** type to view memory allocation by JavaScript function.

1.  Select the **Record Allocation Profiler** radio button. If there is a worker on the page, you can select that as the profiling target using the dropdown menu next to the **Start** button.
2.  Press the **Start** button.
3.  Perform the actions on the page which you want to investigate.
4.  Press the **Stop** button when you have finished all of your actions.

DevTools shows you a breakdown of memory allocation by function. The default view is **Heavy (Bottom Up)**, which displays the functions that allocated the most memory at the top.

## Spot frequent garbage collections

If your page appears to pause frequently, then you may have garbage collection issues.

You can use either the Chrome Task Manager or Timeline memory recordings to spot frequent garbage collections. In the Task Manager, frequently rising and falling **Memory** or **JavaScript Memory** values represent frequent garbage collections. In Timeline recordings, frequently rising and falling JS heap or node count graphs indicate frequent garbage collections.

Once you've identified the problem, you can use an Allocation Timeline recording to find out where memory is being allocated and which functions are causing the allocations.",null,undefined
2020-04-22T19:42:19.000Z,https://twitter.com/Katamarinaki/status/1253046495672176650,true,"[""best""]",tweet,Katamarinaki_1253046495672176650,Katamarinaki,twitter,null,"На весь свой код ВСЕГДА ставлю специальную вотермарку // TO DO
",Белоконь,undefined
2020-02-29T19:48:35.000Z,https://twitter.com/kliment11/status/1233841513379090433,true,"[""best""]",tweet,kliment11_1233841513379090433,kliment11,twitter,https://twitter.com/72864162/status/1233796129919307776,"@A_Kapustin Лучшая соцсеть https://t.co/ryGR1DAN0e
![](https://pbs.twimg.com/media/ER98UBTW4AAF7BI.jpg)
",Микроскопический исследователь Левенчук 🔬,undefined
2020-04-21T07:16:49.000Z,https://twitter.com/kocizum/status/1252496494487392257,true,"[""best""]",tweet,kocizum_1252496494487392257,kocizum,twitter,null,"https://t.co/3GkbK2Wg6D
![](https://pbs.twimg.com/ext_tw_video_thumb/1252496473029316608/pu/img/YylzjizYaUVENCqC.jpg)
",эчпочмак и комбикорм,undefined
2020-03-20T11:34:53.000Z,https://twitter.com/kodfgofo/status/1240965029438140427,true,"[""best""]",tweet,kodfgofo_1240965029438140427,kodfgofo,twitter,null,"https://t.co/K2SRaylvhI
![](https://pbs.twimg.com/media/ETjLHFOXQAEqpNw.jpg)
",путин введи войска,undefined
2020-02-11T18:56:54.000Z,https://twitter.com/kokosolapiy/status/1227305526314373122,true,"[""best""]",tweet,kokosolapiy_1227305526314373122,kokosolapiy,twitter,null,"Вам с собой или деус вульт? https://t.co/5Ir83B6P6y
![](https://pbs.twimg.com/media/EQhD3nEWkAExYWF.jpg)
",мишгансдр BRIDGES,undefined
2020-05-24T09:24:29.000Z,https://twitter.com/kovchiy/status/1264487421892276224,true,"[""best""]",tweet,kovchiy_1264487421892276224,kovchiy,twitter,null,"В редакцию продолжают поступать вопросы: как архитекторам справляться с быстрорастущей сложностью продукта?

Ранее здесь нас посещало откровение: настоящий ответ является опытом, который нельзя перенять, но можно пережить. Перенять можно, в лучшем случае, инструкцию к переживанию
",Danil Kovchiy,undefined
2020-05-24T13:14:25.000Z,https://twitter.com/kovchiy/status/1264545286212538369,true,"[""best""]",tweet,kovchiy_1264545286212538369,kovchiy,twitter,https://twitter.com/3065692676/status/1264498807720611841,"@jordanslon Еще один частый вопрос. Здесь может помочь упражнение:

1. Делать проект Х.

2. Одновременно делать несвязанный проект Y.

3. В перерывах читать, например, лекции Щедровицкого.

4. Чередовать, например, с Суммой технологий Лема.

Если будет легко: добавить Лотмана.
",Danil Kovchiy,undefined
2020-06-09T21:30:02.000Z,https://twitter.com/kovchiy/status/1270468220735143938,true,"[""best""]",tweet,kovchiy_1270468220735143938,kovchiy,twitter,https://twitter.com/227331487/status/1270468218969341959,"Но если включить свет:
— Управление ожиданиями еще до обучения.
— Комплиментарные графика, тексты и звуки.
— Адаптация и расширение без накопления противоречий.
— Минимум споров про вкус фломастеров.
— Гибкие темы: взрослая-детская, эконом-премиум, новичок-профессионал.
",Danil Kovchiy,undefined
2020-06-12T21:53:55.000Z,https://twitter.com/kovchiy/status/1271561392525586433,true,"[""best""]",tweet,kovchiy_1271561392525586433,kovchiy,twitter,null,"Рахим рассказывает про Lisp. 

Нашел там очень много откровений, но обращу особое внимание на мотивацию и взаимодействие авторов Маккарти и Рассела.

Мне повезло с несколькими людьми пройти через этот опыт — оглядываясь, не находишь ничего ценнее

https://t.co/nOPXjdCgDL
",Danil Kovchiy,undefined
2020-02-20T21:11:32.000Z,https://twitter.com/krlsrg/status/1230600897669062656,true,"[""best""]",tweet,krlsrg_1230600897669062656,krlsrg,twitter,null,"https://t.co/N6UX0DqCj6
![](https://pbs.twimg.com/tweet_video_thumb/ERP49flXYBYnX7l.jpg)
",Sergey Korol,undefined
2020-02-22T12:05:19.000Z,https://twitter.com/krlsrg/status/1231188216952348673,true,"[""best""]",tweet,krlsrg_1231188216952348673,krlsrg,twitter,https://twitter.com/72864162/status/1231187915889401857,"@A_Kapustin Клевое имя для собаки. Погода сегодня какая-то хмурая. Погода поднасрала.
",Sergey Korol,undefined
2020-03-11T20:35:47.000Z,https://twitter.com/krlsrg/status/1237839659410939905,true,"[""best""]",tweet,krlsrg_1237839659410939905,krlsrg,twitter,null,"Владимир Малаховский. https://t.co/JQISlp7qJB
![](https://pbs.twimg.com/media/ES2wkjJUEAAe3mA.jpg)
![](https://pbs.twimg.com/media/ES2wknSUcAEpClc.jpg)
![](https://pbs.twimg.com/media/ES2wkuoU0AAgg9b.jpg)
![](https://pbs.twimg.com/media/ES2wkyoU8AYgcN9.jpg)
",Sergey Korol,undefined
2020-04-02T17:29:39.000Z,https://twitter.com/krlsrg/status/1245765352547590152,true,"[""best""]",tweet,krlsrg_1245765352547590152,krlsrg,twitter,null,"Таджасские оливки — самые вкусные из оливок. Крепкие, мясистые, очень насыщенные, основа лигурийской кухни. Если вы попробуете их, потом будете морщить нос от каламата и «просто оливок из банки». https://t.co/UdFMVRYhuu
![](https://pbs.twimg.com/media/EUnY-cfX0AA8QID.jpg)
",Sergey Korol,undefined
2020-04-15T13:54:09.000Z,https://twitter.com/krlsrg/status/1250422159400300544,true,"[""best""]",tweet,krlsrg_1250422159400300544,krlsrg,twitter,null,"Фелиза Пренинг. https://t.co/xsmwff5eZ6
![](https://pbs.twimg.com/media/EVpkTB5UUAApYVM.jpg)
![](https://pbs.twimg.com/media/EVpkS6fUYAI1Hjh.jpg)
![](https://pbs.twimg.com/media/EVpkS-MUEAk3QIJ.jpg)
![](https://pbs.twimg.com/media/EVpkS2tUUAEvNg7.jpg)
",Sergey Korol,undefined
2020-05-24T16:08:28.000Z,https://twitter.com/krlsrg/status/1264589088633561091,true,"[""best""]",tweet,krlsrg_1264589088633561091,krlsrg,twitter,null,"https://t.co/0g92jpFhiy
![](https://pbs.twimg.com/media/EYy5DwXXgAAjLQ8.jpg)
![](https://pbs.twimg.com/media/EYy5D1WX0AEnbhc.jpg)
![](https://pbs.twimg.com/media/EYy5Dy2WkAMLKjn.jpg)
![](https://pbs.twimg.com/media/EYy5DsgWoAEjbX0.jpg)
",Sergey Korol,undefined
2020-05-31T18:24:38.000Z,https://twitter.com/krlsrg/status/1267160073190637570,true,"[""best""]",tweet,krlsrg_1267160073190637570,krlsrg,twitter,null,"https://t.co/vfW2Sws3rg
![](https://pbs.twimg.com/media/EZXbWfuWAAUzwXJ.jpg)
![](https://pbs.twimg.com/media/EZXbWnbXsAI1xpj.jpg)
![](https://pbs.twimg.com/media/EZXbWiNWsAAjd1b.jpg)
![](https://pbs.twimg.com/media/EZXbWbqWsAIfnmo.jpg)
",Sergey Korol,undefined
2020-05-02T09:49:56.000Z,https://twitter.com/kyrie_miserere/status/1256521293261873152,true,"[""best""]",tweet,kyrie_miserere_1256521293261873152,kyrie_miserere,twitter,null,"кот дома: маленькая бусинка урчит на руках, спит в кроватке, трётся о ноги, лежит на подушечке

кот на даче: протащил через картофельное поле жирную птицу, залез с ней на ель, оторвал голову крысе, оторвал голову кроту, раздавил мышь, ПОЙМАЛ И ПРИНЁС В ДОМ ЖИРНУЮ ГАДЮКУ
",Sonya Wino,undefined
2020-02-14T20:08:17.000Z,https://twitter.com/l0ldbl00d/status/1228410654488395776,true,"[""best""]",tweet,l0ldbl00d_1228410654488395776,l0ldbl00d,twitter,null,"У меня на встрече выпускников пол-класса хищные птицы https://t.co/XDPpiFbj7P
![](https://pbs.twimg.com/media/EQww-VYXUAE85LK.png)
",Пабло из Кобар,undefined
2020-04-10T07:06:35.000Z,https://twitter.com/l1zzka/status/1248507654294523910,true,"[""best""]",tweet,l1zzka_1248507654294523910,l1zzka,twitter,null,"мой карантин https://t.co/hl9AMgrClp
![](https://pbs.twimg.com/media/EVOXFshUYAACE_f.jpg)
",ли🌈🌈ка,undefined
2020-06-13T13:00:17.000Z,null,false,[],note,leadgr_31,leadgr,telegram,null,"Хорошая статья CTO Dodo Pizza про то, как меняется роль технического руководителя при росте команды в 4-14-40-140 человек.
https://medium.com/@alex4Zero/4-14-40-140-8ac3bc6c1fdd

",null,2020-06-13T14:13:01.683Z
2013-09-11T15:43:06.000Z,http://ia.net/blog/learning-to-see/,false,"[""best""]",article,Learning to See | Information Architects,null,pocket,null,"# Learning to See

by [Oliver Reichenstein](https://twitter.com/reichenstein), [ia.net](http://ia.net)  
March 19, 2013

Learning to design is learning to _see_, an adventure that gets more and more captivating the further you go. _A love letter to my profession._

Our mind is not a camera. Seeing is not a passive act. _We see what we expect to see_, or, as Anaïs Nin put it so beautifully: “We don’t see things as they are, we see them as we are.” The idea that our perception is as much a result of what we are able to know as of what we expect to find is not new. Immanuel Kant’s Critique of Pure Reason is based on this insight:

> Up to now it has been assumed that all our cognition must conform to the objects; but let us once try whether we do not get further by assuming that the objects must conform to our cognition.

In the meantime, cognitive psychology has followed Kant’s “Copernican Revolution-in-reverse”. Our perception is defined by what cognitive psychologists call a “perceptual set”.

> Perceptual set is a tendency to perceive or notice some aspects of the available sensory data and ignore others. Perceptual set works in two ways:  
> 1\. The perceiver has certain expectations and focuses attention on particular aspects of the sensory data  
> 2\. The perceiver knows how to classify, understand and name selected data and what inferences to draw from it. —[Perceptual Set](http://www.simplypsychology.org/perceptual-set.html), by Saul McLeod

The way expectation can influence our cognitive set can be illustrated quite easily:

_Depending on how you read the diagram, you will read the characters in the middle as “13” or “B”._

> The physical stimulus ‘13’ is the same in each case but is perceived differently because of the influence of the context in which it appears. We EXPECT to see a letter in the context of other letters of the alphabet, whereas we EXPECT to see numbers in the context of other numbers. —

The influence of past experience on perception can be demonstrated in the following puzzling experience:

In this case past experience of hearing or reading these common phrases can influence your perception, and make you ignore the errors that seem obvious once you have spotted them. Professional writers will probably notice, but many still have a hard time. If you failed the above test, and now see what you previously didn’t, you will immediately nod in agreement to the following thought:

> We don’t see that we don’t see. —, Maturana & Varela

Our perceptual set can change short-term, for instance when we are hungry our sensitivity to the smell of food is strengthened. The way experience affects long-term perceptual sets can be studied by analyzing the different perceptive sets of professionals that are strongly influenced by what they know.

*   Cooks and sommeliers are able to more clearly discern what they taste because through constant exposure they have improved senses, and also the vocabulary to express and discuss their impressions.
*   When doctors look at X-rays, they see more because they know anatomy and what to look for in the mix of light and shadow. Over the years they have learned to more clearly discern slight differences in shape and shade that to us are indiscernible.
*   When an architect enters a building, they see through the walls, and they understand the building as a four-dimensional space-time continuum.
*   When fashion designers look at your outfit, they don’t simply see stylish clothes, they see cut, seam, material. They imagine how your clothes feel.
*   When I open a web site or an app, I see information architecture, interaction design, typography… and I imagine the conversations between business, design, and technology that lead there.

Just like in the second experiment above, professionals see things that, while they are physically there, not everybody will perceive, unless they are pointed out.

Learning to design is, first of all, learning to see. Designers see more, and more precisely. This is a blessing and a curse—once we have learned to see design, both good and bad, we cannot _un-see_. The downside is that the more you learn to see, the more you lose your “common” eye, the eye you design for. This can be frustrating for us designers when we work for a customer with a bad eye and strong opinions. But this is no justification for designer arrogance or eye-rolling. Part of our job is to make the invisible visible, to clearly express what we see, feel and do. You can’t expect to sell what you can’t explain.

This is why excellent designers do not just develop a sharper eye. They try to keep their ability to see things as a customer would. You need a design eye to design, and a non-designer eye to _feel_ what you designed.

> See with one eye, feel with the other. —_Paul Klee_

Claiming that you can’t see well if you are not a designer might sound condescending, or at least old-fashioned, but this is not a post about designer superiority. Designers are as superior in design as doctors in medicine, or hair dressers in cutting hair. Of course there are good and bad designers, doctors, and hairdressers, and most of us fall somewhere in between.

In reality, “designer” and “not designer” are not split into two separate groups. You can develop an eye for design without ever going to school or even having designed yourself, and you can pick up some serious knowledge about design from design books. There is no doubt that if your perceptual set is comparable to a web designer’s point of view, for example an architect or industrial designer, it will be easier for you to see design in the same way a web designer would.

However, as much as seeing mistakes is always easier than doing things right, you will always see more with practical experience than from passive observation. There is no better training than imitation. When you learn to draw you do not primarily learn to move your hand, first you need to learn to perceive light and shadow as they really are, not what you think they are.

> My approach to the artistic process is to trust my eyes, not my mind. —_Kenn Backhaus_

What applies to Backhaus doesn’t apply to Picasso:

> I paint objects as I think them, not as I see them. —_Picasso_

Genius or mortal, you need to learn to discern what you see and what you think you see before you can paint either reality. The best way to learn to see is copying the masters. That applies to art as well as to any form of design.

By observing great examples of design with your own eyes, attempting to duplicate them with your own hand, you will feel, see, and eventually understand the invisible lines behind a great product at a deeper and deeper level. Some of these lines are more obvious, while others may be so delicate that the very designer that drew them might not consciously realize exactly why and how they happened.

I sometimes hear that once we know how things are made, we can’t create or enjoy them spontaneously anymore. As far as this concerns enjoyment, I completely disagree. For me the more I learn about the many ways of human expression—music, architecture, even sports, the more I enjoy observing the masters at work. How could one not enjoy observing functional beauty and the care for detail?

In the development of design skills, theory _can_ get in the way of practice, but only until the theory becomes practice. With practice your intuition evolves, and the better you understand what you do, the deeper your intuition. Only once you do not consciously think about the theory anymore are you achieving mastery.

## Design vs Taste

Design as functional beauty is an expert’s view on products. However, for non-designers “well designed” tends to mean nothing more than “I like it” or “it looks good to me”. This likability comes from the visual appearance of the object, and is a personal expression of taste—a feeling, not an analysis. Feelings such as “I like it” (or “I have a headache”) are not debatable.

> Good design is when I like it. —_Everybody_

There’s nothing wrong with non-designers talking of “design” in terms only of likability and aesthetics. Indeed, it would be so much easier for everybody if good designs always looked nice and bad designs looked bad! Yet there are many ugly designs that work well. Look at Google, Reddit, Craigslist, or even iOS with a free aesthetic eye and you won’t find much that is formally sublime. But these interfaces work, so they _are_ well designed.

This is because despite the more common use of the word, the technical term “design” is not primarily about appearance, fashion, superficial beauty, or personal taste.

> \[Design\] is not just what it looks like and feels like. Design is how it works. —_Steve Jobs_

We can draw two axes: the layperson’s version from “ugly” to “pretty”, and the designer’s version from “broken” to “works well”. This is not the only way to look at design, but it makes a lot of sense when we talk about user interface design:

There is plenty of good design that is ugly, and of course there’s good design that both works well and looks pretty. But a design that doesn’t work can never be substantially good—ugly and broken is just worthless crap, and pretty and broken is phony or kitsch:

> Was einer möchte und nicht kann, wird Kitsch (Desire lacking ability turns to Kitsch) —_Jan Tschichold_

“No design” in the literal sense is never a good quality of a product. “No design” is the diametrical opposite of “beautiful design”. Taken literally “no design” is, simply put, nothing but shit.

Still, some people use “no design” to mean “not pretty but functional”, which can still be “good design” for a design expert. I’d advise designers to avoid the confusing expression “no design” when you mean “functional design”.

The above chart also shows why I dislike the expression “minimal design”. If you take the expression “minimal design” literally, and just do what is absolutely necessary, you end up in the Bold quadrant.

But you want to be in the Beautiful quadrant. How do you get there? Usually you move from the center to the upper left into Bold. Because first of all you need to make it work. Once you are there, you need to move to the right. How do you get from Bold to Beautiful?

You don’t get there with cosmetics, you get there by taking care of the details, by polishing and refining what you have. This is ultimately a matter of _trained taste_, or what German speakers call [_Fingerspitzengefühl_](https://en.wikipedia.org/wiki/Fingerspitzengef%C3%BChl) (literally, “finger-tip-feeling”).

_I don’t know of a more beautiful illustration of _Fingerspitzengefühl_ than this iconic portrait of the typographer Jan Tschichold._

### Personal taste vs sophistication

As we covered above, the everyday notion of “design” doesn’t say much about design as _functional_ beauty. Personally (dis-)liking a color, form, or image is not a matter of design, it is a question of personal taste. And as we all know, when it comes to personal taste there is not much to talk about there. But in addition to personal taste there is something that we can call “trained taste” or “sophistication”. Let me recapitulate:

*   Whether I like pink or not, sugar in my coffee, red or white wine, these things are a matter of personal taste. These are personal preferences, and both designers and non-designers have them. This is the taste we shouldn’t bother discussing.
*   Whether I set a text’s line height to 100% or 150% is _not_ a matter of taste, it is a matter of knowing the principles of typography.
*   However, whether I set a text’s line height at 150% or 145% is a matter of _Fingerspitzengefühl_; wisdom in craft, or sophistication.

Obviously, beginners in design don’t have the same “finger-tip feeling” as Mr. Tschichold. Also, while your intuition grows with training and experience, your need for conscious control over the design process gets smaller and smaller the better you get at it. It’s like dancing or playing an instrument—the more advanced you are, the less you need to consciously think about it. The less you think about what you do, the more virtuosity you will be able to achieve.

Typography is a great example of this. A well-set book following the principles of typography is easier to read than a sloppy book that doesn’t. The experience of reading becomes measurably easier and thus definitely more pleasurable with good typography. The untrained eye won’t notice the quality of typography, good or bad, as long as we are not comparing extremes.

> If you really hate someone, teach them to recognize bad kerning —_[XKCD](https://xkcd.com/1015/)_

However, we will all enjoy reading a well-set text more, regardless of our typographic expertise. And the more typographic understanding you have, the more you’ll enjoy following the blueprint of a master’s trained taste. The same applies to well architected houses, finely engineered cars, and, to some degree, even to graphic design.

## Form and So On

Now, despite our two axes above, there are many links between visual and functional beauty. From Dieter Rams’ “”:

> **Good design is aesthetic**—The aesthetic quality of a product is integral to its usefulness because products we use every day affect our person and our well-being. But only well-executed objects can be beautiful.

Visual and functional beauty are not completely independent. Why is that?

A designer who is able to find the functional essence of a product will also likely find it in the visual aspects—they are usually interconnected, sometimes almost inevitably so.

Don’t count on an inevitable visual beauty when it comes to products with a heavy engineering aspect, like computers, web sites, or industrial complexes. There the conditions can be harsh, with the materials and standards we have to work with being bereft of much aesthetic refinement. In this kind of environment even a product with merely bold functionality can be perceived as visually pleasing, after you’ve used and understood the necessity of its bold shape.

Functional design is not completely self-evident on the object, it shows itself in use and affects the aesthetic perception. This is even more pronounced with software, where the outside hardly gives any hint how well (or even if) it actually works. However, this doesn’t mean that software needs to be hard to use. On the contrary. Whether we talk about hardware or software, usability is key, because:

> **Good design makes a product useful**—A product is bought to be used. It has to satisfy certain criteria, not only functional, but also psychological and aesthetic. Good design emphasizes the usefulness of a product whilst disregarding anything that could possibly detract from it. —ibid.

Since professional designers focus on functional beauty and hard-to-spot detail, they can call things beautiful that may seem blunt, cold, or overly simple to a non-designer. This might explain why designers and non-designers sometimes come to like different things.

The more knowledge you have about a product’s inner workings, that is, if you can see the construction, the hidden mechanism, and glimpse the process leading to its current state, the easier it becomes to see its design. On the other hand, if the design process becomes too obvious, if the designer leaves too many traces on the product that shout “DESIGN!” without fulfilling its promise, it moves to the lower right quadrant of “kitsch”. Dieter Rams:

> **Good design is unobtrusive**—Products fulfilling a purpose are like tools. They are neither decorative objects nor works of art. Their design should therefore be both neutral and restrained, to leave room for the user’s self-expression. —ibid.

Whether the inner workings show or not is far from a clear, unique distinction between good and bad design. If you shell the core interface though, you are probably moving again into the lower right corner.

> **Good design is honest**—It does not make a product appear more innovative, powerful or valuable than it really is. It does not attempt to manipulate the consumer with promises that cannot be kept. —ibid.

In general, more advanced design is also _less_ visible unless you’re looking for it. The customer doesn’t need to be bothered with the sketching and production of the object in order to use it. What the customer wants to understand is how the product is supposed to be used. There, the designer should aim to be as transparent as possible. (Although there are a few exceptions, as we will see later.)

> **Good design makes a product understandable**—It clarifies the product’s structure. Better still, it can make the product talk. At best, it is self-explanatory. —ibid.

This is why as a rule of thumb advanced design stays largely invisible to the untrained eye. However, while professionals are able to more clearly perceive and understand the logic of the design behind a product, _anyone_ can assess the quality of design through use.

*   You don’t need to see and understand the engineering of a car to know if it’s well designed or not. If it runs well, it’s probably well designed.
*   You don’t need to see how and why your TV works as it does. If you can’t figure out how to use it, it’s crap.
*   You don’t need to know the different layers of web design to find out if a web site works or not. All you need to know if it’s good design is if it works for you.

How well something works is the only obvious criteria of good design. To decide whether an everyday object works for us or not, we don’t need to be experts. We know it when we use it.

Again, this is a rule of thumb. That not everybody can sit down at a piano and play away like Glenn Gould is not the piano’s fault. Your skills need to match the tool you are using to assess its quality—you can’t test-drive a car if you haven’t learned to drive. But everyday objects should only require everyday skills. This is what makes web design so hard.

Obviously, good interface design—and all product design is to some degree interface design—needs to somehow indicate its purpose and use. This is often more a matter of dealing with standards and expectations than of innovation. This makes the first of Dieter Rams’ rules one the hardest:

> **Good design is innovative**—The possibilities for innovation are not, by any means, exhausted. Technological development is always offering new opportunities for innovative design. But innovative design always develops in tandem with innovative technology, and can never be an end in itself. —ibid.

If designers get too adventurous with usability, the result is generally a mishmash of quirky and hidden functions. When I say that good design is invisible, obviously I don’t mean obfuscating the use of a product by hiding the interface. Just like Dieter Rams doesn’t mean that good designers should be lazy when saying that good design is “as little design as possible”. Things that are hard to use by their intended audience are obviously bad design (I’m looking at you, adventurous “designer” faucets).

To make a product’s use obvious without distracting from the regular use is one of the hardest parts of the design job. The solution is almost never in implicit or explicit instructions (I’m looking at you, iPad magazine apps), but of reducing learned interaction patterns into simpler, yet still common patterns.

The art of reduction is not just “cutting things”. The cutting is merely the reduction part. The _art_ of reduction is cutting away what is not essential, and adding detail to what is.

> **Good design is thorough down to the last detail**—Nothing must be arbitrary or left to chance. Care and accuracy in the design process show respect towards the user. —ibid.

Beauty in design is not found by adding prettiness to a bold, functional design, it’s adding detail to the essence, so the functional logic becomes more humane, refined, and clear. As Edward Tufte said: “To clarify, add detail.”

## User Interfaces

Seeing the design of all but the simplest user interfaces is about as hard as seeing the blueprints of a building only by looking at it from the outside. Why? Isn’t the interface just what I see on a screen? Hell no!

The confusion between the common and the expert definitions of “design” goes hand in hand with the general fuzziness we face when dealing with the term “interface”. In everyday language an “interface” is not “the way you accomplish tasks with a product”, but just the functional aspects of a product’s surface—the buttons and controls. When it comes to screen design, people often use the term “interface” to just describe the visible graphic elements on the screen. But the expert’s definition of “interface” is _not_ primarily what you see on the screen.

> The way that you accomplish tasks with a product—what you do and how it responds—that’s the interface —_Jef Raskin_

And again, using “interface” in the sense of only what you see on the screen or the surface of a product is not bad or wrong, it’s just the non-expert use. As interface designers we need to be careful. Our definition of “interface” is, again, not just what you see, but for better or worse how it works.

As I mentioned before, computer user interfaces can look incredibly ugly, yet still be very well designed because most of what we regard as interface is, alas, not visible. And you will not be surprised when I say again that a literal “no interface” is definitely _not_ a good one.

The expressions “less interface”, “hidden interface”, “no UI” etc. are not literal. They are fuzzy rhetorical formulations that mix up the common and the technical definitions. What does this rhetoric aim at?

It targets only the bloated, overblown surface, ignoring the depth of an interface. What do these expressions try to say? They are trying to say the same thing as those who say “less is more”. However, if this translates to “hide how a product works”, or anything else that makes the product harder to use, the interface will become worse. On the other hand, less visual clutter _does_ lead to a more efficient interface. Again, in Dieter Rams’ words:

> **Good design is as little design as possible**—Less, but better—because it concentrates on the essential aspects, and the products are not burdened with non-essentials.  
> Back to purity, back to simplicity. —ibid.

Less visual clutter leads to a more efficient interface. Technically speaking it is not quite clear what “less interface” means when you take that expression out of context.

1.  If by “less interface” you mean “harder to work with”, less interface will lead to a worse interface.
2.  If by “less interface” you mean reducing visual and functional elements to the essence, you will improve the interface.
3.  If by “less interface” you mean “hiding how a product works”, less interface will always lead to a weaker interface.

Discussing “more interface” or “less interface” out of context is prone to misunderstanding. While we have no right to tell people how to speak, as designers we have to communicate clearly. Here again, if in context it is clear what “less interface” means, maybe we should not be too pedantic about it either, and remember that

> The slightest mistake looks incredibly stupid, when others make it. —_Georg Christoph Lichtenberg_

## Conclusion

It is not the hand that makes the designer, it’s the eye. Learning to design is learning to see. Naturally, _what_ designers learn to see as they improve their skills is usually related to design. Doctors don’t see web sites in the same way as web designers, just as web designers don’t see radiographs as doctors do. Our experience sharpens our eyes to certain perceptions and shapes what we expect to see, just as what we expect to see shapes our experience. Our reality is perspectival. Although we don’t perceive and sense things that a more experienced practitioner can, we can learn, and [it’s very exciting and rewarding to do so](https://vimeo.com/45232468 ""Inge Druckrey: Teaching to See"").

The difference between good and great design tends to happen in a sphere that only experienced designers can perceive clearly. Still, most people can feel the difference between good and bad design. As I mentioned above, very few people perceive the delicacies of great typography, and even fewer can set type, but most of us will feel that a well typeset book reads better. This seems like a paradox. But think about it: the aim of design is to facilitate use, and take care of details that are tedious for the inexperienced person. What looks paradoxical from outside is perfectly logical from an inside perspective.

A lot of confusion arises from the fact that there are many ways to use the term “design”. The common definition (a matter of taste) is incommensurable with the professional definition of design as a matter of functional beauty and care for detail. While everybody can sense the design quality of a product through use, no one has authority on matters of taste. Still, and to hammer it in, by learning to design you evolve an eye for design, as well as a more refined taste to discern subtle design details.

Now, if you are a designer and proud of your skills, keep in mind: There are not distinct groups of “designers” and “non-designers”—it’s a continuum. And there is no such thing as the worst or greatest designer, since design requires a lot of different talents that can’t be directly compared. Some have deeper imagination, are better with the purely functional aspects, have more talent in polishing details, have better technical skills, and some will shine with an unbreakable will to ship. It is a long way from novice to pro, but what we all have in common is the trained ability to see what others don’t, to create what others can’t see but only feel.

The same confusion that leads to pedantic fights over what design really is arises when we mix the common definition of “interface” in the sense of “computer graphics” with the more abstract and technical definition that involves how something works, including the physical interaction and the user’s perception. It is possible to say a lot of cool shit about design or interface design by making a mess while meaning the right thing. So before we get into teaching and preaching mode we need to consider the context and try to understand what is meant.

It’s easy to score marketing points by saying “No UI” is better than “a lot of UI”, even though strictly speaking this relies on imprecise language. If by “no UI” you indeed mean that hiding the UI is a great idea, then let’s hope that you are designing child locks. Unless your purpose is to make your UI inaccessible, hiding interfaces is always a bad idea.

As with design in general, user interface design has to be assessed in terms of functionality and care for detail.

A UI that works is not _a priori_ self-evident to everybody. Tools need to work for those who use them. That being said, everyday objects like faucets, hammers, and iPad magazines need to be considerably more self-evident than violins, airplane cockpits, or Magnetic Resonance Imaging machines.

After getting lost in the labyrinth of design and aesthetics, I think that I have found a way out that doesn’t oversimplify or fuel egos, but invites everyone to see more. I suspect there are shorter, easier ways, but I can’t see them… yet. Maybe it needs a non-designer’s perspective from outside to say it all in fewer words.

> When everyone has the same Mac and the same internet, the difference between hackneyed graphic design and extraordinary graphic design is just one thing—the ability to see.  
> Seeing, despite the name, isn’t merely visual. —, by Seth Godin

If you scrolled down to find the article’s essence in a last nutshell paragraph: Designers are not superior creatures that can ignore listening to other, supposedly inferior beings. On the contrary! Without critical feedback and the modesty to accept all opinions on our work as a perfectly valid, different view no matter who, how or what, we lose our freaky key ability, which is not just to see more, but to see more with one eye, and feel with the other.",null,undefined
2020-03-31T11:45:27.000Z,https://twitter.com/LeShann/status/1244953952652689410,true,"[""best""]",tweet,LeShann_1244953952652689410,LeShann,twitter,null,"Pixar just released VC backgrounds, people! https://t.co/mnVKMnx1dI
![](https://pbs.twimg.com/media/EUb3A8JWkAcKYHD.jpg)
![](https://pbs.twimg.com/media/EUb3A8NXkAEElmj.jpg)
![](https://pbs.twimg.com/media/EUb3A8LXgAMsFhz.jpg)
![](https://pbs.twimg.com/media/EUb3A8SXYAAOEJs.jpg)
",Shann Biglione,undefined
2013-09-06T20:25:30.000Z,http://ia.net/blog/logo-bullshit-co-inc/,false,"[""best""]",article,"Logo, Bullshit & Co., Inc. | Information Architects",null,pocket,null,"# Logo, Bullshit & Co., Inc.

by [Oliver Reichenstein](https://twitter.com/reichenstein), [ia.net](http://ia.net)  
September 5, 2013

Everybody likes logos. Everybody wants their own logo. Everybody wants to _make_ their own logo. Everybody has a computer and some fonts. Anybody can make a logo. What makes designers think they are so special?

Anybody can make a logo. No doubt. It’s not complicated. Just try a couple of fonts and colors, choose the one you like, then change the font a little so it becomes special. Make it look nice. Blog about it, showing those magic construction lines[¹](https://ia.net/topics/logo-bullshit-co-inc#fn1). You can do it. All it needs is a little time, a computer, someone that knows how to use Illustrator, and taste, maybe. Everybody has taste, right? So let’s do it! So thought Yahoo’s CEO Marissa Mayer, and she went and did it. How did it turn out?

## The Weekend

For the last month Yahoo has showcased its logo in a different font each day. The motivation was unclear. Did they want feedback in the decision process, or was Yahoo just trying to get attention from the design community? The new logo Yahoo unveiled at the end of this was not better or worse than the previous variations, and it appears it had already been chosen before this began. After unveiling that empty secret, Marissa Mayer wrote a blog post[²](https://ia.net/topics/logo-bullshit-co-inc#fn2) about the process:

> We hadn’t updated our logo in 18 years. Our brand, as represented by the logo, has been valued at as much as ~$10 billion dollars. So, while it was time for a change, it’s not something we could do lightly.

Whether Yahoo needs a change in brand identity is hardly something we can decide from outside, not knowing exactly what the overall brand strategy is. It _seems_ legit, because currently the Yahoo brand feels dead. Yahoo is still a massive online property, but it is as boring as it is big. Changing brand identity when you change strategy makes sense. So, even though it’s misleading to claim that the Yahoo logo hasn’t changed in 18 years[³](https://ia.net/topics/logo-bullshit-co-inc#fn3), the time for a change is up to the CEO.

> On a personal level, I love brands, logos, color, design, and, most of all, Adobe Illustrator. I think it’s one of the most incredible software packages ever made. I’m not a pro, but I know enough to be dangerous 🙂

There is nothing wrong with loving brands or branding as such (I do), logos in general (some do), colors (who doesn’t?) or a particular software program (okay, that’s a little weird). And it’s okay if you are not a pro at everything. But if, as the CEO, you work on a $10 Billion Dollar core brand identity, and you hack it out in a weekend, you are not being professional.

> So, one weekend this summer, I rolled up my sleeves and dove into the trenches with our logo design team: Bob Stohrer, Marc DeBartolomeis, Russ Khaydarov, and our intern Max Ma. We spent the majority of Saturday and Sunday designing the logo from start to finish, and we had a ton of fun weighing every minute detail.

Let us assume that at Yahoo the logo design team (including the intern) is comprised of the best designers in the field. It is conceivable that, with some luck, this dream team can design a logo “from start to finish” over a weekend. It sure is fun “weighing every minute detail” with a team of outstanding professionals. And what is more efficient than working directly with the CEO on the brand identity? A dream setup. Also, it’s cheap. A weekend for a logo, instead of paying a branding agency millions and waiting months for something that can be done in a couple of days? That’s smart business! Is it?

## The Headache

Let’s assume that it is possible to pull all this off with a team of incredibly lucky geniuses. What do these geniuses really need to achieve in a few days that less talented professionals need months for? What is it that makes logo design so special, so expensive? The process. The consistency. The precision. That the logo works. That it has impact. That it represents well. Blablabla, I hear you say, it’s just a typeface and color. Anyone can do it, and a smart, talented designer can do it quickly.

A smart, talented designer like Paula Scher can sketch the logo of a big bank on a napkin during lunch[⁴](https://ia.net/topics/logo-bullshit-co-inc#fn4). But what follows after that sketch is months of putting thought into context. Logo design is not just coming up with a shape and calling it a day. You need to have a clear idea, to give it form, and to make it work with everything else. In other words, it’s hard. The logo is only one part of a 1,000 piece puzzle game, where the picture is constantly changing while you put it together. Pshaw! I hear you say. Just pick a font you like and fiddle with it until it feels right!

Redesigning a logo for a $10 Billion Dollar company that is in deep trouble is not a matter of talented designers and personal preferences for design. It is not about fiddling. Doing it in a weekend is simply unprofessional.

Let us give Mayer the benefit of the doubt. While the logo indeed looks like it was done in a day or two over beers and laughs, maybe that whole weekend thing was actually months of hard work, and she’s just saying it to impress us[⁵](https://ia.net/topics/logo-bullshit-co-inc#fn5). Let’s hope the “done in a weekend” bragging is just bullshit, and get back to the subject:

## The Brand

Branding doesn’t start with the logo. It is not primarily a visual discipline. Your brand is what you stand for. Branding is more about content than shape. It is who you are, not how you look. The shape should represent your inside, your content. _Your brand architecture is your information architecture._

The hard part of rebranding a giant like Yahoo is not how the logo looks. It doesn’t matter so much if some dislike it. A logo is not decorative, it works more like an icon. It needs to be clear. Brands create orientation. The most beautiful toilet sign is useless if men constantly walk into the ladies’ room.

The hard part is defining what your brand is and what it aims to become. Your brand strategy follows your brand ambition, and your visual identity mirrors your overall brand ambition. Identity is not just how you look, it is what you say, what you do, what you are. What is Yahoo? What is at Yahoo’s core? What does the company stand for? We don’t really know, but Mayer helps us out:

> We knew we wanted a logo that reflected Yahoo—whimsical, yet sophisticated. Modern and fresh, with a nod to our history. Having a human touch, personal. Proud.

Is Yahoo “whimsical, yet sophisticated. Modern and fresh human, personal proud”? Currently, Yahoo is not associated with being whimsical or sophisticated, rather it is mostly boring and dull. It doesn’t portray modernity or freshness, it feels obsolete and dated. There is no humanity in the brand identity, it’s computed, impersonal, scattered. What Mayer means by “proud” is also quite unclear, unless she means the blind pride that comes from ownership of high traffic domains, which is, again, anything but whimsical.

## The Bullshit

Maybe the Yahoo she sees in the logo is the Yahoo she wants to build. A bizarro Yahoo, the opposite of what it is, a Yahoo that we have yet to see. It is not impossible, but highly improbable. Maybe, again, it’s all just bullshit. She is not describing Yahoo, she is just describing what the logo should convey. It is more likely she’s reverse-engineering and rationalizing the logo than describing the design brief. These random formal restrictions use the same language:

> We didn’t want to have any straight lines in the logo. Straight lines don’t exist in the human form and are extremely rare in nature, so the human touch in the logo is that all the lines and forms all have at least a slight curve.

Artifacts are by definition _not_ natural and they don’t need to look natural. But let’s not get sidetracked here. It’s bullshit.

> We preferred letters that had thicker and thinner strokes—conveying the subjective and editorial nature of some of what we do.

Like a humanist sans serif? And is “subjective and editorial” what a humanist sans conveys? What does “subjective and editorial” actually mean? There is a contradiction there, no? Ah no, wait, it’s bullshit.

> Serifs were a big part of our old logo. It felt wrong to give them up altogether so we went for a sans serif font with “scallops” on the ends of the letters.

Bullshit.

> Our existing logo felt like the iconic Yahoo yodel. We wanted to preserve that and do something playful with the OO’s.

So she does not only want to be a designer, she also wants to be a sales person from a cheesy design agency.

> We wanted there to be a mathematical consistency to the logo, really pulling it together into one coherent mark.

Mathematical consistency. Like in the kerning of the letters A H O O? Perfect geometry does not result in perfect design. On the contrary, “real visual rhythm is hurt by precision. This fact is where we get the saying in design: if it looks right, it is right.”[⁶](https://ia.net/topics/logo-bullshit-co-inc#fn6)

> Our last move was to tilt the exclamation point by 9 degrees, just to add a bit of whimsy.

But wait, it gets better:

> Prior to the weekend, we had also polled our employees on the changes they wanted to see. Interestingly, 87% of our employees wanted some type of change in the logo (either iterative or radical). In terms of specific attributes, our employees had wanted:
> 
> 1.  Sans serif
> 2.  Variable size letters
> 3.  A variable baseline
> 4.  A tilted exclamation point
> 5.  And the majority of their favorite logos were uppercase.
> 
> While we hadn’t set out to explicitly fill each request, we met a lot of what the people who know us best felt suited us best.

Design by polling. Great idea! Next she should try the same with Yahoo’s server architecture. Ask everyone about the best server configuration and then put together a brief for the system administrators. Why not? We all use the web, and know how to load and save and stuff. Everybody is a designer, so if we ask n people, the quality of the logo increases by factor n. Right?

> Color and texture were pretty easy. Our purple is Pantone Violet C—a pantone that needs no number and no introduction ;). For the texture, we came up with the nice idea of creating a chiseled triangular depth to the logo—this causes the letter Y to appear in the shading at the ends of each of the letters.

Piece of cake. Why lose your mind over color? We love all of the colors. Let’s just pick one with a nice code.

> Over the subsequent weeks, we’ve worked on various applications and treatments of the logo (the favicon, app launchers, sub-brand lockups). It’s held up well. And, while moving forward we’re likely to make small iterative changes along the way rather than dramatic ones, we’re really happy with where we ended up. We hope you are too!

So how did it turn out? Typographically, the kerning and spacing alone are worth an extensive, geeky critique[⁷](https://ia.net/topics/logo-bullshit-co-inc#fn7), but I don’t work for a $10 Billion Dollar company for free. Before you tell me “but I like it!” and insist on a minute analysis of the technical quality of this logo, let me make my point.

## The Hangover

This post is _not_ about the technical quality of the logo. I am not writing about brand design, but about _brand management_. This is about a simple rule: Brand design follows brand management, not the other way around.

One could argue that we can’t say if this is bad brand management. Unless we know what the brand ambition, brand architecture, and brand strategy are, we ought to have no opinion. Maybe the logo does exactly what it is supposed to do. Because really, it doesn’t matter whether it looks pretty, or if someone likes or dislikes the purple or the scallops. The Coca-Cola logo was not designed by a professional designer—it is typographically hideous, but that doesn’t matter. Brand identity is not about visual refinement or aesthetics. It can be purposely ugly, like the London Olympics logo. What is important is that it is done seriously.

Designing a $10 Billion Dollar company’s logo over a weekend, without considering the whole of the brand identity and what it needs to do—seriously?

Now, again, let’s assume the best case. Let’s say that all of this is just a marketing stunt, and while for unknown reasons the logo is technically not quite on par with the $10 Billion Dollar brand it represents, everything has been calculated and thought through. This is very unlikely, but let’s assume it anyway.

For a brand like Yahoo there is something more important than spacing, kerning, colors, serifs, or making designers angry at this point. No, it’s not getting attention. It’s gaining trust. Ironically, for that you need a reflective, clear, and consistent brand identity. A new logo powered by bullshit doesn’t convey identity and trustworthiness. It conveys desperation.",null,undefined
2020-05-29T03:29:58.000Z,https://twitter.com/ltm/status/1266210145408704512,true,"[""best""]",tweet,ltm_1266210145408704512,ltm,twitter,https://twitter.com/11922492/status/1266204871465697282,"@jmj As someone that worked on DMs years ago it goes something like this: https://t.co/Idg1QBDazp
![](https://pbs.twimg.com/media/EZJ7ae6VAAA_M3e.jpg)
",Luke Millar,undefined
2020-04-03T16:13:21.000Z,https://twitter.com/luckyfeodor/status/1246108537954197505,true,"[""best""]",tweet,luckyfeodor_1246108537954197505,luckyfeodor,twitter,null,"Зубков как всегда крут! https://t.co/B82DwMIodE
![](https://pbs.twimg.com/media/EUsRFZjWAAEwahG.jpg)
![](https://pbs.twimg.com/media/EUsRGGcWoAAyxkd.jpg)
![](https://pbs.twimg.com/media/EUsRGyOX0AA_D-I.jpg)
",Фёдор Фурибунда🌊,undefined
2020-06-13T09:56:52.000Z,https://github.com/markedjs/marked,true,[],article,markedjs/marked,null,pocket,null,"# markedjs/marked

[github.com](http://github.com) | May 18, 2018

[

](https://marked.js.org)

# [](https://github.com/markedjs/marked#marked)Marked

[

](https://www.npmjs.com/package/marked)[

](https://cdn.jsdelivr.net/npm/marked@0.3.19/marked.min.js)[

](https://packagephobia.now.sh/result?p=marked@0.3.19)[

](https://www.npmjs.com/package/marked)[

](https://travis-ci.org/markedjs/marked)

*   ⚡ built for speed
*   ⬇️ low-level compiler for parsing markdown without caching or blocking for long periods of time
*   ⚖️ light-weight while implementing all markdown features from the supported flavors & specifications
*   🌐 works in a browser, on a server, or from a command line interface (CLI)

## [](https://github.com/markedjs/marked#demo)Demo

Checkout the [demo page](https://marked.js.org/demo/) to see marked in action ⛹️

## [](https://github.com/markedjs/marked#docs)Docs

Our [documentation pages](https://marked.js.org) are also rendered using marked 💯

## [](https://github.com/markedjs/marked#installation)Installation

**CLI:** `npm install -g marked`

**In-browser:** `npm install marked --save`

## [](https://github.com/markedjs/marked#usage)Usage

**CLI**

$ marked -o hello.html
hello world
^D
$ cat hello.html
<p\>hello world</p\>

**Browser**

<!doctype html>
<html\>
<head\>
  <meta charset\=""utf-8""/>
  <title\>Marked in the browser</title\>
</head\>
<body\>
  <div id\=""content""\></div\>
  <script src\=""https://cdn.jsdelivr.net/npm/marked/marked.min.js""\></script\>
  <script\>
 document.getElementById('content').innerHTML \=
 marked('\# Marked in the browser\\n\\nRendered by \*\*marked\*\*.');
  </script\>
</body\>
</html\>

## [](https://github.com/markedjs/marked#license)License

Copyright (c) 2011-2018, Christopher Jeffrey. (MIT License)",null,undefined
2020-02-11T13:37:57.000Z,https://twitter.com/martin_camera/status/1227225260208148483,true,"[""best""]",tweet,martin_camera_1227225260208148483,martin_camera,twitter,null,"Как же уютно. https://t.co/AqYbrJOzeL
![](https://pbs.twimg.com/media/EQf62_SXkAItVw2.jpg)
",Тот самый Мартин,undefined
2020-04-23T20:38:49.000Z,https://twitter.com/mashathexplorer/status/1253423101993381889,true,"[""best""]",tweet,mashathexplorer_1253423101993381889,mashathexplorer,twitter,null,"Славяне: бобровая струя 👏 барсучий жир 🥰 мумие алтайское 💃 гриб чага 💆‍♀️ скипидарные ванны 💅

Тоже славяне: блин, реально летучую мышь съел???
",Радіо Марія,undefined
2020-05-17T19:42:26.000Z,https://twitter.com/matvelloso/status/1262106222800429058,true,"[""best""]",tweet,matvelloso_1262106222800429058,matvelloso,twitter,null,"I think about this a lot https://t.co/ayStqz8vZT
![](https://pbs.twimg.com/media/EYPm5hnUEAAykOZ.jpg)
",Mat Velloso,undefined
2020-05-23T19:13:15.000Z,https://twitter.com/maxweisel/status/1264273202278170625,true,"[""best""]",tweet,maxweisel_1264273202278170625,maxweisel,twitter,null,"just because you use a loud keyboard doesn't mean your code is strongly typed
",Max Weisel,undefined
2020-02-24T22:31:48.000Z,https://twitter.com/mcclure111/status/1232070652284174336,true,"[""best""]",tweet,mcclure111_1232070652284174336,mcclure111,twitter,null,"> [In reply to](https://twitter.com/chrisjrn/status/1232016100038266880):
> Did you know that Norway's ISO country code is also valid YAML for False?> 
> 
You Do Now.

A few years back I used YAML for a project. One of the fields in my file format was always one of N, S, E or W, that is, directions. I spent a long time debugging why my files loaded wrong before realizing the letter ""N"" interprets as false and that was the last time I used YAML. https://t.co/XVHI6wNdLS
",mcc 🏳️‍⚧️🏳️‍🌈,undefined
2020-02-06T16:04:27.000Z,https://twitter.com/meowthsli/status/1225450187474243584,true,"[""best""]",tweet,meowthsli_1225450187474243584,meowthsli,twitter,null,"Из Авито пишут про один из продуктов. RPC не нужен вообще, просто масштабируют монолит https://t.co/kilKD7Z7N1
![](https://pbs.twimg.com/media/EQGsctvWoAAPYSE.png)
",Имеющий глаза не видит. YΨR-1,undefined
2020-06-05T23:01:38.000Z,https://twitter.com/meowthsli/status/1269041719020003334,true,"[""best""]",tweet,meowthsli_1269041719020003334,meowthsli,twitter,null,"https://t.co/TfjcTgM6WT
![](https://pbs.twimg.com/media/EZyKtkdWsAAcNpF.jpg)
",Имеющий глаза не видит. YΨR-1,undefined
2020-03-30T13:47:57.000Z,https://twitter.com/MichellCClark/status/1244622395920527361,true,"[""best""]",tweet,MichellCClark_1244622395920527361,MichellCClark,twitter,null,"I have no words. https://t.co/yHYIKq8bzM
![](https://pbs.twimg.com/ext_tw_video_thumb/1244622339947540483/pu/img/nk9oGxl7CD40_VXt.jpg)
",Love Yo Self ✨,undefined
2020-02-20T21:28:45.000Z,https://twitter.com/mikegalsworthy/status/1230605230666113033,true,"[""best""]",tweet,mikegalsworthy_1230605230666113033,mikegalsworthy,twitter,null,"Huge respect for people like this...

Guy sees that a sea lion in a group has something caught around its middle - so he charges in, catches the snarling beastie, holds him down, cuts the band off (see the wounds) and sets him free. https://t.co/rGPoR1P0BY
",Dr Mike Galsworthy,undefined
2020-02-05T21:09:03.000Z,https://twitter.com/miketansky/status/1225164455056683014,true,"[""best""]",tweet,miketansky_1225164455056683014,miketansky,twitter,null,"По мотивам поста @krlsrg, «33 слова о дизайне» очень милый и хороший. Но там есть суперважное эссе Антона Шнайдера, хочется транслировать по 1-му каналу в прайм-тайм https://t.co/NSG2EUmYbc
",Mike Tansky,undefined
2020-04-19T17:19:10.000Z,https://twitter.com/mikhasya8080/status/1251923307370340352,true,"[""best""]",tweet,mikhasya8080_1251923307370340352,mikhasya8080,twitter,null,"https://t.co/nOOflfrpMC
![](https://pbs.twimg.com/media/EV-5mncXsAIUoG0.jpg)
",сон Маяковского,undefined
2020-05-09T12:15:22.000Z,https://twitter.com/mironov_fm/status/1259094610963505152,true,"[""best""]",tweet,mironov_fm_1259094610963505152,mironov_fm,twitter,null,"Мне не понравился фильм Дудя про Кремниевую долину (наверное первый фильм Дудя, который не понравился).
Мне также не понравился ответ Дурова (неправильно расставлены акценты, в фильме есть более существенные проблемы).
Не знаю, что теперь мне с этим делать. Хоть тред пиши
",Maxim Mironov,undefined
2015-11-15T15:55:20.000Z,https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570,false,"[""best""]",article,Misused mobile UX patterns — Medium,null,pocket,null,"# Misused mobile UX patterns

by [Zoltan Kollin](https://medium.com/@kollinz), [medium.com](http://medium.com)  
November 3, 2016 08:18 AM

If you are an experienced designer, you probably agree that being inspired by others is not stealing in UI design. It’s best practice research. It’s using design patterns. It’s following the guidelines. It’s making sure to use patterns that your users are familiar with to create usable interfaces.

Some might say that sticking to the guidelines and following others will kill creativity and, at the end of the day, all apps will look the same. From a UX perspective I see a different problem. Getting used to adapting best practices might make you believe that Google / Facebook / Instagram / \[your favorite app here\] is always right, their design goals are the same as yours and you fail to question them. Here are a few patterns that are (or used to be) considered best practices and yet might not be as good as you’d think at first sight.

# 1\. Hidden navigation

At least half million posts have been written about the hamburger menu, mostly by designers, arguing against it. If you missed all, read [one](http://techcrunch.com/2014/05/24/before-the-hamburger-button-kills-you/) or [two](http://deep.design/the-hamburger-menu/), but in a nutshell, it’s not about the icon itself but rather about [hiding the navigation](https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/) _behind_ an icon.

This solution is pretty tempting and convenient for a designer: you don’t have to worry about the limited screen estate, just squeeze your whole navigation into a scrollable overlay that is hidden by default.

[Experiments show](http://www.lukew.com/ff/entry.asp?1945), however, that exposing menu options in a more visible way increases engagement, user satisfaction and even revenue. That’s why now all [the](https://twitter.com/lukew/status/562298343217299457) [big](https://twitter.com/lukew/status/629306816925601792) [players](https://twitter.com/lukew/status/623708092190949377) are shifting from hamburger menus towards making the most relevant navigation options always visible.

**_If your navigation is complex, hiding it does not make it mobile friendly. Prioritization does. See some_** [**_Hamburger menu alternatives_**](https://medium.com/@kollinz/hamburger-menu-alternatives-for-mobile-navigation-a3a3beb555b8)

# 2\. Icons, icons everywhere

Due to the limited screen estate, it also seems a no brainer to save space by replacing text labels with icons wherever possible. Pictograms take less space, they don’t have to be translated, and people are familiar with these after all, right? And _every other app does that_.

With this assumption in mind, app designers sometimes hide functionality behind icons that are actually pretty hard to recognize. Would you guess, for example, that you can send direct messages behind this icon in Instagram?

Or, assuming that you never used Google Translate before, what functionality would you expect to access by tapping the pictogram below?

It’s a common mistake to assume that your users are either familiar with abstract pictograms or they’re willing to spend extra time exploring and learning them.

If you have designed an icon and you feel that a popover label is required to make it usable, you’re doing it wrong. Even if you’re Foursquare and your users will learn it anyway.

This doesn’t mean that you should not use icons at all. There are [plenty of icons that your users know pretty well](https://www.usertesting.com/blog/2015/08/04/user-friendly-ui-icons/), mostly those representing common functionality like search, video play, email, settings and so on. (But the users can still be unsure, for instance, what exactly happens when they tap on a heart icon.)

Complex and abstract features, however, should always be displayed with a proper text label. In such cases, icons are still useful as they can enhance the discoverability of the menu items and they can also add a nice touch and personality to your app.

**_Basic functionality can be effectively represented by icons but for complex features, text labels should be used. (And if you use icons, always have them usability tested.)_**

# 3\. Gesture based navigation

When Apple introduced the iPhone in 2007, multi-touch technology got mainstream attention and users learned that they could not only point and tap on the interface but also zoom, pinch and swipe it.

Gestures became popular among designers and there were many apps that were designed around experimenting with gesture controls.

Just like hiding the navigation and using icons instead of text labels, gestures seem sometimes tempting for designers looking to save some screen estate. (“There should not be a delete button, people will just swipe left. Or right. We’ll decide.”)

The first thing to know about **gestures** is that they **are always hidden**. People need to remember them. Just like in case of the hamburger menu: if you hide an option, less people will use it.

In addition, gestures have the same problem as icons do: there are common ones that most users understand like tapping, zooming and scrolling, and there are those that need to be discovered and learned for each app.

Unfortunately, **most gestures are not standard and consistent across apps yet**— it’s still a pretty new area of touch interface design. Even a simple gesture like swiping over an email might work differently in various mail apps.

Or, consider that shaking your device might mean both Undo (in iOS) and Send feedback (Google Maps), too.

**_Never forget that gestures are hidden controls and have to be memorized which needs tons of effort on your users’ end. If you’re Tinder, you might be able to teach the whole world what swiping right means — but only if it’s an_** [**_essential ingredient of your app’s concept_**](http://www.apptentive.com/blog/in-app-gestures-an-interview-with-tinder/)**_._**

# 4\. Tutor overlays as onboarding

[Onboarding](http://www.useronboard.com/), a recently hot UX topic, refers to the first encounter between the user and the app. In many cases, this simply means showing some overlay tutorials to the user to explain the interface:

Why is it a [bad solution](http://jmduke.com/posts/app-smells-coach-marks-and-onboarding/)? Because many users will skip your intro; they just want to get started with the app. And even if they notice your tutorial, they usually forget everything as soon as they close the overlay. (Especially if the screen is stuffed with information.) And last but not least: adding coach marks to your interface does not make it more intuitive. Remember this:

The onboarding flow can be designed in many other ways that might be more useful to your users. Slack, for instance, uses the first screen to create some context. They simply introduce themselves, focusing on _benefits_ instead of screens and features.

A more interactive way to engage first time users is progressive onboarding. Duolingo does not explain how the app works: users are encouraged to jump in and do a quick test in the selected language (even without signing up) because people learn best by doing. Also, it’s a much more engaging way to show the _value_ of the app.

Remember how swipe gestures were different in Mailbox than in Apple Mail? This is how their progressive onboarding works: users get a walkthrough where they have to try each gestures before actually starting to use the app:

**_Before designing your coach marks on a semi-transparent overlay, stop and think about what the experience of the first time users should be. Focus on the context. In most of the cases, there is a better way to welcome your users._**

# 5\. Creative but unintuitive empty states

An [empty state](http://emptystat.es/) is something that is easily overlooked by inexperienced designers, however, they can be an important factor when it comes to an app’s overall user experience.

Sometimes designers see error messages and empty states as blank canvases where there’s a good opportunity to do something creative.

Take this empty state screen from Google Photos:

At first sight, it seems great, right? Well composed layout following the guidelines, with a beautiful graphics on it.

At a second glance, though, there are some strange things here:

*   Why is there a prominent search button if there are no collections? Why would you want to search in _nothing_?
*   The second most prominent element, the image is obviously not tappable (although many would try).
*   The hint says I should be looking for the ‘+’ sign on the top which is super awkward. Why does the hint itself not contain an _Add_ button? It’s like saying “click on the Continue button to continue”.

This empty state screen above simply doesn’t help users understand the context:

*   What are collections? Why are they useful?
*   Why don’t I have any?
*   What can I do about it (if I should do anything at all)?

When it comes to creativity, less is sometimes more. The empty state below does an excellent job when it comes to being useful. (Let’s ignore the “Now tap the button below” instruction for now.)

**_Don’t forget that empty states (similar to 404 pages on the web) are not only about visual aesthetics and brand personality. They have a more important role in usability, too. Make them intuitive._**

# Question everything

Don’t get me wrong: design patterns and best practices are still your friends. Keep in mind though that apps and users are different: one solution might work for well in an app and fail in yours. It’s not a one-size-fits-all thing. Plus, you never know why an app was designed in a certain way.

Do your own thinking. Do your own design. Do your own research.

Measure, test, validate — and don’t be afraid to unfollow the guidelines if that makes more sense.

> **If you enjoyed this article, make sure to read my latest post,** [**Hamburger menu alternatives for mobile navigation**](https://medium.com/@kollinz/hamburger-menu-alternatives-for-mobile-navigation-a3a3beb555b8)**.**",null,undefined
2020-03-20T16:00:01.000Z,https://twitter.com/MIT_CSAIL/status/1241031749880156161,true,"[""best""]",tweet,MIT_CSAIL_1241031749880156161,MIT_CSAIL,twitter,null,"This robotic mouth chants algorithmically generated prayers: https://t.co/2thGez8uDX https://t.co/6NSULGvXOl
![](https://pbs.twimg.com/ext_tw_video_thumb/1241019259175796737/pu/img/QXOS4m9f2UZrHerf.jpg)
",MIT CSAIL,undefined
2020-03-09T11:58:23.000Z,https://twitter.com/mitrofanbelov/status/1236984677401051136,true,"[""best""]",tweet,mitrofanbelov_1236984677401051136,mitrofanbelov,twitter,null,"https://t.co/ONHDvwNxBY
![](https://pbs.twimg.com/media/ESqnAWcWkAArJ9X.jpg)
",митрофанушка,undefined
2020-04-17T05:06:04.000Z,https://twitter.com/motriarch/status/1251014038626209794,true,"[""best""]",tweet,motriarch_1251014038626209794,motriarch,twitter,null,"https://t.co/Wh2R6ESXLm
![](https://pbs.twimg.com/media/EVx-o0QXYAAZ_uN.jpg)
",Мо,undefined
2020-02-04T13:41:04.000Z,https://twitter.com/moza1ka/status/1224689331824156672,true,"[""best""]",tweet,moza1ka_1224689331824156672,moza1ka,twitter,null,"5 минут всмaтривалась, пока не поняла, что рот сверху https://t.co/1K35lRtSSP
![](https://pbs.twimg.com/media/EP74c_iXUAAo19z.jpg)
",Примордиал,undefined
2020-05-09T12:52:02.000Z,https://twitter.com/MrDaveFoy/status/1259103837559889920,true,"[""best""]",tweet,MrDaveFoy_1259103837559889920,MrDaveFoy,twitter,null,"I was wondering how I could use @RoamResearch to replace Pinboard, my usual bookmark tool, and then spotted this absolutely lovely bookmarklet from @anthilemoon and now my life is complete. 🙏

https://t.co/XC955AMYuM https://t.co/f7j2dBkPyC
![](https://pbs.twimg.com/media/EXk8RINWkAAlky3.png)
",Dave Foy,undefined
2020-03-06T11:46:18.000Z,https://twitter.com/mtreskin/status/1235894470996094976,true,"[""best""]",tweet,mtreskin_1235894470996094976,mtreskin,twitter,https://twitter.com/506659999/status/1235894270646775809,"@arxont надо ПРАВИЛЬНО, иначе ТЕХНИЧЕСКИЙ ДОЛГ
",Claude Mauvrodille,undefined
2020-05-11T07:02:03.000Z,https://twitter.com/mtreskin/status/1259740535612375041,true,"[""best""]",tweet,mtreskin_1259740535612375041,mtreskin,twitter,null,"https://t.co/mBNxLInHMv
![](https://pbs.twimg.com/media/EXt_VkqX0AElO6b.jpg)
",Claude Mauvrodille,undefined
2020-04-18T20:32:47.000Z,https://twitter.com/neresident/status/1251609642037391361,true,"[""best""]",tweet,neresident_1251609642037391361,neresident,twitter,null,"Этот сайт всё ещё бесплатный https://t.co/RVdFvaCSTq
![](https://pbs.twimg.com/media/EV6cVMpXYAEuZ8h.jpg)
",Нерезидент,undefined
2020-04-08T05:49:44.000Z,https://twitter.com/netcreeper/status/1247763537071501316,true,"[""best""]",tweet,netcreeper_1247763537071501316,netcreeper,twitter,null,"> [In reply to](https://twitter.com/syncromechanica/status/1247712139583815684):
> New post in Кибердед: Положняк поменялся, микросервисы больше не будующее:> 
> 
https://t.co/UWMmPlyBv9> 
> 
Я даже не знаю, какой саркастический комментарий тут можно придумать. https://t.co/Am9Ru0MYB6

Я вот придерживаюсь концепта Доменных Абстракций и Правильного Использования Зависимостей Для Архитектуры. (ДА ПИЗДА) Без всяких микросервисов. https://t.co/o3nhiJ15qa
",Meltdown & Spectre,undefined
2020-06-02T15:51:30.000Z,https://twitter.com/nikitonsky/status/1267846310427856896,true,"[""best""]",tweet,nikitonsky_1267846310427856896,nikitonsky,twitter,null,"Do milliseconds really matter? From https://t.co/ujxzh50oi5 https://t.co/GRmwGOTaFH
![](https://pbs.twimg.com/media/EZhLcJHXYAIPpGh.png)
",Niki Tonsky,undefined
2020-06-13T13:26:36.000Z,https://nocodelist.co/,false,"[""nocode""]",article,No Code List,null,pocket,null,"# No Code List

[nocodelist.co](http://nocodelist.co)

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

No Code List ❤️ Product Hunt! We're on today, [check us out!](https://www.producthunt.com/posts/no-code-list)

## No Code Software

*   ## ▅▅▅▅▅▅▅▅▅▅
    
    ▃▃▃ ▃▃▃▃▃▃▃ ▃▃ ▃▃▃▃▃ ▃
    
    ▃▃▃▃▃▃▃▃▃
    
    ▃▃▃",null,undefined
2020-06-13T13:26:56.000Z,https://vas3k.ru/blog/nocode/,false,"[""nocode""]",article,No Code,null,pocket,null,"# No Code

by [Вастрик](https://vas3k.ru), [vas3k.ru](http://vas3k.ru)  
May 20, 2020 06:00 AM

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

Трекер расходов. Аналоговая версия

Чеки в ней постоянно выцветали, перемешивались и мне это быстро надоело. **Я же в киберпанке живу, где диджитал?**

Целый вечер был потрачен на поиски **Мобильного Приложения, которое решит все мои проблемы**. Дело осложнялось тем, что я не хотел платить $9.99 в месяц за приложение с одной кнопкой, которую мне нужно нажимать лишь пару раз за месяц. Современные же мобильные приложения таких наглецов не любят. Ишь чо. Разработчик той кнопки тоже хочет кушать. Плоти.

Но я нашел одно условно бесплатное и в новом налоговом году радостно на него переехал.

Теперь мои любимые чеки выглядели вот так:

Расходы в мире диджитала

Всё вроде было круто. В конце года я даже мог бы выгрузить CSV всех транзакций куда-нибудь в эксель и отправить налоговому консультанту. Конечно, если сервис до того времени не закроется или его не купит Stripe.

Со временем стала накапливаться боль: чтобы просканировать новый чек надо сначала найти приложение в куче экранов, в нём нажать пять разных кнопок, выбрать тип расхода и валюту, а потом внезапно выяснялось, что приложение не может делать несколько фото, потому что никто из их продактов, видимо, не написал юзер-сторис, когда важная информация вдруг есть на обеих сторонах чека.

Фотай два раза и склеивай сам.

Всё это стало напоминать типичный диджитал. Когда:

> Сначала было плохо, а потом пришли программисты и сделали еще хуже.  
> Зато в облаке

Пришлось изобретать. Как в детстве.

У меня было:

*   📸 **Камера.** Точнее [Scanner Pro](https://readdle.com/scannerpro), которым я фотаю все документы. Просто потому что он умеет в авто-выравнивание и склейку нескольких страниц сразу в PDF.
*   📦 **Dropbox.** Который скатился на дно, но для шаринга семейных документов пока вроде годится.
*   📊 **Эксель.** Я взял его умный аналог — [Airtable](https://airtable.com/invite/r/VH5W0L2K). По сути те же таблички, но можно заводить типы данных, связывать таблички ключами и по-разному их отображать. Как в базах данных. Либо можно на это всё забить и использовать его как обычный эксель.

Удобный сценарий мне виделся как-то так:

Чтобы делать «магию» сегодня есть куча сервисов — [IFTTT](https://ifttt.com/), [Zapier](https://zapier.com/), да тысячи их. Я остановился на чешском [Integromat](https://www.integromat.com/?pc=vas3k). Не знаю, интерфейс понравился.

Там я собрал себе вот такой воркфлоу.

Трекинг расходов в мире no-code

Теперь, когда я хочу затрекать новый расход, мне нужно сфотографировать чек и положить его в папку в Dropbox с правильным названием (можно и без, потом допишу).

И всё. Весь UX.

Дальше автоматика делает всё сама: парсит дату, тип расхода, название, сумму и складывает чек в табличку. Раз в месяц можно её открыть, посмотреть и поменять если где-то случился косяк.

Выглядит в итоге вот так:

Чуть менее красиво, чем в модном мобильном приложении за $9.99, зато это реальные данные, с которым я могу делать что угодно.

В конце года я смогу отфильтровать эту табличку по датам и экспортировать в любой из известных миру форматов. Могу приделать к ней скриптов или графиков, Airtable позволяет работать с этими данными почти как SQL. Даже могу импортировать её в свой Python, это займет максимум три строчки.

Завтра, если я вдруг захочу, скажем, автоматически конвертировать валюты, я просто накидаю мышкой пару новых модулей в Integromat и жизнь станет еще лучше.

Мне не придется искать новое приложение или ждать пока его разработчики запилят мне специфическую фичу. Я больше не привязан к иконке на рабочем столе.

Круто же?

Вот всё то, что произошло выше, сегодня называется no-code.

В этом посте мы поговорим о нём.

**Дисклеймер:** пост никем не спонсирован, кроме любимых подписчиков [Вастрик.Клуба](https://vas3k.club). В нём нет попыток что-то скрыто прорекламировать, но есть партнерские ссылки, по которым мы с вами вместе получим бонусов при реге. Вигода. Не нравится — нажмите Cmd+W.

# [🤪 Что такое no-code?](https://vas3k.ru/blog/nocode/#scroll10)

No-code, zero-code, low-code — это модные баззворды, которые в общем-то означают любые вещи, ради которых раньше нам приходилось писать код, а теперь вроде как и не надо. Либо надо, но чуть-чуть.

Но потом это завернули в идеологию и всё стало плохо.

К 2020 году хайп по no-code году достиг уровня, когда его сложно игнорировать. На Product Hunt'е появился целый раздел для no-code-стартапов, а инвесторы на питчах теперь даже одним глазом просыпаются, услышав новый баззворд.

Я пытался написать этот пост, не углубляясь во всю эту подковёрную мишуру, но я прям чувствую, что без неё никуда. Люди моментально скатываются в срачи про «нужин»/«нинужин» и на другие мысли не реагируют.

Так что для придётся начать с обзора этих срачей. Расскажу что происходит в no-code, глазами человека, который активно наблюдает за ним последние два года, но пытается сохранять нейтралитет и извлекать практически полезные вещи из хайпа.

Мое мнение по этому поводу всё равно будет абсолютно неканоничным, потому что я сраный программист.

## [💃 Что говорят фанаты no-code](https://vas3k.ru/blog/nocode/#scroll20)

Когда несколько лет назад в мейкерском коммьюнити начинали появляться первые адепты no-code, они казались тру-кибер-визионерами. Они писали громкие посты на Медиум о «новом будущем», говорили «перевороте рынка» и «дизрапте айти».

В общем, проявляли все признаки диванного фанатизма.

Потом, правда, оказалось, что большинство из них были обычными инфо-цыганами, которые хотят запускать по пять лендингов в месяц и впаривать вам подогретые полуфабрикаты под видом био-веган-сустейнабл стейков. Правда вскрывалась, как обычно, смешно и беспощадно.

Но, справедливости ради, я попытался собрать и структурировать самые сильные их аргументы. Они ведь сами не могут, там очередной 100-day no-code challenge на носу.

### [🎓 «Айти больше не удел <1% инженеров! Даешь демократизацию! Теперь каждый может вайти!»](https://vas3k.ru/blog/nocode/#scroll30)

Только представьте что будет, когда остальные 99% тоже смогут программировать? © Типичный аргумент в no-code блогах

Сегодня твиттер любого венчура из калифорнии завален подобной мотивационной хренью. В ней нет ничего плохого, просто очень малое количество действительно умеют отличать сигнал от шума. Большинство готово поверить в любую сказку про дизрапты и новую экономику, если ее рассказывает человек с большими деньгами.

Я и сам когда-то прозябал в этом болоте. Чудом выжил.

Если вдруг 99% людей в мире научатся программировать — **произойдет ничего**. Они нафигачат кучу приложений с мемами, а потом просто не смогут придумать куда им дальше программировать.

Даже сами адепты no-code за последние годы так и не нашли ничего лучше, кроме как клепать бесконечные [джоб-борды](https://table2site.com/site/demo-site-3) и [подборки городов](https://table2site.com/site/demo-site-1) для диджитал номадов.

### [👷‍♂️ «Раньше ты использовал приложения, а теперь ты их строишь»](https://vas3k.ru/blog/nocode/#scroll40)

Мне нравится [этот](https://medium.com/fibery/no-code-revolution-why-now-2f2bd914cb05) аргумент и я даже начал с него пост.

Проблема лишь в том, что **придумать что строить** может всё тот же пресловутый 1%. Большинство людей даже не могут рассчитать сложный процент в экселе, а тут надо ДЕЛОТЬ ПРОДУКТ.

Да, это будет другой один процент. Не айтишников. Потому что айтишники тоже отвратительно умеют в продукты, по себе знаю. Вот в этом и правда плюс.

Вот ради этого второго «одногопроцента» мы тут и воюем.

### [💸 «Программисты стали стоить так дорого, что малый бизнес больше не может себе их позволить»](https://vas3k.ru/blog/nocode/#scroll50)

Бинго. Мы же тут с вами программисты. Давайте быстренько прикинем сколько будет стоить решение простейшей бизнес-задачи — сделать автоматическую рассылку. Типа той, через которую вы подписываетесь на посты в этом блоге.

По хорошему тут надо поднять mail-сервер, сверстать HTML-шаблоны на сраных таблицах с инлайн-стилями, сделать формы подписки-отписки, защитить домен от спама, не забыть про хранение данных, пакет Яровой, GDPR, double opt-in, и.т.д.

Большинство программистов еще завыпендривается, что сервера поднимать — дело не барское и затребуют себе админа. Потом правки, согласования, внезапно фронтендер уехал в Прагу на веломарафон на неделю, никого не предупредив. Короче, месяца два-три работы и ~$10K в зависимости от налогов, так ведь?

«Ну и нахер оно мне надо, лучше пойду на MailChimp» — говорю я как бизнес.

«Дык это еще если по-минимуму, кек» — говорю я как программист.

### [🪓 «Простые люди не хотят писать код, они хотят решать задачи»](https://vas3k.ru/blog/nocode/#scroll60)

Абсолютно верное и при этом бессмысленное утверждение. Его можно применить к чему угодно. Например: «Машины — для водителей. Простые люди не хотят водить, они хотят быть на месте вовремя».

Я не спорю, можно даже всю жизнь ездить на такси, вот только хрен ты тогда в жизни увидишь хоть что-то, кроме улиц и городов.

Но некоторые адепты настолько сильно поехали кукухой, что объявили любой low-code вне закона. Мол, всё, что требует хотя бы одного html-тега — не тру и опять «доступно только однопроцентной элите».

Хочешь ходить там, где никто не ходил — научись хотя бы ходить. Так же и с кодом. Осилить базовый HTML и CSS может даже восьмидесятилетняя бабушка. Причём мёртвая.

## [🎅🏿 Другая крайность: диды-программисты](https://vas3k.ru/blog/nocode/#scroll70)

Когда шум вокруг no-code вышел из узких коммьюнити и долетел до Одноклассников, Твиттеров и Пикабу, где о нём узнали наши любимые душные диды.

Они сразу же заняли в оборону. Еще бы. Ведь тут за три клика делают то, чем они восемь лет в своей галере занимаются, называя это Full-Stack Developer'ом.

Рассмотрим и их популярные аргументы.

### [👴 «Ололо, миллениалы изобрели CMS. Я уже 10 лет об этом слышу. Всё уже было»](https://vas3k.ru/blog/nocode/#scroll80)

К сожалению, мы, хомосапиенсики, очень плохи в оценке затяжных трендов. Даже если эти тренды уже в прошлом. Нам кажется, что мы всегда пользовались смартфонами и смотрели ютюб за обедом, хотя 15 лет назад мы максимум пиво нокией открывали.

Прогресс медленно ползет вверх под гундёжь дидов про «когда же сбудутся ваши сказки, что программисты будут не нужны». Просто потому что быть душнилой всегда проще, чем анализировать и меняться.

Автор: Ева Морозова

Когда появляется спрос — там возникает и предложение. Когда же появляется спрос на само создание спроса — возникают платформы. Так уже произошло с такси, с интернет-магазинами, сейчас происходит с доставкой и в будущем, я надеюсь, произойдет с базовыми программерскими задачами. Потому что я уже устал писать REST API.

> Программистов надо освобождать от CRUD'ов

Это не очень нормально, когда большая часть твоей индустрии занимается тем, что десять лет подряд клепает лендинги и админки, и изобретает тысяча первый способ переслать JSON из базы на клиент.

Вот этих точно пора заменять конструкторами.

Просто пока никому это не выгодно.

### [💰 «No-code — медленно и дорого»](https://vas3k.ru/blog/nocode/#scroll90)

Здравое зерно в этом есть. Только не в том, что раньше скрипты были по 4 Кб, а теперь надо убунту в докере по крону запускать. Бизнесу абсолютно насрать сколько там гигабайт на амазоне должно перекачаться чтобы пользователь получил свой промо-код на суши. Дело в другом.

Подавляющее большинство NoCode-решений, что я встречал, подходят только для очень малого бизнеса.

Когда у тебя 100 клиентов — они идеальны.

Когда 1000 — ты чувствуешь напряжение. У тебя может быть всё еще $0 чистой прибыли, но уже каждый хочет с тебя денег.

Когда у тебя их становится 10.000+ — беги.

Я на себе это ощутил, когда рассылка моего блога перевалила за те же условные 10К человек. На донатах я тогда собирал максимум 2000 рублей в месяц, а майлчимп на таких объемах хотел с меня $110 (сейчас они, к счастью, изменили ценовую политику).

Но ничего, я за вечер сменил сервис рассылок, никто даже не заметил разницы.

### [📈 «А расти как собираетесь, щенки?»](https://vas3k.ru/blog/nocode/#scroll100)

Да, no-code и правда очень плохо масштабируется. Вот только подавляющее большинство бизнесов даже не доживает до того момента, когда им надо масштабироваться. Так что здесь мы честно фокусируемся на большинстве, а не на выживших.

Наклепать MVP из говна и провалиться — это норм.

Пилить же полгода хай-авалабилити-архитектуру на пубернетесах, которая в итоге никому будет нахер не нужна — вот настоящая трагедия.

### [🏭 «No-code — это привязка к платформе!»](https://vas3k.ru/blog/nocode/#scroll110)

— ORM даёт гибкость, я могу поменять базу данных когда захочу!  
— Но нахуя?

Реальный бизнес постоянно меняет платформы. Я не встречал ни одной компании, где бы мне сказали «наш стек нас полностью устраивает, мы никуда сейчас не переезжаем». Нонсенс какой-то.

> Выбирать платформу надо не по принципу «раз и навсегда», а по стандартности её форматов и простоте миграции данных в будущем

Умные ребята делают именно так. Они не пытаются предсказать будущее, они еще до начала интеграции системы продумывают то, как будут с неё съезжать в случае чего.

Как разработчики автомобильных батарей сейчас заранее продумывают их утилизацию.

Условно, если платформа экспортирует всё в бинарный файл, который только она потом может прочитать — это сразу красный флаг. Если же можно легко выгрузить всё в стандартные CSV/JSON/SQL — неплохо, можно брать.

## [🤔 Моё мнение](https://vas3k.ru/blog/nocode/#scroll120)

Мнения сторон я как мог прокомментировал, теперь можно рассказать и своё.

Честно, я **не верю в no-code как «смену парадигмы»**. Но я с удовольствием использую его как инструмент чтобы самому писать меньше кода. И оно получается.

Для меня no-code — это новый уровень абстракции. Я не призываю заменять им всё остальное, я предлагаю дополнять и расширять. Поэтому я терпеть не могу приставку «no-» еще со времен NoSQL.

Да, по сути no-code повторяет те же самые мантры, которые звучат в айти с момента его создания, чем вызывает дикий лай про «всё это уже было». Но караван всё равно медленно ползёт вперёд, даже если собаки этого не замечают.

> 10 лет назад чтобы открыть интернет-магазин тебе нужен был программист. Сегодня тебе нужен Shopify (Etsy, Gumroad, etc)

А называют ли происходящее «конструктором», «CMS» или «no-code» — да насрать. Завтра будут опять называть по-другому. Мне нет никакого дела до лая собак, я пытаюсь разглядеть куда идёт караван.

При этом да, у no-code уже вылезла куча проблем. Кроме приведённых выше, вот еще от добавочка:

*   💩 **Издевательские цены.** $199/месяц за лендинг? $49/месяц за генерацию PDF из JSON? $29/месяц чтобы вставить карту на сайт? Перестаешь платить — тебя отключают. Да, программист всё равно выйдет дороже, но это как-то не утешает. Цены приведены из реальных сервисов, я щас не шучу.
*   💩 **Очень много второсортного дерьма**. Как будто дети открыли для себя Dremweaver и делают свои первые веб-сайты. Когда я вижу очередной лендинг, я уже практически могу определить на каком конструкторе он сделан по тому, как его вёрстка едет на айпаде.
*   💩 **Табор инфо-цыган.** Фанатизм всегда отталкивает, а обилие цыган-бизнесменов в no-code отталкивает вдвойне. То же самое в свое время оттолкнуло нормальных людей от блокчейна.
*   💩 **Большой вопрос с прайваси.** Согласно GDPR вы должны каждый раз получать разрешения пользователя, если собираетесь передавать его данные другому сервису. Но в no-code-архитектурах набор этих сервисов может меняться каждый день. Кто следит за этим? А если один из них взломают? Короче, no-code очень тяжело сочетается с GDPR. Просто никого пока не трогают, ибо все маленькие.

Типичные охуевшие цены в no-code мире. За лендинг, на который заходят больше 5К человек за месяц, плоти $99/mo. Больше 100К — вообще интерпрайз, договаривайся. Да у меня пост в блоге больше набирает. Ну и в реальности 80% этого трафика всё равно будут китайские ботнеты

### [🙋‍♀️ No-code для непрограммистов](https://vas3k.ru/blog/nocode/#scroll130)

Идея заставлять всех вокруг учить программирование обречена на провал. Однако, **я бы очень хотел, чтобы всё больше людей понимало как автоматизировать свои рутинные процессы**.

Или хотя бы начало задумываться об этом.

В современном обществе азы автоматизации так же полезны, как знание иностранного языка или умение водить машину. Но для этого не обязательно всем становиться лингвистами или водителями.

Под азами я имею в виду не ООП с монадками, а базовые понятия типа работы с данными, реакции на события, условные переходы и фильтры.

Пресловутый «одинпроцент», который «может программировать», он потому и один, потому что остальные 99% даже понятия не имеют какие задачи можно решать с помощью программирования. Никто об этом не рассказывает. Они лишь слышат магические заклинания про паттерны и полиморфизм.

Такая фигня любого оттолкнет.

### [👩‍💻 No-code для программистов](https://vas3k.ru/blog/nocode/#scroll140)

Для нас, программистов, no-code открывает даже больше возможностей. Я до сих пор не понимаю почему большинство моих друзей-кодеров думают, что no-code — это когда ты перетаскиваешь блоки if-else в детской видеоигре.

Для меня он стал новым инструментом в обойме. Иногда весьма мощным.

> No-code — это твой личный CI

Раньше, когда мне надо было написать кросспостилку контента по соцсетям или запустить email-кампанию, я думал — так, надо взять очередь задач, найти либы под нужные API, наверстать шаблонов, поднять воркеров на амазоне.

Сейчас в той же ситуации я просто создаю вебхук чтобы тот дёргал какой-нить MailChimp и иду пить кофе. Никаких мониторингов, воркеров и упавших очередей. Если где-то что-то сломается — мне упадёт письмо.

Всё это дико повышает уровень абстракции и реюзабильности отдельных модулей.

По заветам [ТРИЗ](https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D1%85_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87):

> Идеальный код — это код, которого нет, а задача выполняется

В любой ситуации когда можно НЕ писать код, я предпочитаю его не писать.

В последних пет-проджектах я начинаю отказываться от вещей, без которых раньше не мог представить свою жизнь. Например, у меня почти вымерли админки и системы рассылки уведомлений. Их заменили боты, хуки и интеграции между ними.

Так в [Вастрик.Клубе](https://vas3k.club) вся модерация происходит через специальный чат, где сидят модераторы, а бот приносит им новые профили на ревью. Куда удобнее, чем пилить для всех приватную админку с уровнями доступа и уведомлениями. Телеграм уже всё сделал за меня.

Когда начинаешь понимать идею no-code, ты начинаешь собирать себе всё больше и больше инструментов, которые раньше даже не подумал бы закодить.

Ну и самый нелепый пример: у меня есть таблица в Airtable, куда я пишу тупые шутки, которые бот потом постит в мой твиттер в прайм-тайм, чтобы над ними покекало как можно больше людей.

Кибер-кек!

Раньше я использовал для этого [Amplifr](https://amplifr.com/ru/), и он офигенный, но $15 в месяц за шутки в твиттере для меня всё еще дороговато.

В связи с этим еще раз напоминаю:

> Эксель — всё еще главный конкурент большинства стартапов в 2020

# [Кейс: How to Berlin](https://vas3k.ru/blog/nocode/#scroll150)

Посту нужны реальные примеры. Я возьму наш [howtoberlin.de](https://howtoberlin.de/ru/) просто потому что на его примере можно много чего разобрать. Им занимается Лена, я помогаю идеями и немного технически.

Тематика нам тут не особо важна. Важно, что это простой, понятный и классический бизнес: у людей есть проблемы, мы их решаем, они дают нам денюжку и уходят довольными пить винишко.

По сути это наш маленький семейный бизнес. Как многие маленькие бизнесы он появился из хобби и [личного опыта](https://vas3k.ru/blog/go_to_berlin/). Он не делался специально по «заветам no-code», просто так вышло. Потому что за советы «да просто возьми интерпрайз-CRM с LDAP-интеграцией через Exchange» мы сразу выгоняли из дома.

Мы ведь в настоящем мире живем, а не в комментариях в интернете.

Теперь пройдёмте к нам на кухню, пожалуйста.

**Сразу дисклеймер для глупеньких:** это история не о том, как надо делать, не пять шагов к успеху или бизнес-секрет от Олега Тинькова. Всё это написано здесь чтобы показать, как ЕЩЁ МОЖНО делать и, возможно, вдохновить кого-то. Если вы не чувствуете разницу между «нужно» и «можно» — тоже нажмите Cmd+W.

## [Лендинг](https://vas3k.ru/blog/nocode/#scroll160)

narod.ru [Tilda](https://tilda.cc/), [carrd.co](https://carrd.co/), [Webflow](https://webflow.com/), [Landen](https://www.landen.co/), [MailChimp](https://mailchimp.com/features/landing-pages/), и тысячи других

Сегодня бизнес надо вести сразу в инстаграме, как все. Но мне всё еще привычнее иметь страничку с описанием, понятными ценами и формой для запроса, на которую я могу дать ссылку, чем клянчить продажи в сторис.

Я дед, сорян.

Первый вариант лендинга с формочкой для связи мы собрали на Тильде. Он был кривоват, но это было даже плюсом. Ему больше доверяли, наверное потому что хендмейд и с душой.

> Чем хуже делаешь — тем лучше © 2020

Всё было хорошо, люди приходили, но хотелось большего. Ребята часто писали в форме лишь «Привет! Я переезжаю в Берлин. Вы можете мне помочь?» У Лены уходило много времени чтобы выяснить когда, с кем, помогает ли человеку компания или мы можем полностью взять всё на себя.

Плюс еще тильдовская админка часто глючила и теряла запросы от юзеров. Отвратительно.

Было решено делать более богатую форму, чтобы новый пользователь мог сразу ответить на базовые вопросы и сэкономить всем время для более важных дел. Плейстейшона, там, я не знаю.

## [Форма для новых клиентов](https://vas3k.ru/blog/nocode/#scroll170)

[Typeform](https://www.typeform.com/), [Google Forms](https://forms.new/), [GetForm](https://getform.io/), [SurveyMonkey](https://surveymonkey.com/), [Formstack](https://www.formstack.com/), [JotForm](https://www.jotform.com/), [Airtable Forms](https://try.airtable.com/forms), и.т.д.

Форма — это парадный вход, через который приходят новые пользователи. Поэтому конструкторов для них сейчас развелась аж куча. Многие конструкторы стали настолько крутыми, что научились даже принимать оплату в процессе заполнения.

Вот как всегда — делали поле для сбора имейлов, а получился банк. Опять.

Конструкторы в основном бывают двух видов:

### [На отдельной страничке](https://vas3k.ru/blog/nocode/#scroll180)

Пользователь переходит на страницу и заполняет форму там. Получается гибче, потому что обычно там есть красивые виджеты, многостраничные визарды и про-фичи типа оплаты.

Самый популярный: [Typeform](https://www.typeform.com/) (ну и гуглоформы, конечно)

### [Встраиваемые](https://vas3k.ru/blog/nocode/#scroll190)

Дают вам HTML-код для вставки на сайт, а данные из этой формы обрабатывают своим бекендом. Пример: [GetForm](https://getform.io/).

Плюсы: нативно, посетители даже не заметят разницы.

Минусы: бедненько.

The Virgin Радиобатоны

The Chad Онбординг

В простейшем случае, и те и другие сервисы просто пингуют вас по e-mail когда кто-то заполнил форму, ну и складывают всё в таблицу. Для начинающих этого достаточно.

Для более же сложных задач существуют интеграции, о которых поговорим ниже.

Но для начала, как только на сайте появляется форма, честный мейкер сразу вспомнит — надо написать политику обработки персональных данных. Иначе ОМОН, тюрьма, свободудавидычу.

## [Прайваси полиси](https://vas3k.ru/blog/nocode/#scroll200)

[getterms.io](https://getterms.io/), [avodocs.com](https://www.avodocs.com/), [Tilda (для России)](https://tilda.cc/ru/privacy-generator/)

Во всех популярных странах это уже стало обязательной частью сайта, если на нём есть хоть какая-то форма. В реальности людей, читающих этот пост, минимальный набор таков: **ФЗ-152 для России**, **GDPR для Европы** и **CPPA для США** (на самом деле Калифорнии, но другие все равно будут списывать с неё).

Для простоты можно ориентироваться на самый строгий закон — GDPR, и вы почти всегда будете совместимы с остальными. Добавьте к его требованиям особенности вашей страны и для старта хватит.

Лично я пользуюсь генераторами выше. Сейчас меня за это в комментах расстреляют, потому что, как известно, если ты не заплатил $2000 за бумажку обнаглевшим юристам, ты будешь гореть в аду. На эту тему ведутся бесконечные треды под тысячу страниц почти на каждом лигал-форуме, не буду тащить этот флейм сюда.

Перейдем к следующим шагам.

## [«У вас новая заявка!» ©](https://vas3k.ru/blog/nocode/#scroll210)

[Telegram Bots](https://core.telegram.org/bots), [MailChimp](https://mailchimp.com/), [Mailgun](https://www.mailgun.com/), [Sendgrid](https://sendgrid.com/), [Pushbullet](https://www.pushbullet.com/), [Twilio](https://www.twilio.com/)

Админки и имейлы это хорошо, но знаешь что еще лучше? Когда пятнадцать гаджетов пепикают по комнате в три часа ночи потому что китайский бот прислал тебе рекламу виагры! Жиза. MVP.

За свою карьеру мне подозрительно часто приходилось собирать пайплайны обработки условных «заявок» — новых покупок, обновлений или модерации контента. Каждые пару лет мода менялась и это делали по-новому — то хотели админку, то заводили общий e-mail, то выгружали в Salesforce.

Сегодня в моем личном топе — админка через телеграм-бота. Когда все входящие запросы сыпятся в общий чат, где мы можем их обсуждать, разгребать и принимать решения. Кто-то в прямом эфире, кто-то уже потом просматривает историю чата и корректирует если где-то вылезает косяк или появляется новая идея.

Я, мать его, обожаю асинхронные коммуникации!

В будущем это так же красиво масштабируется приглашением в чат новых сотрудников. Как воркеров добавляешь в кластер :D

В [Вастрик.Клубе](https://vas3k.club) так сделана вся модерация. Получилось настолько хорошо, что люди начали жаловаться, что у меня «нейросеть барахлит», когда их профиль отклоняли всего за несколько секунд.

Мне пришлось вставлять туда фиктивную задержку, чтобы люди **дольше ждали, но от этого становились счастливее.** Как путь до выдачи багажа в аэропортах специально делают длиннее чтобы человеки меньше стояли у ленты. Работает же.

Вот еще пять причин почему модерка в телеграме — офигенно:

Во-первых, **все модераторы видят действия других**.

Во-вторых, **удобно обсуждать происходящее в потоке**.

В-третьих, **интерфейс модерки доступен в любое время с любой платформы**. Больше нет вот этого любимого «мне надо открыть ноут чтобы в админке кнопку нажать».

В-четвертых, **у нас есть модераторы в разных часовых поясах**, что означает практически моментальную реакцию на запрос из любой точки нашего синего шарика.

В-пятых, **всё эти уведомления гибко настраиваются**, как я захочу. Мало какая админка даст мне настроить, скажем, «тихое время» для уведомлений.

Модераторы могут замечать ошибки других

Ну и я просто я фанбой телеграма. В реальности платформа не имеет большого значения.

Один чувак мне недавно рассказывал, как он завел американский номер на Twilio с автоответчиком, который притворялся колл-центром его «крупной компании» и говорил «все операторы заняты, оставьте сообщение» и потом парсил speech-to-text'ом запросы с номерами звонивших себе в эксель, тем самым «прощупывая рынок». Тоже красиво.

## [Автоматизируем онбординг](https://vas3k.ru/blog/nocode/#scroll220)

[Integromat](https://www.integromat.com/?pc=vas3k), [Zapier](https://zapier.com/), [Automate.io](https://automate.io/), [Parabola](https://parabola.io/), [IFTTT](https://ifttt.com/), [Clay](https://clay.run/) [n8n.io](https://n8n.io)

Вот приходят к нам новые ребята. Сначала мы просто общаемся по e-mail. Иногда, пройдя пару кругов предварительных ласк, они решают стать нашими клиентами. Таких храбрецов мы любим.

Для новых клиентов надо приготовить много всего. Поначалу мы делали это руками.

*   Заводили общую папочку для документов на дропбоксе с полезной на будущее структурой.
*   Заполняли и клали туда всякие доверенности, формы регистрации, согласие на обработку персональных данных, анкеты на поиск квартиры и другие бумажки, которые пригодятся любому понаеху. По приезду печатали их.
*   Создавали Trello-борду чтобы в хаосе релокации никто не забыл куда нужно сходить, что взять-принести и что от чего зависит.
*   Выдавали наш гайд по Берлину с лайфхаками, советами по выживанию и полезными связями.
*   Бронировали все нужные аппоинтменты.
*   Отправляли всё это по почте с объяснениями что, где и когда, в зависимости от выбранного пакета услуг и даты начала.

По идее всё это должны были закрывать сами релок-агенства, оставляя нам более творческие задачи, но примерно 80% из них не делали даже этого.

Очевидно, что это рутина, на которую в релок-корпорациях специально нанимают 9000 человек. Мы себе такого пока позволить не можем, поэтому такое надо первым делом автоматизировать.

За вечер с винцом я накидал вот такой воркфлоу в Integromat'е:

Позалипайте на картинку, я там подписал большую часть происходящего.

Несколько вещей еще не доделано, например, отправка имейла юзеру. Хочу сначала убедиться, что флоу работает хорошо и не творит фигню. Но пока наступило коронаговно и мне больше не на ком ставить эксперименты.

На самом деле, я просто пока не нашел как в интегромате создать таск, который будет вызываться только когда завершились все остальные ветки тасков, хехе.

**Самая важная часть: я наконец-то автоматизировал генерацию документов в PDF.** Представьте сколько бумажек должен заполнить славянин-понаех в бюрократической Германии, и как нужно изловчиться чтобы впихнуть «Russische Föderation» в поле «страна» на 10 символов.

Через пару вечеров начинаешь понимать скрытую суть названия Acrobat Reader.

Теперь же мне надо было лишь внести имя, фамилию и другие биоматериалы в табличку в Airtable, чтобы скрипт автоматически нагенерировал мне стопку PDF'ок со всеми нужными бумажкам. Останется их лишь распечатать и вручить ребятам. Офигенно.

Когда переезжали мы, кстати, наше релокейшен-агенство за ту же самую операцию взяло €900. Кек.

Поэтому теперь я называю это «скрипт на 900 евро».

## [Храним пользователей в CRM. Или?](https://vas3k.ru/blog/nocode/#scroll230)

[Salesforce](https://www.salesforce.com/eu/), [Zendesk](https://www.zendesk.com/), [HubSpot](https://www.hubspot.com/), [Pipedrive](https://www.pipedrive.com/), [Zoho CRM](https://www.zoho.com/crm/), и.т.д.

Пока наш бизнес маленький, каждый пользователь для нас уникален. Мы встречаемся, выясняем что людям хочется, рассказываем где и как мы можем помочь и строим план. Потому к нам и идут.

План нужно где-то хранить, а этапы как-то трекать. Как быть?

В этом месте 99% людей скажут — нужна CRM. У всех больших компаний есть CRM, ты тоже свою хочешь, не обманывай.

Не успеешь оглянуться как ты уже забыл все слова и бубнишь что-то про ВОРОНКИ, ЛИДЫ и ТАРГЕТИНГ, а у тебя уже IT-отдел на 10.000 человек, который пилит интеграцию с SAP.

Нас, конечно же, не миновал сей культ-карго.

CRM'ок на рынке больше, чем будильников на айфон. Всё наше айти началось с CRM, а если программист хоть раз не писал CRM — это плохой программист. Я вот не писал.

Три недели я убил чтобы выбрать подходящую. Нет, они все прекрасны, предлагают миллион фич, на любой ивент можно привязать автоматизации, хоть сделать чтобы Cow Bell звенел когда закрывается сделка, как в лучших домах Wall Street.

Про CRM можно написать целый пост. Но я быстро понял, что если ты готовишь яичницу, кухонный комбайн за миллион денег тебе не особо нужен.

CRM это как джира в мире сейлзов. А джиру не любит никто.

## [Нахер CRM. Собираем базу данных](https://vas3k.ru/blog/nocode/#scroll240)

[Airtable](https://airtable.com/invite/r/VH5W0L2K), [Actiondesk](https://www.actiondesk.io/), [Dashdash](https://dashdash.com/), [Tadabase](https://tadabase.io/), на худой конец [Google Spreadsheets](https://sheets.new)

Нам надо немного: иметь карточку пользователя, чтобы не забыть как его зовут, и список задачек типа «найти квартиру», «податься на ВНЖ», «проконсультировать как экономить на налогах», «взять деняк», которые двигаются из TODO в Done по всем заветам канбана.

Для такого издревле брали [Trello](https://trello.com/vas3k/recommend). Еще мой дед так делал.

CRM на Trello для самых маленьких. Внутри — подробное описание каждого индивидуального юзера с чеклистом этапов

Потом, правда, Trello купил Atlassian, и с тех пор с каждым годом брать его всё менее приятно. Поэтому мы оставили его для внешнего общения, а для внутряка собрали свою простенькую CRM'ку на Airtable.

Самая главная таблица со всеми пользователями и данными о них

Та же самая таблица, что выше, но в Kanban View

Общая база знаний, куда мы добавляем всякие проверенные компании, которые потом рекомендуем или, наоборот, категорически не рекомендуем

Получилось офигенно. В Airtable для каждой строчки в базе есть история изменений и даже можно писать к ней комментарии (мой PostgreSQL так не умеет!), которые мы используем чтобы вести заметки о пользователе.

Если сгруппировать таблицу пользователей по полю «Activity» и создать вьюху с типом «Kanban» — получится практически аналог Trello. Можно таскать юзеров из колонки «Новый» в колонку «В процессе», а оттуда в «Ищем квартиру» или «Done».

Чеклистов и голосовалок как в Trello нет, зато набор полей внутри и на карточке можно сделать абсолютно кастомным, добавить красивостей типа аватарок, ну и пригласить в комменты коллабораторов.

## [Страничка пользователя](https://vas3k.ru/blog/nocode/#scroll250)

[table2site](https://table2site.com/), [sheet2site](https://sheet2site.com/), [Airtable Proxy for Cloudflare](https://github.com/portable-cto/airtable-proxy-worker) и старый советский HTML

Потом я подумал. Было бы удобно давать пользователю секретную ссылку, где бы он сразу видел что происходит и имел в одном месте все шоткаты на трелло, дропбокс, инсайдерский гайд и другие штуки, что мы ему даём.

Технически, для этого надо просто взять строчку из таблицы Airtable и показать из неё нужные поля. Поля можно собрать формулами в новые колонки, что дает нам практически модный функциональный бекенд!

Airtable генерит уникальный Record ID для каждой записи, который я придумал использовать как хешкод для доступа в секретный «профиль» пользователя. Такая вот аутентификация для нищих. Или авторизация?

К сожалению, я знаю HTML, потому мне было проще за полчаса собрать такую страничку на коленке, чем изучать конструкторы. Но они есть.

Никакого рокетсаенса, садишься и придумываешь. Надо нарисовать кнопки, выбрать иконки, положить на них ссылки или данные из Airtable.

Сверху страницы пользователь видит, что мы правильно обо всём договорились (и без опечаток — это важно), а снизу отображается текущий статус. Я даже завёл отдельную колонку для эмодзи, которую назначаю каждому новому юзеру. Ведь все знают, что эмодзи делают нашу никчёмную жизнь хоть немного веселее.

# [Подборки инструментов](https://vas3k.ru/blog/nocode/#scroll260)

Выше я накидал много инструментов под свои нужды, но реальных юзкейсов всегда гораздо больше и в одном посте их не перечесть. Справиться с этим мне поможет одно из популярных развлечений в no-code — делать no-code подборки no-code инструментов.

Тем самым адепты как бы говорят миру — «смотрите, мы можем сделать сайт со списком, а значит это уже почти конкурент Booking.com». Произошел дизрапт индустрии.

Но для новичков такие подборки очень полезны. Вот самые популярные:

Позалипайте вечерок. Там иногда и правда встречаются прикольные идеи.

В комментах можете накидать еще.

## [Чисто показать мастерство](https://vas3k.ru/blog/nocode/#scroll270)

Самое простое и приятное, что вы можете себе собрать чтобы хорошенько поиграться с новыми бензопилами — бота, который будет говорить вам «Доброе утро» и присылать полезную информацию на сегодня.

Вот бот для Лены, который пишет ей каждое утро в 9:00, кроме воскресенья (в Германии это священный выходной даже для ботов).

Я сам кайфую от него по утрам потому что туда постится наш общий календарь, а мой мозг всегда категорически отказывается запоминать любые дела, если ему не напомнить о них с утра.

Остальное сделано чисто чтобы показать мастерство. Статистика по сайту мотивирует работать над ним, а погода на сегодня полезна чисто чтобы планировать день.

Накидайте еще идей что можно выводить в утренний телеграм-дайджест. Ну и дарю идею для бота, да.

### [Airtable](https://vas3k.ru/blog/nocode/#scroll290)

**Задача:** хранить и обрабатывать данные.

Данные — основа любого приложения. Airtable сделал базу данных для здоровых людей. Мне иногда хочется все свои базы заменить на подобный интерфейс.

По сути это Эксель на стероидах. Да, у него есть небольшой порог вхождения, мне потребовалось пара вечеров чтобы со всем разобраться. Но теперь я могу собрать из него что захочу — хоть админку, хоть CRM, хоть BI-отдел для бедных.

Главный минус Airtable для меня: **ограничение на 3 запроса в секунду через API**. То есть напрямую читать из него данные и показывать их на сайте — не очень идея. Хотя для маленькой странички, на которую заходят три человека в день, даже этого будет достаточно, если вы не делаете по несколько запросов за раз.

Для обхода этого ограничения уже написаны специальные прокси. Но это уже совсем не no-code.

Но если отойти от канона, вы найдете кучу увлекательных кирпичиков для строительства. Тот же [Airtable <-> CloudFlare](https://github.com/portable-cto/airtable-proxy-worker) прокси, который запускает распределённого воркера на инфраструктуре CloudFlare, который берет данные из таблички и раздаёт их вам как API.

> Сраная эксель-табличка превращается в распределённый бекенд для пет-проджектов с отличной админкой и серверами по всему миру за $5 в месяц.
> 
> Как тебе такое, Олег?

### [Integromat](https://vas3k.ru/blog/nocode/#scroll300)

**Задача:** объединять все сервисы сценариями.

И его аналоги, который я перечислял выше. Использую их все понемногу чтобы получить максимальное покрытие сервисов, ну и тупо чтобы за них не платить :D

Простенькие интеграции у меня в Zapier. Для алертов — IFTTT. Integromat же пока раздражает меньше всех.

Иногда мне даже хочется самому писать под него мини-функции и соединять их мышкой в сценарии. Я бы накодил себе такой рой ботов на все случаи жизни и натравливал бы их на рутину.

Но мы это уже проходили с AWS Lambda, потом во времена хайпа по API-хабам, и всем всё равно как-то насрать. Наверное потому что программисты моментально объявляют зашкваром всё, для чего не надо писать три экрана лапши на механической клавиатуре, и не хотят в этом участвовать.

Штош.

Зато самые упоротые ребята строят из имеющихся блоков какие-то дикие воркфлоу с машинным обучением в процессе. Респектую.

Из интересных аналогов можно еще глянуть опенсорсный [n8n.io](https://n8n.io).

### [Mailgun](https://vas3k.ru/blog/nocode/#scroll310)

**Задача:** рассылать и процессить письма.

Для меня он занимает золотую середину между совсем уж потребительскими конструкторами типа [MailerLite](https://www.mailerlite.com/invite/e9af8166f2ce5) и [MailChimp](https://mailchimp.com/) (которыми я тоже пользуюсь когда надо), и ультра-гиковским, зато дешевым [Amazon SNS](https://aws.amazon.com/sns/).

Пользуюсь майлганом лет семь. Рассылку Вастрик.Инсайд делал именно через него.

Пару месяцев назад он очень меня разочаровал, отменив бесплатные лимиты писем, тем самым резко повысив цены. Притом, что конкуренты, наборот, снизили цены. Но я всё-таки решил его упомянуть по старой памяти.

Майлган даёт базовый набор инструментов: списки рассылки, формы отписки, обработку «мертвых» адресов и статистику кликов. Но вот письма придется верстать самому. Для этого тоже есть неплохие сервисы типа [Litmus](https://litmus.com/community/templates) с готовыми бесплатными шаблонами от коммьюнити.

Интеграции с популярными сервисами тоже присутствуют. Если вы совсем не хотите писать никакой код, даже на HTML — так тоже можно.

Киллер-фичей когда-то для меня стал парсинг входящих писем. Можно настроить майлган принимать почту на вашем домене, вот только вместо того, чтобы складывать письма в ящик, он будет дёргать вебхук и передавать JSON с информацией о письме куда вы ему прикажете.

С помощью этого я когда-то сделал парсинг баланса своего банка. Я учился на втором курсе и тогда не было всяких Тиньковых и Револютов. Тогда даже оповещение по СМС было платной фичей. Зато банк честно присылал мне письма каждый раз когда я платил по карте.

Я быстро завернул письма от банка в Mailgun и потом обычной регуляркой вытаскивал остаток чтобы отобразить его на планшете в [Дом-дурачок 1.0](https://vas3k.ru/blog/homesillyhome/). Работало идеально.

Сейчас такое можно собрать в том же Integromat'е, накидав буквально три блока мышкой.

### [Gumroad](https://vas3k.ru/blog/nocode/#scroll320)

**Задача:** продавать что-то цифровое.

Пример сервиса, который решает одну задачу и делает это так охуенно, что я даже не жалею платить ему жирную комиссию. По сути невсратый Etsy. Для тех, кто хочет продавать свои книги, рисунки, музыку, курсы или тупо PDF'ки, и не думать об этом. Я сам как раз такой.

Интерфейс офигенный, народ покупает, все интеграции на месте. Можно делать промокоды, акции, продавать паками и слать юзерам имейлы, если они того захотят. Либо запускать по триггерам вереницу своих воркфлоу.

Короче, я теперь по-умолчанию иду туда, когда надо что-то продать.

Ну а если посчитать все комиссии платежных шлюзов, затраты на создание и поддержание своего магазина, то пока ты не продаешь на тысячи долларов, выгоднее пользоваться такими вот платформами.

Пару месяцев назад я понял, что англоговорящая аудитория не очень любит донатить, но обожает что-то покупать. Потому я поставил ссылки на платное скачивание epub-версии в каждый пост на vas3k.com и наторговал американцам постов на $170+ долларов. ОКУЛА БУЗИНЕССА 🦈

### [Coda](https://vas3k.ru/blog/nocode/#scroll330)

**Задача:** сделать умные документы.

В этом блоге запрещено слово Notion, но тут придётся. Coda — программируемый Notion. У меня реально есть подозрение, что из неё можно собрать свою Jira и Confluence, не хуже оригинала (куда уж хуже). А это хороший знак.

Coda делает упор именно на данные, экшены, таблицы и связи между ними. Ты можешь ввести данные в табличку в одном документе, а на другой странице при этом обновится месячная сумма сделок, например. Или специальный человек получит имейл когда ты пометил что-то как Done.

Главный минус — у Coda достаточно высокий порог вхождения. Она требует изобретательности, которая, опять же, свойственна тем самым «однопроцентникам» из сказок фанатов. Так что Coda скорее всего так и останется непонятным никем стартапом, либо пивотнётся в «консьюмерский продукт».

Из мыслящих в ту же сторону можно глянуть [monday.com](https://monday.com/) и белорусский [Fibery](https://fibery.io/).

### [Cloudflare](https://vas3k.ru/blog/nocode/#scroll340)

**Задача:** иметь «взрослую» инфрастуктуру когда ты маленький.

Он заменил мне:

*   **Let's Encrypt** — потому что взял на себя SSL-сертификаты. Прощай, постоянно отваливающийся из крона certbot.
*   **Google Analytics** — потому что мне достаточно видеть лишь количество посетителей и географию, я не хочу чтобы гугл следил что читают мои юзеры
*   **CDN**, **HTTP/3** и **компрессию** — у меня никогда их не было. Все картинки в блоге раньше летели к вам напрямую из дата-центра в Нюрнберге. А тут вдруг всё дают и бесплатно. Чоб не взять.
*   **Защиту от ботов** — я ненавижу капчи и принудительные регистрации на сайтах, но если их не делать, тебя просто смоет спам-ботами с виагрой. Алгоритмы CloudFlare тоже не панецея, но они заметно снижают количество говнотрафика.

Минусы CloudFlare давно известны и обсосаны в блогах. Если коротко: корпорации — плохо, MITM — несекьюрно, а еще иногда он частично лежит и тянет за собой пол интернета. Последнее для меня пока самый главный минус.

Скриншот внутренней статистики CloudFlare. Пик — выход этого поста. Для блогов и пет-проджектов более чем достаточно

🔒 Тут инфа только для членов [Вастрик.Клуба](https://vas3k.ru/club/)  
[Войти](https://vas3k.ru/auth/login/)

Для связи → [\[email protected\]](https://vas3k.ru/cdn-cgi/l/email-protection#cda0a88dbbacbefea6e3bfb8) [Телеграм-бот](https://t.me/to_vas3k_bot) [Твиттер](https://twitter.com/vas3k)

Пожалуйста, ставьте ссылку на vas3k.ru при использовании материалов и цитировании. Перепечатка постов возможна, но с разрешения. Пишите на почту.",null,undefined
2019-01-11T22:48:40.000Z,https://medium.com/@me_37286/yoni-goldberg-javascript-nodejs-testing-best-practices-2b98924c9347,false,"[""testing"",""best""]",article,Node.js & JavaScript Testing Best Practices (2020),null,pocket,null,"# Node.js & JavaScript Testing Best Practices (2020)

by [Yoni Goldberg](https://medium.com/@me_37286), [medium.com](http://medium.com)  
February 2, 2020 01:02 PM

# Node.js & JavaScript Testing Best Practices (2020)

## ⚠️🎊📢 Important Note: This Article [became a GitHub repository with additional 15 best practices](https://github.com/goldbergyoni/javascript-testing-best-practices/) and community discussions

If you’re looking for the most recent and comprehensive version — I suggest switching to the [GitHub version](https://github.com/goldbergyoni/javascript-testing-best-practices/)

# Short Intro

As an independent Node.js consultant I’m engaged and review 10+ projects every year and my customers justifiably ask to focus on testing. A few months ago, I started to document here the insights and repeating errors I observe at the field and suddenly it piled-up into 30 testing best practices.

The ideas below span topics like choosing the right test types, coding them correctly, measuring their effectiveness and hosting them in a CI/CD pipeline in the right way. Some examples are illustrated using Jest, others with Mocha — this post is less about tooling and more about the right approach and techniques.

My name is [Yoni Goldberg](https://goldbergyoni.com/), an independent Node.JS consultant and the [co-author of Node.js best practices](https://github.com/i0natan/nodebestpractices). I work with customers at the USA, Europe, and Israel on polishing their Node.js applications. [Among my service](https://goldbergyoni.com/5-nodejs-services-that-i-offer/) are also test planning, test review, and CI/CD setup. [**Follow me on Twitter**](https://twitter.com/goldbergyoni) **⭐️**

📗 **Want to take your testing skills to the extreme?** Consider visiting my comprehensive course [‘Testing Node.js & JavaScript From A To Z’](https://www.testjavascript.com)

**Reviewed & improved by Bruno Scheufler** 🙏

# ⚪️ 0. The Golden Rule: Testing must stay dead -simple and clear as day

Are you familiar with that smiley friend, family member or maybe a movie character who is always available to spare his good working hands, 24/7 assisting when you need him tuned with positive energy yet asking so little for himself? This how a testing code should be designed — easy, valuable and fun. This can be achieved by selectively cherry-picking techniques, tools and test targets that are cost-effective and provide great ROI. Test only as much as needed, strive to keep it nimble, sometimes it’s even worth dropping some tests and trade reliability for agility and simplicity.

Testing should not be treated as a traditional application code — a typical team is challenged with maintaining its main application anyway (the features we code and sell), it could not tolerate additional complex “project”. Should testing grow to be an additional source of pain — it will get abandoned or greatly slow down the development.

In that sense, the testing code must stay dead-simple, with minimal dependencies, abstractions, and levels of indirection. One should look at a test and get the intent instantly. Most of the advice below are derivatives of this principle

# \*\*\*Section 1️⃣ : The Test Anatomy\*\*\*

# ⚪ ️ 1. Include 3 parts in each test name

**✅ Do:** A test report should tell whether the current application revision satisfies the requirements for the people who are not necessarily familiar with the code: the tester, the DevOps engineer who is deploying and the future you two years from now. This can be achieved best if the tests speak at the requirements level and include 3 parts:

**(1)** What is being tested? For example, the ProductsService.addNewProduct method

**(2)** Under what circumstances and scenario? For example, no price is passed to the method

**(3)** What is the expected result? For example, the new product is not approved

**❎ Otherwise:** A deployment just failed, a test named “Add product” failed. Does this tell you what exactly is malfunctioning?

**☺️ Doing It Right Example:** A test name that constitutes 3 parts

**️☺ Doing It Right Example:** The test report resembles the requirements document

# ⚪️ 2. Describe expectations in a product language: use BDD-style assertions

**✅ Do:** Coding your tests in a declarative-style allows the reader to get the grab instantly without spending even a single brain-CPU cycle. When you write an imperative code that is packed with conditional logic the reader is thrown away to an effortful mental mood. In that sense, code the expectation in a human-like language, declarative BDD style using _expect_ or _should_ and not using custom code. If Chai & Jest don’t include the desired assertion and it’s highly repeatable, consider [extending Jest matcher](https://jestjs.io/docs/en/expect#expectextendmatchers) (Jest) or writing a [custom Chai plugin](https://www.chaijs.com/guide/plugins/)

**❎ Otherwise:** The team will write less test and decorate the annoying ones with .skip()

**😕 Anti Pattern Example:** The reader must skim through not so short, and imperative code just to get the test story

**☺️ Doing It Right Example:** Skimming through the following declarative test is a breeze

# ⚪️ 3. Lint with testing-dedicated plugins

**✅ Do:** A set of ESLint plugins were built specifically for inspecting the tests code patterns and discover issues. For example, [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) will warn when a test is written at the global level (not a son of a describe() statement) or when tests are [skipped](https://mochajs.org/#inclusive-tests) which might lead to a false belief that all tests are passing. Similarly, [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest) can, for example, warn when a test has no assertions at all (not checking anything)

**❎ Otherwise:** Seeing 90% code coverage and 100% green tests will make your face wear a big smile only until you realize that many tests aren’t asserting for anything and many test suites were just skipped. Hopefully, you didn’t deploy anything based on this false observation

**😕 Anti Pattern Example:** A test case full of errors, luckily all are caught by Linters

# ⚪️ 4. Stick to black-box testing: Test only public methods

**✅ Do:** Testing the internals brings huge overhead for almost nothing. If your code/API deliver the right results, should you really invest your next 3 hours in testing HOW it worked internally and then maintain these fragile tests? Whenever a public behavior is checked, the private implementation is also implicitly tested and your tests will break only if there is a certain problem (e.g. wrong output). This approach is also referred to as behavioral testing. On the other side, should you test the internals (white box approach) — your focus shifts from planning the component outcome to nitty-gritty details and your test might break because of minor code refactors although the results are fine- this dramatically increases the maintenance burden

**❎ Otherwise:** Your test behaves like the [child who cries wolf](https://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf): shoot out loud false-positive cries (e.g., A test fails because a private variable name was changed). Unsurprisingly, people will soon start to ignore the CI notifications until someday a real bug will get ignored…

**😕 Anti Pattern Example:** A test case is testing the internals for no good reason

# **️**️5. Choose the right test doubles: Avoid mocks in favor of stubs and spies

**✅ Do:** Test doubles are a necessary evil because they are coupled to the application internals, yet some provide an immense value ([Read here a reminder about test doubles: mocks vs stubs vs spies](https://martinfowler.com/articles/mocksArentStubs.html)). However, the various techniques were not born equal: some of them, spies and stubs, are focused on testing the requirements but as an **inevitable side-effect** they also slightly touch the internals. Mocks, on the contrary side, **are focused on testing the internals** — this brings huge overhead as explained in the bullet “Stick to black box testing”.

Before using test doubles, ask a very simple question: Do I use it to test functionality that appears, or could appear, in the requirements document? If no, it’s a smell of white-box testing.

For example, if you want to test what your app behaves reasonably when the payment service is down, you might stub the payment service and trigger some ‘No Response’ return to ensure that the unit under test returns the right value. This checks our **application behavior/response/outcome** under certain scenarios. You might also use a spy to assert that an email was sent when that service is down — this is again a behavioral check which is likely to appear in a requirements doc (“Send an email if payment couldn’t be saved”). On the flip side, if you mock the Payment service and ensure that it was called with the right JavaScript types — then your test is focused on internal things that got nothing with the application functionality and are likely to change frequently

❎ **Otherwise:** Any refactoring of code mandates searching for all the mocks in the code and updating accordingly. Tests become a burden rather than a helpful friend

**😕 Anti-pattern example:** Mocks focus on the internals

**☺️ Doing It Right Example:** spies are focused on testing the requirements but as a side-effect are unavoidably touching to the internals

# ⚪️ 6. Don’t “foo”, use realistic input data

**✅ Do:** Often production bugs are revealed under some very specific and surprising input — the more realistic the test input is, the greater the chances are to catch bugs early. Use dedicated libraries like [Faker](https://www.npmjs.com/package/faker) to generate pseudo-real data that resembles the variety and form of production data. For example, such libraries will generate random yet realistic phone numbers, usernames, credit card, company names, and even ‘lorem ipsum’ text. Consider even importing real data from your production environment and use in your tests. Want to take it to the next level? see next bullet (property-based testing)

❎ **Otherwise:** All your development testing will falsely seem green when you use synthetic inputs like “Foo” but then production might turn red when a hacker passes-in a nasty string like “@3e2ddsf . ##’ 1 fdsfds . fds432 AAAA”

**😕 Anti-Pattern Example: A test suite that passes due to non-realistic data**

**☺Doing It Right Example: Randomizing realistic input**

# 📗 Liked the content here and want more?

Get 10+ hours course on Node.js quality and testing? Visit my online course [‘Testing Node.js & JavaScript From A To Z’](https://www.testjavascript.com)

# 7\. Test many input combinations using Property-based testing

✅ **Do:** Typically we choose a few input samples for each test. Even when the input format resembles real-world data (see bullet ‘Don’t foo’), we cover only a few input combinations _(method(‘’, true, 1), method(“string” , false” , 0))_, However, in production, an API that is called with 5 parameters can be invoked with thousands of different permutations, one of them might render our process down ([see Fuzz Testing](https://en.wikipedia.org/wiki/Fuzzing)). What if you could write a single test that sends 1000 permutations of different inputs automatically and catches for which input our code fails to return the right response? Property-based testing is a technique that does exactly that: by sending all the possible input combinations to your unit under test it increases the serendipity of finding a bug. For example, given a method — addNewProduct(id, name, isDiscount) — the supporting libraries will call this method with many combinations of (number, string, boolean) like (1, “iPhone”, false), (2, “Galaxy”, true). You can run property-based testing using your favorite test runner (Mocha, Jest, etc) using libraries like [js-verify](https://github.com/jsverify/jsverify) or [testcheck](https://github.com/leebyron/testcheck-js) (much better documentation). Update: [Nicolas Dubien](https://medium.com/u/5bed092e8bd0?source=post_page-----2b98924c9347----------------------) suggests in the comments below to [checkout fast-check](https://github.com/dubzzz/fast-check#readme) which seems to offer some additional features and also to be actively maintained

❎ **Otherwise:** Unconsciously, you choose the test inputs that cover only code paths that work well. Unfortunately, this decreases the efficiency of testing as a vehicle to expose bugs

**☺ Doing It Right Example:** Testing many input permutations with “mocha-testcheck”

# ⚪️ 8. Stay within the test: Minimize external helpers and abstractions

✅ **Do:** By now, it’s probably obvious that I’m advocating for dead-simple tests: The team can’t afford another software project that demands a mental effort to understand the code. Michael Lync explains this in his [great post](https://mtlynch.io/good-developers-bad-tests/):

> **Good production code is well-factored; good test code is _obvious…_**When you write a test, think about the next developer who will see the test break. They don’t want to read your entire test suite, and they certainly don’t want to read a whole inheritance tree of test utilities.

Let the reader get the whole story without leaving the test, minimize utils, hooks, or any external effect on a test case. Too many repetitions and copy-pasting? OK, a test can leave with one external helper and stay obvious. But when it grows to three and four helpers and hooks it implies that it a complex structure is slowly forming

❎ **Otherwise:** Suddenly found yourself with  4 helpers per test suite, 2 of them inheriting from base util, a lot of setup and tearing-up hooks? congratulation, you just won another challenging project to maintain, you might write tests soon against your test suite

**😕 Anti-Pattern Example:** Fancy and indirect test structure. Do you understand the test case without navigating to external dependencies?

**☺ Doing It Right Example:** A test you may understand without hopping through different files

# ⚪️ 9. Avoid global test fixtures and seeds, add data per-test

✅ **Do:** Going by the golden rule (bullet 0), each test should add and act on its own set of DB rows to prevent coupling and easily reason about the test flow. In reality, this is often violated by testers who seed the DB with data before running the tests ([also known as ‘test fixture’](https://en.wikipedia.org/wiki/Test_fixture)) for the sake of performance improvement. While performance is indeed a valid concern — it can be mitigated (see “Component testing” bullet), however, test complexity is a much painful sorrow that should govern other considerations most of the time. Practically, make each test case explicitly add the DB records it needs and act only on those records. If performance becomes a critical concern — a balanced compromise might come in the form of seeding the only suite of tests that are not mutating data (e.g. queries)

❎ **Otherwise:** Few tests fail, a deployment is aborted, our team is going to spend precious time now, do we have a bug? let’s investigate, oh no — it seems that two tests were mutating the same seed data

**😕 Anti Pattern Example:** tests are not independent and rely on some global hook to feed global DB data

**☺Doing It Right Example:** We can stay within the test, each test acts on its own set of data

# ⚪️ 10. Don’t catch errors, expect them

✅ **Do:** When trying to assert that some input triggers an error, it might look right to use try-catch-finally and assert that the catch clause was entered. The result is an awkward and verbose test case (example below) that hides the simple test intent and the result expectations

A more elegant alternative is the using the one-line dedicated Chai assertion: _expect(method).to.throw (or in Jest: expect(method).toThrow())._ It’s absolutely mandatory to also ensure the exception contains a property that tells the error type, otherwise given just a generic error the application won’t be able to do much rather than show a disappointing message to the user

❎ **Otherwise:** It will be challenging to infer from the test reports (e.g. CI reports) what went wrong

**😕 Anti-pattern Example:** A long test case that tries to assert the existence of error with try-catch

**☺Doing It Right Example:** A human-readable expectation that could be understood easily, maybe even by QA or technical PM

# ⚪️10. Tag your tests

✅ **Do:** Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with Mocha: mocha — grep ‘sanity’

❎ **Otherwise:** Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests

☺️ **Doing It Right Example:** Tagging tests as ‘#cold-test’ allows the test runner to execute only fast tests (Cold===quick tests that are doing no IO and can be executed frequently even as the developer is typing)

# 11\. Other generic good testing hygiene

✅ **Do:** _This post is focused on testing advice that is related to, or at least can be exemplified with Node JS._  _This bullet, however, groups few_ **_non-Node_** _related tips that are well-known_

Learn and practice [TDD principles](https://www.sm-cloud.com/book-review-test-driven-development-by-example-a-tldr/) — they are extremely valuable for many but don’t get intimidated if they don’t fit your style, you’re not the only one. Consider writing the tests before the code in a [red-green-refactor](https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html) style, ensure each test checks exactly one thing, when you find a bug — before fixing write a test that will detect this bug in the future, let each test fail at least once before turning green, avoid any dependency on the environment (paths, OS, etc)

❎ **Otherwise:** You‘ll miss pearls of wisdom that were collected for decades

# \*\*\*Section 2️⃣ : Test Types\*\*\*

# ⚪️ 12. Enrich your testing portfolio: Look beyond unit tests and the pyramid

✅ **Do:** The [testing pyramid](https://martinfowler.com/bliki/TestPyramid.html), though 10 years old, is a great and relevant model that suggests three testing types and influences most developers’ testing strategy. At the same time, more than  a handful of shiny new testing techniques emerged and are hiding in the shadows of the testing pyramid. Given all the dramatic changes that we’ve seen in the recent 10 years (Microservices, cloud, serverless), is it even possible that one quite-old model will suit \*all\* types of applications? shouldn’t the testing world consider welcoming new testing techniques?

Don’t get me wrong, in 2019 the testing pyramid, TDD and unit tests are still a powerful technique and are probably the best match for many applications. Only like any other model, despite its usefulness, [it must be wrong sometimes](https://en.wikipedia.org/wiki/All_models_are_wrong). For example, consider an IOT application that ingests many events into a message-bus like Kafka/RabbitMQ, which then flow into some data-warehouse and are eventually queried by some analytics UI. Should we really spend 50% of our testing budget on writing unit tests for an application that is integration-centric and has almost no logic? As the diversity of application types increase (bots, crypto, Alexa-skills) greater are the chances to find scenarios where the testing pyramid is not the best match.

It’s time to enrich your testing portfolio and become familiar with more testing types (the next bullets suggest few ideas), mind models like the testing pyramid but also match testing types to real-world problems that you’re facing (‘Hey, our API is broken, let’s write consumer-driven contract testing!’), diversify your tests like an investor that build a portfolio based on risk analysis — assess where problems might arise and match some prevention measures to mitigate those potential risks

**A word of caution:** the TDD argument in the software world takes a typical false-dichotomy face, some preach to use it everywhere, others think it’s the devil. Everyone who speaks in absolutes is wrong :\]

❎ **Otherwise:** You’re going to miss some tools with amazing ROI, some like Fuzz, lint, and mutation can provide value in 10 minutes

**☺ Doing It Right Example:** [Cindy Sridharan](https://medium.com/u/87c8c84f24b1?source=post_page-----2b98924c9347----------------------) suggests a rich testing portfolio in her amazing post [‘Testing Microservices — the sane way’](https://medium.com/@copyconstruct/testing-microservices-the-sane-way-9bb31d158c16)

**☺️Example:** [YouTube: “Beyond Unit Tests: 5 Shiny Node.JS Test Types (2018)” (Yoni Goldberg)](https://www.youtube.com/watch?v=-2zP494wdUY&feature=youtu.be)

# ⚪️ 13. Component testing might be your best affair

✅ **Do:** Each unit test covers a tiny portion of the application and it’s expensive to cover the whole, whereas end-to-end testing easily covers a lot of ground but is flaky and slower, why not apply a balanced approach and write tests that are bigger than unit tests but smaller than end-to-end testing? Component testing is the unsung song of the testing world — they provide the best from both worlds: reasonable performance and a possibility to apply TDD patterns + realistic and great coverage.

Component tests focus on the Microservice ‘unit’, they work against the API, don’t mock anything which belongs to the Microservice itself (e.g. real DB, or at least the in-memory version of that DB) but stub anything that is external like calls to other Microservices. By doing so, we test what we deploy, approach the app from outwards to inwards and gain great confidence in a reasonable amount of time.

❎ **Otherwise:** You may spend long days on writing unit tests to find out that you got only 20% system coverage

**☺ Doing It Right Example:** [Supertest](https://www.npmjs.com/package/supertest) allows approaching Express API in-process (fast and cover many layers)

# ⚪️ 14. Ensure new releases don’t break the API using consumer-driven contracts

✅ **Do:** So your Microservice has multiple clients, and you run multiple versions of the service for compatibility reasons (keeping everyone happy). Then you change some field and ‘boom!’, some important client who relies on this field is angry. This is the Catch-22 of the integration world: It’s very challenging for the server side to consider all the multiple client expectations — On the other hand, the clients can’t perform any testing because the server controls the release dates. [Consumer-driven contracts and the framework PACT](https://docs.pact.io/) were born to formalize this process with a very disruptive approach — not the server defines the test plan of itself rather the client defines the tests of the… server! PACT can record the client expectation and put in a shared location, “broker”, so the server can pull the expectations and run on every build using PACT library to detect broken contracts — a client expectation that is not met. By doing so, all the server-client API mismatches are caught early during build/CI and might save you a great deal of frustration

❎ **Otherwise:** The alternatives are exhausting manual testing or deployment fear

**☺ Doing It Right Example:**

# ⚪️ 15. Test your middlewares in isolation

✅ **Do:** Many avoid Middleware testing because they represent a small portion of the system and require a live Express server. Both reasons are wrong — Middlewares are small but affect **all or most** of the requests and can be tested easily as pure functions that get {req,res} JS objects. To test a middleware function one should just invoke it and spy [(using Sinon for example)](https://www.npmjs.com/package/sinon) on the interaction with the {req,res} objects to ensure the function performed the right action. The library [node-mock-http](https://www.npmjs.com/package/node-mocks-http) takes it even further and factors the {req,res} objects along with spying on their behavior. For example, it can assert whether the http status that was set on the res object matches the expectation (See example below)

❎ **Otherwise:** A bug in Express middleware === a bug in all or most requests

**☺ Doing It Right Example:** Testing middleware in isolation without issuing network calls and waking-up the entire Express machine

# ⚪️ 16. Measure and refactor using static analysis tools

✅ **Do:** Using static analysis tools helps by giving objective ways to improve code quality and keep your code maintainable. You can add static analysis tools to your CI build to abort when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity) and follow the history and progress of code issues. Two examples of tools you can use are [Sonarqube](https://www.sonarqube.org/) (2,600+ [stars](https://github.com/SonarSource/sonarqube)) and [Code Climate](https://codeclimate.com/) (1,500+ [stars](https://github.com/codeclimate/codeclimate))

Credit: [Keith Holliday](https://github.com/TheHollidayInn)

❎ **Otherwise:** With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix

**☺ Doing It Right Example:** CodeClimat, a commercial tool that can identify complex methods:

# ⚪️ 17. Check your readiness for Node-related chaos

✅ **Do:** Weirdly, most software testings are about logic & data only, but some of the worst things that happen (and are really hard to mitigate ) are infrastructural issues. For example, did you ever test what happens when your process memory is overloaded, or when the server/process dies, or does your monitoring system realizes when the API becomes 50% slower?. To test and mitigate these type of bad things — [Chaos engineering](https://principlesofchaos.org/) was born by Netflix. It aims to provide awareness, frameworks and tools for testing our app resiliency for chaotic issues. For example, one of its famous tools, [the chaos monkey](https://github.com/Netflix/chaosmonkey), randomly kills servers to ensure that our service can still serve users and not relying on a single server (there is also a Kubernetes version, [kube-monkey](https://github.com/asobti/kube-monkey), that kills pods). All these tools work on the hosting/platform level, but what if you wish to test and generate pure Node chaos like check how your Node process copes with uncaught errors, unhandled promise rejection, v8 memory overloaded with the max allowed of 1.7GB or whether your UX stays satisfactory when the event loop gets blocked often? to address this I’ve written, [node-chaos](https://github.com/i0natan/node-chaos-monkey) (alpha) which provides all sort of Node-related chaotic acts

❎ **Otherwise:** No escape here, Murphy’s law will hit your production without mercy

**☺Doing It Right Example:** Node-chaos can generate all sort of Node.js pranks so you can test how resilience is your app to chaos

# \*\*\*Section 3️⃣: Measuring Test Effectiveness\*\*\*

# ⚪️ 18. Get enough coverage for being confident, ~80% seems to be the lucky number

✅ **Do:** The purpose of testing is to get enough confidence for moving fast, obviously the more code is tested the more confident the team can be. Coverage is a measure of how many code lines (and branches, statements, etc) are being reached by the tests. So how much is enough? 10–30% is obviously too low to get any sense about the build correctness, on the other side 100% is very expensive and might shift your focus from the critical paths to the exotic corners of the code. The long answer is that it depends on many factors like the type of application — if you’re building the next generation of Airbus A380 than 100% is a must, for a cartoon pictures website 50% might be too much. Although most of the testing enthusiasts claim that the right coverage threshold is contextual, most of them also mention the number 80% as a thumb of a rule ([Fowler: “in the upper 80s or 90s”](https://martinfowler.com/bliki/TestCoverage.html)) that presumably should satisfy most of the applications.

Implementation tips: You may want to configure your continuous integration (CI) to have a coverage threshold [(Jest link)](https://jestjs.io/docs/en/configuration.html#collectcoverage-boolean) and stop a build that doesn’t stand to this standard (it’s also possible to configure threshold per component, see code example below). On top of this, consider detecting build coverage decrease (when a newly committed code has less coverage) — this will push developers raising or at least preserving the amount of tested code. All that said, coverage is only one measure, a quantitative based one, that is not enough to tell the robustness of your testing. And it can also be fooled as illustrated in the next bullets

❎ **Otherwise:** Confidence and numbers go hand in hand, without really knowing that you tested most of the system — there will also be some fear. and fear will slow you down

**☺ Example: A typical coverage report**

**☺ Doing It Right Example: Setting up coverage per component (using Jest)**

# ⚪️ 19. Inspect coverage reports to detect untested areas and other oddities

✅ **Do:** Some issues sneak just under the radar and are really hard to find using traditional tools. These are not really bugs but more of surprising application behavior that might have a severe impact. For example, often some code areas are never or rarely being invoked — you thought that the ‘PricingCalculator’ class is always setting the product price but it turns out it is actually never invoked although we have 10000 products in DB and many sales… Code coverage reports help you realize whether the application behaves the way you believe it does. Other than that, it can also highlight which types of code is not tested — being informed that 80% of the code is tested doesn’t tell whether the critical parts are covered. Generating reports is easy — just run your app in production or during testing with coverage tracking and then see colorful reports that highlight how frequent each code area is invoked. If you take your time to glimpse into this data — you might find some gotchas

❎ **Otherwise:** If you don’t know which parts of your code are left un-tested, you don’t know where the issues might come from

**😕 Anti-Pattern Example:** What’s wrong with this coverage report? based on a real-world scenario where we tracked our application usage in QA and find out interesting login patterns (Hint: the amount of login failures is non-proportional, something is clearly wrong. Finally it turned out that some frontend bug keeps hitting the backend login API)

# ⚪️ 20. Measure logical coverage using mutation testing

✅ **Do:** The Traditional Coverage metric often lies: It may show you 100% code coverage, but none of your functions, even not one, return the right response. How come? it simply measures over which lines of code the test visited, but it doesn’t check if the tests actually tested anything — asserted for the right response. Like someone who’s traveling for business and showing his passport stamps — this doesn’t prove any work done, only that he visited few airports and hotels.

Mutation-based testing is here to help by measuring the amount of code that was actually TESTED not just VISITED. [Stryker](https://stryker-mutator.io/) is a JavaScript library for mutation testing and the implementation is really neat:

(1) it intentionally changes the code and “plants bugs”. For example the code _newOrder.price===0_ becomes _newOrder.price!=0._ This “bugs” are called **mutations**

_(2)_ it runs the tests, if all succeed then we have a problem — the tests didn’t serve their purpose of discovering bugs, the mutations are so-called **survived.** If the tests failed, then great, the mutations were **killed.**

Knowing that all or most of the mutations were killed gives much higher confidence than traditional coverage and the setup time is similar

❎ **Otherwise:** You’ll be fooled to believe that 85% coverage means your test will detect bugs in 85% of your code

**😕 Anti Pattern Example:** 100% coverage, 0% testing

**Doing It Right Example:** Stryker reports, a tool for mutation testing, detects and counts the amount of code that is not tested (Mutations)

# \*\*\*Section 4️⃣ : CI & Other Quality Measures\*\*\*

# ⚪️ 21. Enrich your linters and abort builds that have linting issues

✅ **Do:** Linters are a free lunch, with 5 min setup you get for free an auto-pilot guarding your code and catching significant issue as you type. Gone are the days where linting was about cosmetics (no semi-colons!). Nowadays, Linters can catch severe issues like errors that are not thrown correctly and losing information. On top of your basic set of rules (like [ESLint standard](https://www.npmjs.com/package/eslint-plugin-standard) or [Airbnb style](https://www.npmjs.com/package/eslint-config-airbnb)), consider including some specializing Linters like [eslint-plugin-chai-expect](https://www.npmjs.com/package/eslint-plugin-chai-expect) that can discover tests without assertions, [eslint-plugin-promise](https://www.npmjs.com/package/eslint-plugin-promise?activeTab=readme) can discover promises with no resolve (your code will never continue), [eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) which can discover eager regex expressions that might get used for DOS attacks, and [eslint-plugin-you-dont-need-lodash-underscore](https://www.npmjs.com/package/eslint-plugin-you-dont-need-lodash-underscore) is capable of alarming when the code uses utility library methods that are part of the V8 core methods like Lodash.\_map(…)

❎ **Otherwise:** Consider a rainy day where your production keeps crashing but the logs don’t display the error stack trace. What happened? Your code mistakenly threw a non-error object and the stack trace was lost, a good reason for banging your head against a brick wall. A 5min linter setup could detect this TYPO and save your day

**😕 Anti Pattern Example:** The wrong Error object is thrown mistakenly, no stack-trace will appear for this error. Luckily, ESLint catches the next production bug

# ⚪️ 22. Shorten the feedback loop with local developer-CI

✅ **Do:** Using a CI with shiny quality inspections like testing, linting, vulnerabilities check, etc? Help developers run this pipeline also locally to solicit instant feedback and shorten the [feedback loop](https://www.gocd.org/2016/03/15/are-you-ready-for-continuous-delivery-part-2-feedback-loops/). Why? an efficient testing process constitutes many and iterative loops: (1) try-outs -> (2) feedback -> (3) refactor. The faster the feedback is, the more improvement iterations a developer can perform per-module and perfect the results. On the flip, when the feedback is late to come fewer improvement iterations could be packed into a single day, the team might already move forward to another topic/task/module and might not be up for refining that module.

Practically, some CI vendors (Example: [CircleCI load CLI](https://circleci.com/docs/2.0/local-cli/)) allow running the pipeline locally. Some commercial tools like [wallaby provide highly-valuable & testing insights](https://wallabyjs.com/) as a developer prototype (no affiliation). Alternatively, you may just add npm script to package.json that runs all the quality commands (e.g. test, lint, vulnerabilities) — use tools like [concurrently](https://www.npmjs.com/package/concurrently) for parallelization and non-zero exit code if one of the tools failed. Now the developer should just invoke one command — e.g. ‘npm run quality’ — to get instant feedback. Consider also aborting a commit if the quality check failed using a githook ([husky can help](https://github.com/typicode/husky))

❎ **Otherwise:** When the quality results arrive the day after the code, testing doesn’t become a fluent part of development rather an after the fact formal artifact

**☺ Doing It Right Example:** npm scripts that perform code quality inspection, all are run in parallel on demand or when a developer is trying to push new code

# ⚪️ 23. Perform e2e testing over a true production-mirror

**✅ Do:** End to end (e2e) testing are the main challenge of every CI pipeline — creating an identical ephemeral production mirror on the fly with all the related cloud services can be tedious and expensive. Finding the best compromise is your game: [Docker-compose](https://serverless.com/) allows crafting isolated dockerized environment with identical containers using a single plain text file but the backing technology (e.g. networking, deployment model) is different from real-world productions. You may combine it with [‘AWS Local’](https://github.com/localstack/localstack) to work with a stub of the real AWS services. If you went serverless multiple frameworks like [serverless](https://serverless.com/) and [AWS SAM](https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html) allows the local invocation of Faas code.

The huge Kubernetes eco-system is yet to formalize a standard convenient tool for local and CI-mirroring though many new tools are launched frequently. One approach is running a ‘minimized-Kubernetes’ using tools like [Minikube](https://kubernetes.io/docs/setup/minikube/) and [MicroK8s](https://microk8s.io/) which resemble the real thing only come with less overhead. Another approach is testing over a remote ‘real-Kubernetes’, some CI providers (e.g. [Codefresh](https://codefresh.io/)) has native integration with Kubernetes environment and make it easy to run the CI pipeline over the real thing, others allow custom scripting against a remote Kubernetes.

**❎ Otherwise:** Using different technologies for production and testing demands maintaining two deployment models and keeps the developers and the ops team separated

**☺️ Example:** a CI pipeline that generates Kubernetes cluster on the fly [(Credit: Dynamic-environments Kubernetes)](https://container-solutions.com/dynamic-environments-kubernetes/)

deploy:  
stage: deploy  
image: registry.gitlab.com/gitlab-examples/kubernetes-deploy  
script:  
\- ./configureCluster.sh $KUBE\_CA\_PEM\_FILE $KUBE\_URL $KUBE\_TOKEN  
\- kubectl create ns $NAMESPACE  
\- kubectl create secret -n $NAMESPACE docker-registry gitlab-registry --docker-server=""$CI\_REGISTRY"" --docker-username=""$CI\_REGISTRY\_USER"" --docker-password=""$CI\_REGISTRY\_PASSWORD"" --docker-email=""$GITLAB\_USER\_EMAIL""  
\- mkdir .generated  
\- echo ""$CI\_BUILD\_REF\_NAME-$CI\_BUILD\_REF""  
\- sed -e ""s/TAG/$CI\_BUILD\_REF\_NAME-$CI\_BUILD\_REF/g"" templates/deals.yaml | tee "".generated/deals.yaml""  
\- kubectl apply --namespace $NAMESPACE -f .generated/deals.yaml  
\- kubectl apply --namespace $NAMESPACE -f templates/my-sock-shop.yaml  
environment:  
name: test-for-ci

# ⚪️ 24. Parallelize test execution

**✅ Do:** When done right, testing is your 24/7 friend providing almost instant feedback. In practice, executing 500 CPU-bounded unit test on a single thread can take too long. Luckily, modern test runners and CI platforms (like [Jest](https://github.com/facebook/jest), [AVA](https://github.com/avajs/ava) and [Mocha extensions](https://github.com/yandex/mocha-parallel-tests)) can parallelize the test into multiple processes and achieve significant improvement in feedback time. Some CI vendors do also parallelize tests across containers (!) which shortens the feedback loop even further. Whether locally over multiple processes, or over some cloud CLI using multiple machines — parallelizing demand keeping the tests autonomous as each might run on different processes

**❎ Otherwise:** Getting test results 1 hour long after pushing new code, as you already code the next features, is a great recipe for making testing less relevant

**☺️ Doing It Right Example:** Mocha parallel & Jest easily outrun the traditional Mocha thanks to testing parallelization ([Credit: JavaScript Test-Runners Benchmark)](https://medium.com/dailyjs/javascript-test-runners-benchmark-3a78d4117b4)

# ⚪️ 25. Stay away from legal issues using license and plagiarism check

**✅ Do:** Licensing and plagiarism issues are probably not your main concern right now, but why not tick this box as well in 10 minutes?  A bunch of npm packages like [license check](https://www.npmjs.com/package/license-checker) and [plagiarism check](https://www.npmjs.com/package/plagiarism-checker) (commercial with free plan) can be easily baked into your CI pipeline and inspect for sorrows like dependencies with restrictive licenses or code that was copy-pasted from Stackoverflow and apparently violates some copyrights

**❎ Otherwise:** Unintentionally, developers might use packages with inappropriate licenses or copy-paste commercial code and run into legal issues

**☺️ Doing It Right Example:**

//install license-checker in your CI environment or also locally  
npm install -g license-checker//ask it to scan all licenses and fail with exit code other than 0 if it found unauthorized license. The CI system should catch this failure and stop the build  
license-checker --summary --failOn BSD

# ⚪️26. Constantly inspect for vulnerable dependencies

✅ **Do:** Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community tools such as [npm audit](https://docs.npmjs.com/getting-started/running-a-security-audit), or commercial tools like [snyk](https://snyk.io/) (offer also a free community version). Both can be invoked from your CI on every build

**❎ Otherwise:** Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious

**☺️ Example:** NPM Audit results

# ⚪️ 27. Automate dependency updates

✅ **Do:** Yarn and npm latest introduction of package-lock.json introduced a serious challenge (the road to hell is paved with good intentions) — by default now, packages are no longer getting updates. Even a team running many fresh deployments with ‘npm install’ & ‘npm update’ won’t get any new updates. This leads to subpar dependant packages versions at best or to vulnerable code at worst. Teams now rely on developers goodwill and memory to manually update the package.json or use tools [like ncu](https://www.npmjs.com/package/npm-check-updates) manually. A more reliable way could be to automate the process of getting the most reliable dependency versions, though there are no silver bullet solutions yet there are two possible automation roads: (1) CI can fail builds that have obsolete dependencies — using tools like ‘[npm outdated](https://docs.npmjs.com/cli/outdated)’ or ‘npm-check-updates (ncu)’ . Doing so will enforce developers to update dependencies. (2) Use commercial tools that scan the code and automatically send pull requests with updated dependencies. One interesting question remaining is what should be the dependency update policy — updating on every patch generates too many overhead, updating right when a major is released might point to an unstable version (many packages found vulnerable on the very first days after being released, [see the](https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/) eslint-scope incident). An efficient update policy may allow some ‘vesting period’ — let the code lag behind the @latest for some time and versions before considering the local copy as obsolete (e.g. local version is 1.3.1 and repository version is 1.3.8)

❎ **Otherwise:** Your production will run packages that have been explicitly tagged by their author as risky

**☺️ Example:** [ncu](https://www.npmjs.com/package/npm-check-updates) can be used manually or within a CI pipeline to detect to which extent the code lag behind the latest versions

# ⚪️ 28. Other, non-Node related, CI tips

✅ **Do:** _This post is focused on testing advice that is related to, or at least can be exemplified with Node JS._  _This bullet, however, groups few_ **_non-Node_** _related tips that are well-known_

1.  Use a declarative syntax. This is the only option for most vendors but older versions of Jenkins allows using code or UI
2.  Opt for a vendor that has native Docker support
3.  Fail early, run your fastest tests first. Create a ‘Smoke testing’ step/milestone that groups multiple fast inspections (e.g. linting, unit tests) and provide snappy feedback to the code committer
4.  Make it easy to skim-through all build artifacts including test reports, coverage reports, mutation reports, logs, etc
5.  Create multiple pipelines/jobs for each event, reuse steps between them. For example, configure a job for feature branch commits and a different one for master PR. Let each reuse logic using shared steps (most vendors provide some mechanism for code reuse
6.  Never embed secrets in a job declaration, grab them from a secret store or from the job’s configuration
7.  Explicitly bump version in a release build or at least ensure the developer did so
8.  Build only once and perform all the inspections over the single build artifact (e.g. Docker image)
9.  Test in an ephemeral environment that doesn’t drift state between builds. Caching node\_modules might be the only exception

❎ **Otherwise:** You‘ll miss years of wisdom

# ⚪️ 29. Build matrix: Run the same CI steps using multiple Node versions

✅ **Do:** Quality checking is about serendipity, the more ground you cover the luckier you get in detecting issues early. When developing reusable packages or running a multi-customer production with various configuration and Node versions, the CI must run the pipeline of tests over all the permutations of configurations. For example, assuming we use mySQL for some customers and Postgres for others — some CI vendors support a feature called ‘Matrix’ which allow running the suit of testing against all permutations of mySQL, Postgres and multiple Node version like 8, 9 and 10. This is done using configuration only without any additional effort (assuming you have testing or any other quality checks). Other CIs who doesn’t support Matrix might have extensions or tweaks to allow that

❎ **Otherwise:** So after doing all that hard work of writing testing are we going to let bugs sneak in only because of configuration issues?

**☺ Example:** Using Travis (CI vendor) build definition to run the same test over multiple Node versions

language: node\_js  
node\_js:  
  - ""7""  
  - ""6""  
  - ""5""  
  - ""4""  
install:  
  - npm install  
script:  
  - npm run test

# Thank You. Other articles you might like

*   📗 **Want to take your testing skills to the extreme?** Consider visiting my comprehensive course [‘Testing Node.js & JavaScript From A To Z’](https://www.testjavascript.com)
*   [Checklist: Node.js production best practices (August 2018)](https://goldbergyoni.com/checklist-best-practice-of-node-js-in-production/)
*   [19 ways to become a better Node.js developer in 2019](https://medium.com/@me_37286/19-ways-to-become-a-better-node-js-developer-in-2019-ffd3a8fbfe38)
*   [Node.js security best practices (September 2018)](https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d)
*   [YouTube: 5 advanced and shiny testing techniques](https://youtu.be/-2zP494wdUY)
*   [Node.js best practices — 79 best practices for a robust Node application](https://github.com/i0natan/nodebestpractices)

_⭐_ Want more? [follow me on Twitter](https://twitter.com/goldbergyoni)_⭐_

✏️ Have your own testing tip? [PR here and I](https://github.com/i0natan/nodebestpractices)’ll be sure to update this article ✏️",null,undefined
2020-06-02T01:50:42.000Z,https://twitter.com/nuAiry/status/1267634714317373440,true,"[""best""]",tweet,nuAiry_1267634714317373440,nuAiry,twitter,null,"готова молиться на эту девочку https://t.co/8aTKH3pqnC
![](https://pbs.twimg.com/ext_tw_video_thumb/1267634641990758401/pu/img/4-s-38Ull6UUrW6p.jpg)
",ЗОВИ МЕНЯ ПАРИЖ,undefined
2020-02-14T12:16:00.000Z,https://twitter.com/o_gabsferreira/status/1228291799912996864,true,"[""best""]",tweet,o_gabsferreira_1228291799912996864,o_gabsferreira,twitter,null,"npm install https://t.co/an2DM9MK19
![](https://pbs.twimg.com/ext_tw_video_thumb/1228291791172046849/pu/img/vX7yv0yt8aHBcy_Y.jpg)
",Gabs Ferreira,undefined
2020-04-04T11:38:31.000Z,https://twitter.com/ohhiiana/status/1246401760442355712,true,"[""best""]",tweet,ohhiiana_1246401760442355712,ohhiiana,twitter,null,"я щас задохнусь https://t.co/EKS295nfel
![](https://pbs.twimg.com/ext_tw_video_thumb/1246401598303109122/pu/img/vO26Pq6F7IiFHxi3.jpg)
",как низко пало русское дворянство,undefined
2020-03-01T14:20:25.000Z,https://twitter.com/ONEXXIII/status/1234121315201830913,true,"[""best""]",tweet,ONEXXIII_1234121315201830913,ONEXXIII,twitter,null,"Проиграл дважды нахуй https://t.co/DiF3wlrNCp
![](https://pbs.twimg.com/media/ESB6ypwW4AErXps.jpg)
",исксствнный интллкт,undefined
2020-05-22T09:28:49.000Z,https://twitter.com/Orbycius/status/1263763738005561344,true,"[""best""]",tweet,Orbycius_1263763738005561344,Orbycius,twitter,null,"Hello #AndroidDev or anyone really... Do you need more than one try to plug a #USB cable? In case you didn't know, the USB logo goes up and the manufacturer logo goes down. More in page 95 of the USB specification https://t.co/ZMRLiQGsWl https://t.co/2OpPSkC2iF
![](https://pbs.twimg.com/media/EYnHF5IXsAAB93h.jpg)
",Marcos Holgado #BLM,undefined
2020-06-13T09:56:12.000Z,https://paw.cloud/,false,[],article,Paw – The most advanced API tool for Mac,null,pocket,null,"# Paw – The most advanced API tool for Mac

by PAW Inc., [paw.cloud](http://paw.cloud)

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

## Your **all-in-one** tool for API development

[](https://paw.cloud/#client)

#### [HTTP Client](https://paw.cloud/#client)

[Send all kinds of HTTP requests! Test and iterate on your own APIs or explore new ones. Paw has a full-featured visual editor and HTTP toolset.](https://paw.cloud/#client)

[](https://paw.cloud/#description)

#### [API Description](https://paw.cloud/#description)

[Describe your API while you test it. Paw natively supports JSON Schema and is fully compliant with Swagger and RAML descriptions.](https://paw.cloud/#description)

[](https://paw.cloud/#teams)

#### [Teamwork](https://paw.cloud/#teams)

[Keep everyone on the same page. Synchronize your API test configurations, make conflict-free changes and get real-time updates.](https://paw.cloud/#teams)

* * *

* * *

## **Describe** your APIs

Visually build your API requests and describe each parameter through textual descriptions, typing, and constraints. Paw natively supports JSON Schema and can import and generate fully compliant Swagger, RAML, and API Blueprint description files.

[Learn more about API description in Paw](https://paw.cloud/description)

* * *",null,undefined
2020-02-29T10:21:16.000Z,https://twitter.com/pepernoria/status/1233698746418028544,true,"[""best""]",tweet,pepernoria_1233698746418028544,pepernoria,twitter,null,"никто:
мои ебучие нервы: https://t.co/EzDdcGp3OG
![](https://pbs.twimg.com/ext_tw_video_thumb/1233697792545218560/pu/img/PErmOTgvoAOhVO0G.jpg)
",пеперония,undefined
2015-09-16T22:30:19.000Z,https://docs.google.com/document/d/1K-mKOqiUiSjgZTEscBLjtjd6E67oiK8H2ztOiq5tigk/pub,false,"[""best""]",article,"Perf Audits for Blink & DevTools, CNet, Wikipedia, Time",null,pocket,null,"# Perf Audits for Blink & DevTools, CNet, Wikipedia, Time

by Paul Irish, [docs.google.com](http://docs.google.com)  
February 18, 2017

For a start-to-finish guide of using DevTools in your own perf audit see pfeldman’s [sfgate.com DevTools walkthrough](https://www.google.com/url?q=https://docs.google.com/a/chromium.org/document/d/1viSX0vNYPeDB9iWLaOyAg6Fa6u0gufVB4lmbcrWhYSM/edit&sa=D&ust=1514024135799000&usg=AFQjCNHtADq7zE8g0gJrWE2PA1IWBls63w)

Feb 2015  
Paul Irish  
This doc is public

Protip for reading this doc:

Turn off Print Layout

Read on!

Profiled Feb 18th, Paul Irish

Open up CNet, and tap on the hamburger menu to enjoy a really painful jank during the nav slideout:

Up front is a lot of JS cost adding latency before we see any effect. Then a 200ms-long animation that appears to do layout in every frame.

Clearly, we’ve blown our Midnight Train budgets of 100ms for input latency and 6ms of work per animation frame.

Let's dig in and see what's up!

## Input latency

Let's zoom to the first chunk:

We have NewRelic wrapping BugSnag wrapping setTimeout.

It'sGoogle Adsense doing 24ms of work, every 1000ms.But in this case it fired right as my finger hit the hamburger icon.

Next, we have some mousedownhandlers:

Looking closer, one of the handlers is some event delegation looking for a very specific selector (\[data-user-show\] which I've never spotted in their DOM). But, obviously handling this mousedown delays every touch.

Finally we get to the clickhandler that does the work:

The revised flame chart coloring (by file) makes it easy to see our code vs jquery.js.

Clicking into the layout we see that our layout thrashing comes from the same source line (118):

Here it is:

this.$element.on(""click"",function(){  
   e(""body"").toggleClass(""m-view-nav""); window.scrollTo(0,0);  
})

They're using a class on the <body> to trigger the effect. Obviously this invalidates the style & layout for the entire page. :/

Then, they curiously call scrollTo(0,0); This is to jump the page back to the top of the screen because the nav, at rest, is positioned up there:

However this scrollTo(0,0)ends up forcing a 25ms layout they probably didn't need.

## Layout animation

Once the ""m-view-nav"" class is in place, the animation gets triggered.

The nav panel  gets a CSS transition on layout property left:

And the content-panel also shimmies to the left as well:

So they have two elements, independently animating with the same duration, and hopefully it looks like they move in concert.

[Watch the full 60fps video of the 15fps sidenav slide.](https://www.google.com/url?q=https://drive.google.com/file/d/0BzvYe7bYFf--UVFWckFqdkdBa0k/view?usp%3Dsharing&sa=D&ust=1514024135810000&usg=AFQjCNH0W3frfkzmQsySnk5Oea9Q8-anjw)

## Insights

### Developer-facing insights

*   Don't use event delegation for any events that can add to input latency (touchstart, touchmove, touchend, mousedown, click).

*   Take inventory of all event handlers and determine if they're necessary to run then.

*   Don't animate elem.style.left. [Animate transforms.](https://www.google.com/url?q=http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/&sa=D&ust=1514024135811000&usg=AFQjCNHZXvcYC-cfVTDngxgRecSRCutzxw)
*   Don't use something so global as document.body.className for nav toggling as it invalidates the world

### DevTools-facing insights

*   Need to see when the finger lands to evaluate latency easier.
*   Could use easier mechanism to match the “m-view-nav” toggleClass call with styles/elements affected.
*   Could use easier mechanism to investigate JS stacks and sources repeatedly.
*   We know when layout animations happen. We know when \`left\` is used in css transitions. We need to warn the developer.

### Blink-facing insights

*   How would they achieve this effect the right way?

*   css transition on transform:translate on a container that's around both the content & nav
*   position:fixed to keep the nav next to the content regardless of scroll position

*   (added) scrollTo(0,0) should be a no-op if we’re already at 0,0

*   (added) scrollTo shouldn’t force layout

# CNet Scrolling

Profiled Feb 24th, Paul Irish

Test page: [www.cnet.com/news/netpicks-whats-new-on-netflix-and-amazon-online-for-march-2015/](https://www.google.com/url?q=http://www.cnet.com/news/netpicks-whats-new-on-netflix-and-amazon-online-for-march-2015/&sa=D&ust=1514024135815000&usg=AFQjCNEQcjpqmKlgSDXB92yuEdw9iQJerw)

Fling it to scroll it. We'll scroll at maybe 13 FPS, if we're lucky.

We have some touch handlers that push us into slow scrolling mode.

#### touchstart

*   \[data-user-show\] returns! querySelectorAll(""\[data-user-show\]"") is checked during touchstart. It takes a decent 8ms to look up.

*   jQuery mobile binds to touchstart. They’re greedy with their binds

*   They don’t do any work during the handler, so it’s a noop.

*   Youtube Instream videos records that a finger has touched the screen.

#### touchmove

*   jQuery mobile tracks the distance moved by the finger.

#### touchend

*   jQuery mobile tracks the finger has left the screen and issues a virtual mouseup event

Plenty, plus a lot of handlers on scroll itself.   This scroll handler below was on the shorter side (21ms) of ones I’m seeing (avg 35ms).

### Scroll handler walkthrough

I investigated each handler to see what they’re up to:

1.  Luckily in this case it’s disabled.
2.  When it’s enabled it heads down this path:

2.  The :visible selector check requires a getComputedStyle, and the other metrics look at scrollTop() and elem.offsetTop repeatedly

3.  YouTube Instream Video Ads. Runs 6ms of script.

1.  6ms is a lot of time to spend in V8, and all it really winds up doing is… this.keyValues\[‘touch’\] = 0 + 1;

4.  Google Adsense is the big poppa of the bunch, and it wants to know about every scroll, too.

1.  They collect a bunch of metrics then postMessage it to their iframe.
2.  Takes ~25ms on my phone.

5.  Yahoo Ads

1.  Checks to see if an element is within the viewport. Asks for pageXOffset and innerWidth

6.  YouTube Instream video ads. Back again

All of these run on every scroll event. It appears that the scroll is blocked on completion of these handlers.

### In-page JS profiling

NewRelic wraps around every event handler in the page and grabs Date.now() on both sides of each.

### setInterval costs

Every 500ms, Yahoo Ads runs this, querying scroll and size metrics of their iframe.

var b \= a.iframeRelativeScrollPosition();.adsendPostMessage({  
   action:""scroll"",  
   scrollTop: b\[0\],  
   scrollLeft: b\[1\],  
   height: a.iframeRelativeHeight(),  
   width: a.diframeRelativeWidth(d)  
});

Every 1000ms, Google Adsense runs 30-40ms of JS.

Every 1000ms, another Google Ad network runs a good amount of JS.

My favorite: a loading spinner, that’s a canvas element, is rotated with css transforms every 42ms, via setInterval.

Obviously 42.

## Insights

### Developer-facing insights

*   Tell Google Adsense this is unacceptable. :)
*   Take inventory of extra handlers and remove unnecessary ones (scrollstart, Lazyload)
*   Change New Relic configuration to only add an instrumented profiler to 1% of users. (Ideally)

### DevTools-facing insights

*   Get developers attention with poor scrolling performance and nudge them towards what is adding most of the cost
*   Summarize event handler cost by file, to easily blame 3rd party scripts

### Blink-facing insights

*   Element visibility API?
*   Synchronous, cancelable, blocking event handlers are the worst, amirite?
*   We appear to be handling the scroll event synchronously. Why?
*   What else?

# Time.com Scrolling

Profiled Feb 2015, Paul Irish & Pavel Feldman

Scrolling[time.com/3703410/uma-thurman-face-red-carpet/](https://www.google.com/url?q=http://time.com/3703410/uma-thurman-face-red-carpet/&sa=D&ust=1514024135835000&usg=AFQjCNHVhO-S0TdmEvIOmGsCsa6MmYE7jw) during loading on Clank is a great devil case. I regularly see it paused for 5 seconds.

I recommend you turn on “Show Touches” in Developer Options. You can leave it on permanently.

It helps you evaluate latency between Android OS receiving your touch and the result.

For this audit we won’t look at scrolling during load, but just a scroll fling, well after the page has loaded.

Looks like a lot of JS. Let’s validate its the JS causing the problem. Turn on Show Scrolling Bottlenecks:

We’ve got a mousewheel handler somewhere. Hard to see exactly where, though.

We can actually look a little deeper here.

If I record Timeline with Paint checkbox checked, we can inspect the layer tree and investigate if any have scroll scrolling behavior:

It’s telling us we’ve got at least a gallery lightbox with a touch handler. And all that pink indicates more than just that element has a slow scrolling reason.

So, Let’s see what’s going on in our blocking event handlers

### 6 touchstart/touchmove handlers

*   evaluating visibility of article, likely for if it was read

*   getsBoundingClientRect() call within each
*   First, setActiveArticle(), then record it in analytics and conditionally place an ad if things are onscreen or off.

*   evaluating visibility of an ad rotator
*   evaluating visibility of some other things.
*   seeing if the user is active. (bound to \[""resize"", ""scroll"", ""touchmove""\])
*   call maybeLoadHiddenImages() if its time to lazy load images
*   30ms to do a very expensive jQuery DOM traversal: $(""body"").find(""img"").not(""\[data-loaded\]"")

*   on every touchstart, yes.

### 3 scroll handlers

*   exact same article visibility check.
*   infinite scroll checks on viewport size and element positions to potentially load new content
*   the scroll handlers are the most costly but sometimes fire before touchmove and appear to block

### 1 mousewheel handler

*   maybeLoadHiddenImages() again.

## Sayonara synchronous handlers

I wasn’t happy with all these handlers so I nuked them all to see a difference.

You can navigate all event handlers via the listing per element or use the Console to grab them and trash them.

After looking at the yellow haze of unclean slow scrolling for a while,

the event handlers are gone and the content emerges.

## Before and After Heavy Input Handlers

Scrolling the page gently, the start of the touch, visible on Uma, is synchronized.

Here, we can see the impact of those handlers more clearly.

The same scroll now in Timeline…

Before:

After:

This is already at least a 2X improvement. Great stuff, but towards the end some JS comes and ruins the 60 FPS party.

Digging into these frames we have a 23ms scroll handlers and a 6ms rAF.

Are these long scroll handlers busting our frame budget repeatedly?

For simplicity I’ll remove these handlers as well:

Any better?

Not really.

There’s a lot of timer-based JS running.

On a hunch, I recorded the page at idle, not touching anything.

busy busy busy!

All this work comes from some 3rd party code, churning in the background:

And the recurring rAF is a Flash → HTML5 runtime, somewhere on this page.

### Paint & Compositing

But, lets back up, all that green paint work I saw during scrolling..  

Let’s see what it’s for.

Flip on Paint Profiler to see what we were so busy with:

  
We’re repainting this one ad a few frames in a row.

It’s not terribly expensive, just 3.5ms each time, but we’re paint storming on it. Not sure why.

But in addition to these paints, we spend a lot of time Compositing.

Why so much compositing cost?

Layers. Layers like mad.

The side nav that’s not on screen has 28 layers.  Youch.

## Finishing up

We can still do better. Let’s get to our goals.

There was one ad network firing a visibility checker every 100ms. I ripped it out and tried my scroll again:

Oh yes.

And as a last-ditch effort, I display:none’d the two layer-heavy DOM subtrees to see if I could reduce the compositing costs.

Yup. Nice reduction in my green jank. That’ll do.

So, looking at our grand before/after…

Obviously, there’s a lot less work happening in each frame. We haven’t disabled all javascript, just removed our handlers for touch, wheel and scroll. And nuked a few very costly setIntervals.

But the important thing is we’ve finally hit our Midnight Train goal of 60 FPS, and believe me, the scrolling experience feels so so good.

### Update (March 18th):

The inability to scroll at the start isn’t fully an input latency concern.

The full page’s content isn’t available. Below, a 4s gap between these paints.

Inside these two frames is a bunch of JS taking up 4200ms:

The JS ends up being Backbone doing clientside templating of ads and navigation menus. Luckily, the primary article’s content was already delivered in the HTML.

## Insights

### Developer-facing insights

*   Costly event handlers introduce latency to scroll and reduce the framerate post-fling.
*   Reduce layer count if possible.
*   Any flash ad that’s being transpiled to HTML5 clientside is more costly than it should be. Ask your advertisers to do it right.

### Blink-facing questions/insights

*   What is the best approach for handling this long-article infinite scroll setup?
*   What API should ad networks polling for user activity use?
*   How best to load images lazily, so they don’t influence pageload but don’t require touch/scroll handlers?
*   ViewportObserver?
*   Flush the document to render before issuing DOMContentLoaded?
*   …?

# Wikipedia Webapp Startup

We investigated the desktop experience of the wikipedia visual editor along with their engineers.

Test page: [https://en.wikipedia.org/wiki/Barack\_Obama?veaction=edit](https://www.google.com/url?q=https://en.wikipedia.org/wiki/Barack_Obama?veaction%3Dedit&sa=D&ust=1514024135856000&usg=AFQjCNEuOK0-CnMxsGSj4K_PkSqkyLhEhg)

### Let's take a timeline.

*   Profiling the full load of [https://en.wikipedia.org/wiki/Barack\_Obama?veaction=edit](https://www.google.com/url?q=https://en.wikipedia.org/wiki/Barack_Obama?veaction%3Dedit&sa=D&ust=1514024135857000&usg=AFQjCNEimAklNOr_yUPkcmdQY-4m-iCidg)  starting up.
*   Timeline: Causes & JS Profiler on.

[full size](https://www.google.com/url?q=http://gyazo.com/cc6fc0f9eb2bad8fafae4ab5c43e621f&sa=D&ust=1514024135858000&usg=AFQjCNEtqMbXEJnRXmS_cRdrGhxhqpUgAg)

The result gives us about three equal size sections of activity. Let's look at each third as an act.

#### First Act

*   avoid $.getVisibleText . It requires a very heavy recalculate style because its using the :hidden selector.

*   Recommendation: Use your own logic to compute visibility that doesn't rely on getcomputedstyle, or defer the work.

*   jQuery.filter is called via ve.dm.MWBlockImageNode.static.toDataElement. It is hugely hugely expensive.

*   A closer look and it's this:  
      $imgWrapper = $figure.children('a, span').eq(0),

 $img = $imgWrapper.children('img').eq(0),

        $caption = $figure.children('figcaption').eq(0),

*   DOM size in general is going to be a big overarching factor here.

*   Recommendation: Kill any superfluous spans/divs you don't absolutely need

*   Sizzle is repeating a support.getById call. Probably a bug. If you go straight qSA you'll avoid a lot of cost
*   We're generating a lot of garbage so the GCs are huge. Lower-priority, but something to eventually chase down
*   Don't use jquery.html() inside of inside of ve.dm.InternalList.convertToData. You don't need it and innerHTML is massively faster.

*   Recommendation: Use innerHTML just once instead of stamping out html into DOM many many times. (not 100% you are doing it multiple times though…) either way its taking forever

#### Second Act

*   The next 1/3 of editor initialization is mostly time inside of ve.init.Target.createSurface calls. Treewalking?

*   Use console.profile() / profileEnd() to capture just this section and view in JS Profiler (heavy)

*   More massive recalc styles.
*   Lots of $(elem).hide() and some $(elem).css(property) coming from VeUIContext and OO.ui.ListToolGroup.

*   jQuery animations triggering recalc style
*   More $(elem).hide()

*   jQuery asks for computedstyle when you tell it to hide an element. It’s a problem.

*   Wikpedia feedback: ""yeah, there are a lot of $.show / $.hide calls that are wasteful because they're toggling the visibility of something we know is hidden or visible""

*   oo.copy does a lot of JS only work. called enough to warrant micro-optimizations

*   Wikpedia feedback: ""oo.copy is used to deep-copy the entire VisualEditor DOM so we can round-trip it once to confirm that the editor can handle it without introducing corruption. I'm working on eliminating that entirely.""

*   another style recalc forced by ve.ce.Surface.showSelection, because of  this.nativeSelection.addRange(nativeRange);

#### Third Act

*   More of this ve.dm.MWReferenceNode.static.toDomElements action

*   $(el).html(str) non-stop. Use innerHTML instead, try to add it to the DOM once.

*   the very end OO.ui.PopupWidget.toggle ends up triggering another massive recalc style.

*   you need to determine visibility on your own so that you don't require on getComputedStyle for that

## Summary for Wikipedia developers

*   jQuery is not your friend here.

*   Eradicate :hidden , hide() and toggle() from the codebase.
*   jQuery is doing too much magic around querySelectorAll. Just use it alone.
*   Don't use $(elem).html(str) for DOM insertion, use innerHTML or DOM methods. Use doc fragments if necessary. Try to add to the page at once.

*   Way too much forced style recalc and layout. Track down all the reasons why.
*   Track visibility on your own, do not use getComputedStyle to ask.
*   Don't build the DOM just to hide() it.
*   DOM size is too big.

*   If you can't kill the recalc styles need to isolate the recalc costs better. Iframes? :/

### Update (Feb 25th), Wikipedia dev team hard at work:

Here, Wikipedia is annotating the Timeline recording's phases of load with post-its and markers.

How does one print out the timeline? With Wikipedia, we found a creative solution: Inspect the inspector, use Device Mode in desktop mode, stretch viewport to 9000px wide, grab the Timeline's <canvas>, toDataURL() it, set to img\[src\], download, print.

### Update (March 19), Plenty of fixes are in

[https://phabricator.wikimedia.org/project/board/831/query/JnI8\_pet.gGL/](https://www.google.com/url?q=https://phabricator.wikimedia.org/project/board/831/query/JnI8_pet.gGL/&sa=D&ust=1514024135866000&usg=AFQjCNEawHEs45HvRhjATzYwU-CrbiglTw) is tracking the eng team’s progress. They’re already made large and substantial improvements. I’ve seen the performance speed up by over 2x already.

[Addy Osmani’s recent talk from jQuery UK](https://www.google.com/url?q=https://speakerdeck.com/addyosmani/devtools-state-of-the-union-2015&sa=D&ust=1514024135867000&usg=AFQjCNHgD14YivkspR2nd7PZG5Have9GIw) covers this story as well.

## DevTools Insights

Working through this example reveals a lot of ways in which we could help to communicate everything above without an expert walking through the timeline.

### Communicating top costs

*   We need a view of the overall performance so we don't go to micro immediately.

*   Need a summary similar to the [timeline summary tooltip](https://www.google.com/url?q=https://code.google.com/p/chromium/issues/detail?id%3D247786&sa=D&ust=1514024135869000&usg=AFQjCNFbqI3VAHUWABAEb1JqreC4tHpJzw)
*   Developers have JSPerf for the micro picture. If they're profiling, they want the big picture

### Connecting back to source

*   We get big callstacks thanks to libraries & frameworks.

*   fade blackboxed frames in flame chart. easier view in callstack

*   Need better association between details frame callstack and the flame visualization.

*   We need range selection for Heavy profiler view.
*   highlight on hover

*   Things like $figure.children('a, span') don't feel expensive but we need to show they are.

*   Show original source lines of the key frame from callstack?

*   While hovering callstack, show the relevant line of source

*   Heatmap potentially useful during authoring. Use previously collected perf data to annotate.

### Profiler experience

*   What is the ""Heavy"" equivalent of timeline?

*   Summary view

*   Forced style recalcs: 30% of main thread time
*   Pure JS (not ending in purple/blue): 30% of main thread time
*   Event handlers (blocking): wheel/touch.
*   Event handlers (non-blocking): Mutation events

*   Stack view for each of these, blackboxing jQuery etc.  

*   Developer View:

*   Gather all stacks for Recalc/Layout/etc , reverse them, magically match them, Then summarize with total amount of work caused by each call.

*   Prioritize forced stack frames. Guide them to address layout trashing. Only draw developers towards invalidation if they need it to re-order.

### Buggy stuff

*   Bug identified: insertBefore call not part of our invalidation call stack
*   Timeline Frames view gets confused. When we're not frequently spitting out frames, each vertical frame bar can capture 1-2s of work.

*   We should use frames view when reasonable (rAF, animation or scrolling) and use regular otherwise.
*   Could they be on the same line?

## Additional feedback from Wikipedia (March 18)

*   V8 Deopts are loud and demand priority however they rarely deliver significant improvements in overall performance.

*   True.

*   DevTools Audit panel is not good.

*   It recommended ""3 inline script blocks were found in the head between an external CSS file and another resource. To allow parallel downloading, move the inline script before the external CSS file, or after the next resource. ""
*   Wikipedia followed the advice with no improvement to be found.

*   Printing out the timeline to investigate was incredibly effective.

# Want More?

Other recent perf audits:

[Angular app input latency rendering form fields](https://www.google.com/url?q=https://docs.google.com/document/d/1QSkfqoiZS203BG5hTELTt1GvyD1qc9rDXOpMym9IKlw/edit&sa=D&ust=1514024135875000&usg=AFQjCNE3rJybctkqLSZ1luVqwz8ylnIHuw)

Angular’s dominance of the runloop means the developer has few options, aside from large refactors.

## [SFGatePocalpyse | the pageload of sfgate.com](https://www.google.com/url?q=https://docs.google.com/document/d/1JlgAmRXHyXRb1tJONPZRN5QzHMkmKIKNpMSvtvhumDA/edit&sa=D&ust=1514024135876000&usg=AFQjCNFzSczPOH36SNKl9K6NypPBE7YcbQ)(google only, sorry!)

Not only does it load in 80 scripts, connect to 80 origins, create 70 frames, and load 5MB of content…  but, as you can imagine, it thrashes the main thread in no particular pattern, so there's not much fruit hanging low on these sfgate trees.

Greg Simon said this destroyed his Chrome Pixel. Indeed, this particular site is a great stress-test for our entire platform.

## [Yelp mobile web | touchmove effect](https://www.google.com/url?q=https://docs.google.com/a/google.com/document/d/1LNGEi0_L6vOywV4C7DLttbIS3QCwrFl7rFCb-us-kHE/edit&sa=D&ust=1514024135876000&usg=AFQjCNGSGxnSmxP6qn_2xkFygB_RYEBFoQ)(google only, sorry!)

Yelp published a blog post,[ Animating the Mobile Web](https://www.google.com/url?q=http://engineeringblog.yelp.com/2015/01/animating-the-mobile-web.html&sa=D&ust=1514024135877000&usg=AFQjCNEHB3dSKtapVQMoAt-S4IiySruqLw), describing how they got to 60 FPS.  

We dug in to look a bit closer.

#### Bonus audit!

# Scrolling Jank in Google Play Movies Infinite Scroll

Viewing [https://play.google.com/store/movies/category/1/collection/topselling\_paid](https://www.google.com/url?q=https://play.google.com/store/movies/category/1/collection/topselling_paid&sa=D&ust=1514024135879000&usg=AFQjCNEPXV_NaLkJtYwBbT0h6XaPfHpVLg) on desktop.

1 second long scrolling janks when the infinite scroll XHRs returns and generates DOM.

The XHR handler should definitely yield instead of creating all their DOM immediately.

But while they do their work in one go, the mousewheel handler means the user scroll is blocked.

## Mystery cost, post XHR

At the end of our Timeline recording are these gray towers.

This points to work that DevTools doesn’t have instrumented.  But tracing likely does…

The culprit here: CompositingRequirementsUpdater::updateRecursive

As a hunch, we thought this cost was ballooning with layer count.

### Layers

First you open up Layers panel and you’re thinking..

oh a layer per card. That seems excessive.

But then you tilt it and see we have 3 unique layers per card.

*   2 at the card location, one of which is manually promoted with backface-visibility, the other layerForSqashingContents
*   A third layer per-card is the full width and height of the document. (layerForAncestorClip)

### Wheel handler detour

While we’re here, that red looking layer is the one with the wheel handler. But oddly it’s showing up behind the root layer, which shouldn’t probably be possible. In fact, if we look at google.com:

So let’s park this, because it’s just how Chrome’s internals are set up that there’s a wheel handler.

### Lets nuke those layers

If we drop backface-visibility from the card, our layer count drops to 1.

And we’ve vanquished the timeline’s gray towers of layer management.

However, we have a new problem.

Every time we render a new card to the page we need to re-rasterize the entire viewport.

Given that, it’s no surprise Painting 1450 x 12,000 pixels takes 80ms each frame.

For fun, I used DevTools LiveEdit to edit the XHR handler’s JavaScript live and put a wrapper around each new “page” of elements, which I then promoted with will-change:transform.

Now our layer creation and repaint is synchronized with the DOM changes.

It ended up making a great improvement:

### So did we improve the jank, post XHR?

3 layers per card

(original)

a single layer

 a few layers to group card additions

Mega Paints

(length of large paint operations)

130ms

121ms

30ms

Post-load frame times

220, 220, 230, 200

310, 210, 110, 100

200, 75, 70, 50

Looks like a win.

### XHR

Remember that big XHR?    Upon further inspection, it interesting:

### Developer Insights

*   Don’t ask for element/window metrics while/after adding new content to DOM
*   Reduce layer count to minimize overhead

### DevTools Insights

*   Need a global layer count
*   Need to indicate what actions to take given a particular big cost

*   e.g. Composite Layers == reduce layer count. Investigate current ones via frame viewer and evaluate compositing reasons

### Blink Insights

*   scrollTop is asked for often and requires significant work. Do we NEED to force a layout for all cases?
*   Why are we generating two superfluous layers per movie card?
*   Optional: infinite scrolling with single layer can add up to significant re-rasterize costs. Can we chunk out the primary layer so the cost isn’t so large?",null,undefined
2020-04-18T12:06:37.000Z,https://twitter.com/pirozhenshchina/status/1251482261893021696,true,"[""best""]",tweet,pirozhenshchina_1251482261893021696,pirozhenshchina,twitter,null,"хочу чтобы интернет был вот таким https://t.co/HlyxCfPipX
![](https://pbs.twimg.com/media/EV4oexSWAAYrXwl.jpg)
",пирожЕнщина,undefined
2020-02-06T12:34:32.000Z,https://twitter.com/proxiper/status/1225397363205951490,true,"[""best""]",tweet,proxiper_1225397363205951490,proxiper,twitter,null,"Всё удобное, быстрое и т.п. всегда будет становиться уделом бедных. Деньгами или душой. Дело в том, что предметы обретают душевность только когда к ним прикладываются усилия, которые на первый взгляд кажутся необоснованными и излишними. Это в общем-то одно из проявлений любви. →
",Anton Melnikov,undefined
2020-02-06T13:45:10.000Z,https://twitter.com/proxiper/status/1225415136418127873,true,"[""best""]",tweet,proxiper_1225415136418127873,proxiper,twitter,null,"— Миша, почему ты плачешь?
— Все нормально, оставь его, он просто веб-разработчик. https://t.co/yg24FKN0zN
![](https://pbs.twimg.com/media/EQGMinBW4AA5Pn8.jpg)
",Anton Melnikov,undefined
2020-02-14T22:12:06.000Z,https://twitter.com/proxiper/status/1228441815180881920,true,"[""best""]",tweet,proxiper_1228441815180881920,proxiper,twitter,null,"Поставил себе цель минимум 10000 раз в день вращать на хую достижение целей.
",Anton Melnikov,undefined
2020-02-21T10:09:24.000Z,https://twitter.com/proxiper/status/1230796656385372160,true,"[""best""]",tweet,proxiper_1230796656385372160,proxiper,twitter,null,"> [In reply to](https://twitter.com/Ohuetbliat/status/1230760567909933056):
> Короче,  сегодня будет подборка студентиков что приехали и начали самоубиваться на нашей делянке > 
> 
Открывает на трейд человек-комок https://t.co/2Ru4sFIxkk
> ![](https://pbs.twimg.com/ext_tw_video_thumb/1230760522766675968/pu/img/nJdx4Bl1Wz36IfQP.jpg)

Крепкие же эти лыжники. https://t.co/79bb8UEUmZ
",Anton Melnikov,undefined
2020-03-04T12:11:45.000Z,https://twitter.com/proxiper/status/1235176100839469056,true,"[""best""]",tweet,proxiper_1235176100839469056,proxiper,twitter,null,"Скучное — новое крутое. https://t.co/AIoAM2fBEB
![](https://pbs.twimg.com/media/ESQ5_KLXYAMk1Bx.png)
",Anton Melnikov,undefined
2020-03-13T07:22:29.000Z,https://twitter.com/proxiper/status/1238364794207469568,true,"[""best""]",tweet,proxiper_1238364794207469568,proxiper,twitter,null,"Подумал, что если когда-нибудь ебнусь и соберусь на модную фронтенд-конфу, пойду туда в такой футболке. https://t.co/I7Rr4S5r7W
![](https://pbs.twimg.com/media/ES-OF3AXgAEVjAG.png)
",Anton Melnikov,undefined
2020-04-04T12:31:33.000Z,https://twitter.com/proxiper/status/1246415108064059392,true,"[""best""]",tweet,proxiper_1246415108064059392,proxiper,twitter,null,"Очень часто, глядя на человека, который хорошо объясняет, как делать не нужно, мы думаем, что он знает как нужно.
А это очень редко так. Это другой скилл, и гораздо более сложный.

Главная ошибка при оценке способностей людей. Своих, кстати, тоже.
",Anton Melnikov,undefined
2020-04-10T15:56:48.000Z,https://twitter.com/proxiper/status/1248641088199540741,true,"[""best""]",tweet,proxiper_1248641088199540741,proxiper,twitter,null,"Странно, столько научно-фантастических фильмов снято, а люди все равно думают, что инженерная красота — это когда всё геометричненько порендерено, а не когда корабль можно починить подручными средствами из сарая какого-нибудь деда с планеты, на которой ты застрял.
",Anton Melnikov,undefined
2020-05-16T22:03:29.000Z,https://twitter.com/proxiper/status/1261779327789805569,true,"[""best""]",tweet,proxiper_1261779327789805569,proxiper,twitter,null,"Когда очень-очень захотелось раскритиковать автора, пересильте себя и спросите:
— Слушай, а можешь объяснить, почему вот тут ты сделал вот так?

С большой вероятностью случится одно из двух:
1) Вы узнаете что-то новое, о чем никогда не подозревали.
2) Автор сам признает косяк.
",Anton Melnikov,undefined
2020-05-24T10:51:23.000Z,https://twitter.com/proxiper/status/1264509294059368448,true,"[""best""]",tweet,proxiper_1264509294059368448,proxiper,twitter,null,"Как куется волшебство. Фрагмент мастер-класса Стивена Иссерлиса. Когда от звука и уровня понимания музыки одновременно испытываешь и восторг, и желание заняться чем-нибудь другим, ощущая собственную беспомощность. https://t.co/AIDcT47x7R
",Anton Melnikov,undefined
2020-06-13T10:34:06.000Z,https://twitter.com/proxiper/status/1271752698774372354,true,"[""best""]",tweet,proxiper_1271752698774372354,proxiper,twitter,https://twitter.com/19684569/status/1271751402998640640,"А пока зависимых типов нет, неплохая вводная статья про то, что можно/полезно делать уже сейчас, если язык позволяет https://t.co/GZot0TTIXv
",Anton Melnikov,undefined
2020-05-28T06:22:12.000Z,https://twitter.com/PSturrock/status/1265891102726541312,true,"[""best""]",tweet,PSturrock_1265891102726541312,PSturrock,twitter,https://twitter.com/17562763/status/1265890237105856512,"@Conaw @RoamResearch No problem, let me know when you want my credit card number. I love Roam, but there are very very few apps I've stuck with for five years, because others have come up with better--as you have.
",Paul Sturrock,undefined
2020-02-19T06:31:12.000Z,https://twitter.com/ReaICozy/status/1230016969895796736,true,"[""best""]",tweet,ReaICozy_1230016969895796736,ReaICozy,twitter,null,"the most anglo thing you'll ever see https://t.co/U5LhKYCwZp
![](https://pbs.twimg.com/ext_tw_video_thumb/1230016926971285504/pu/img/WC6ILe9U-MZ1nhuG.jpg)
",King 👑 Cozy,undefined
2020-05-22T20:43:55.000Z,https://twitter.com/renstrange/status/1263933633506705408,true,"[""best""]",tweet,renstrange_1263933633506705408,renstrange,twitter,null,"finally some good news from the film industry https://t.co/yIhfEiQyVx
![](https://pbs.twimg.com/media/EYpk7-wWsAE58TV.jpg)
",DEFUND THE POLICE,undefined
2020-04-19T13:08:56.000Z,https://twitter.com/rmstdio/status/1251860334958305285,true,"[""best""]",tweet,rmstdio_1251860334958305285,rmstdio,twitter,null,"https://t.co/d1S1OwNOv7
![](https://pbs.twimg.com/media/EV-AVuoWsAApryY.jpg)
",Digital Madness,undefined
2020-06-13T14:17:26.000Z,null,false,[],note,robotgay_44,robotgay,telegram,null,"![](https://kalle-space.s3.eu-central-1.amazonaws.com/file_7.jpg)
",null,2020-06-13T14:17:27.919Z
2020-04-01T18:18:57.000Z,https://twitter.com/rodoss/status/1245415369285734404,true,"[""best""]",tweet,rodoss_1245415369285734404,rodoss,twitter,null,"Так здорово, даже обидно, что не я сделал https://t.co/u6gNB895dD
![](https://pbs.twimg.com/ext_tw_video_thumb/1245415323865620480/pu/img/pEl-I-GX_CPBintR.jpg)
",Манговый пес,undefined
2020-05-14T08:55:53.000Z,https://twitter.com/runemadsen/status/1260856349103095808,true,"[""best""]",tweet,runemadsen_1260856349103095808,runemadsen,twitter,null,"Unreal Engine is out here rendering trillions of triangles, and I'm still trying to get my 5 DIV's to render at 60 fps on a window scroll event.
",Rune Madsen,undefined
2020-02-05T04:08:18.000Z,https://twitter.com/rurich_FR/status/1224907574161608710,true,"[""best""]",tweet,rurich_FR_1224907574161608710,rurich_FR,twitter,https://twitter.com/38406618/status/1224730564223213568,"@AlexeyOrekhov @a_konyaev Хорошо https://t.co/vHzCvlp24Y
![](https://pbs.twimg.com/media/EP--8leXsAYwywa.jpg)
",RUrich,undefined
2020-02-14T14:35:00.000Z,https://twitter.com/RussianMemesLtd/status/1228326780500684801,true,"[""best""]",tweet,RussianMemesLtd_1228326780500684801,RussianMemesLtd,twitter,null,"When a fight starts in your nightmare but you can't hit hard enough

whi God whi https://t.co/04B7BFydC2
![](https://pbs.twimg.com/media/EQvJPAzXsAEBSOQ.jpg)
",Russian Memes United,undefined
2020-02-21T07:48:03.000Z,https://twitter.com/RussianMemesLtd/status/1230761084899905538,true,"[""best""]",tweet,RussianMemesLtd_1230761084899905538,RussianMemesLtd,twitter,null,"- What year is it?

- 1348, son.

- And the fuck I was born in the midst of a plague, Mom? To die? https://t.co/3ZQY1oa9m5
![](https://pbs.twimg.com/media/ERSKrUYUwAEOcx7.jpg)
",Russian Memes United,undefined
2020-02-29T11:06:00.000Z,https://twitter.com/RussianMemesLtd/status/1233710001392377856,true,"[""best""]",tweet,RussianMemesLtd_1233710001392377856,RussianMemesLtd,twitter,null,"*fluffy butt*

don't even think about it https://t.co/VyqELtsviA
![](https://pbs.twimg.com/media/ER3tdscWAAAYTbD.jpg)
",Russian Memes United,undefined
2020-06-10T10:50:00.000Z,https://twitter.com/RussianMemesLtd/status/1270669537256472578,true,"[""best""]",tweet,RussianMemesLtd_1270669537256472578,RussianMemesLtd,twitter,null,"Windows media player

10 y.o. me https://t.co/EIDsXn8d75
![](https://pbs.twimg.com/media/EaI8X1TX0AAaH9d.jpg)
",Russian Memes United,undefined
2020-04-08T21:08:37.000Z,https://twitter.com/SamSykesSwears/status/1247994783106121729,true,"[""best""]",tweet,SamSykesSwears_1247994783106121729,SamSykesSwears,twitter,null,"theyre GOOD memes https://t.co/y2EkO2vWUs
![](https://pbs.twimg.com/media/EVHEnJTU0AEU4Yu.jpg)
",Sam Sykes,undefined
2020-06-01T23:03:04.000Z,https://twitter.com/sashalu_/status/1267592530411114496,true,"[""best""]",tweet,sashalu__1267592530411114496,sashalu_,twitter,null,"я пересмотрела видео монеточки которое она записала себе на день рождения про вещи которые она узнала за 22 года и расплакалась https://t.co/nYtPPv7Emv
![](https://pbs.twimg.com/ext_tw_video_thumb/1267592476182941697/pu/img/26Hbn-8mJ3jmjtYN.jpg)
",саша лу,undefined
2020-02-15T19:13:21.000Z,https://twitter.com/satanuga_/status/1228759216690733056,true,"[""best""]",tweet,satanuga__1228759216690733056,satanuga_,twitter,null,"Пацан, который смог... https://t.co/oplZuaHjxP
![](https://pbs.twimg.com/media/EQ1t_bvWoAEw1AQ.png)
![](https://pbs.twimg.com/media/EQ1t_bwWkAEyORk.jpg)
",Darya,undefined
2020-05-11T16:59:00.000Z,https://twitter.com/scottjohnson/status/1259890763338563584,true,"[""best""]",tweet,scottjohnson_1259890763338563584,scottjohnson,twitter,null,"This is the best one of these I have ever seen. https://t.co/sWlcPIYQPJ
![](https://pbs.twimg.com/tweet_video_thumb/EXvoAdUX0AMtBBB.jpg)
",Scott Johnson,undefined
2020-03-04T14:28:31.000Z,https://twitter.com/Sean_Zak/status/1235210517771321345,true,"[""best""]",tweet,Sean_Zak_1235210517771321345,Sean_Zak,twitter,null,"Racing drones WERE MADE to film golf shots.

IG: rosshasadrone https://t.co/1S6PZibXjR
![](https://pbs.twimg.com/ext_tw_video_thumb/1235209672237428736/pu/img/3IywqG5O_O0GH5Qw.jpg)
",Sean Zak,undefined
2020-03-09T20:41:43.000Z,https://twitter.com/sehurlburt/status/1237116375203598336,true,"[""best""]",tweet,sehurlburt_1237116375203598336,sehurlburt,twitter,null,"I know it's normalized in tech culture, but I truly do not understand people who jump straight to critique when they hear a new idea, thinking it makes them look smart. Doesn't look smart to me, just looks ignorant and rude and insecure
",Stephanie Hurlburt,undefined
2016-08-15T21:29:23.000Z,https://martinfowler.com/articles/serverless.html,false,"[""best""]",article,Serverless Architectures,null,pocket,null,"# Serverless Architectures

by [Mike Roberts](https://www.symphonia.io/bios/#mike-roberts), [martinfowler.com](http://martinfowler.com)  
May 22, 2018

_Serverless architectures are application designs that incorporate third-party “Backend as a Service” (BaaS) services, and/or that include custom code run in managed, ephemeral containers on a “Functions as a Service” (FaaS) platform. By using these ideas, and related ones like single-page applications, such architectures remove much of the need for a traditional always-on server component. Serverless architectures may benefit from significantly reduced operational cost, complexity, and engineering lead time, at a cost of increased reliance on vendor dependencies and comparatively immature supporting services._

* * *

* * *

This article provides an in-depth look at serverless architecture and as a result is a long read. If you need a concise summary of what serverless is and its trade-offs - take a look at the [bliki entry on serverless](https://martinfowler.com/bliki/Serverless.html)

**Serverless computing**, or more simply _Serverless_, is a hot topic in the software architecture world. The “Big Three” cloud vendors—Amazon, Google, and Microsoft—are heavily invested in Serverless, and we’ve seen plenty of books, open-source projects, conferences, and software vendors dedicated to the subject. But what is Serverless, and why is (or isn’t) it worth considering? In this article I hope to enlighten you a little on these questions.

To start we'll look at the “what” of Serverless. We’ll get into the benefits and drawbacks of the approach later.

## What is Serverless?

Like many trends in software, there’s no one clear view of what Serverless is. For starters, it encompasses two different but overlapping areas:

1.  Serverless was first used to describe applications that significantly or fully incorporate third-party, cloud-hosted applications and services, to manage server-side logic and state. These are typically “rich client” applications—think single-page web apps, or mobile apps—that use the vast ecosystem of cloud-accessible databases (e.g., Parse, Firebase), authentication services (e.g., Auth0, AWS Cognito), and so on. These types of services have been previously described as “[(Mobile) Backend as a Service](https://en.wikipedia.org/wiki/Mobile_backend_as_a_service)"", and I use **""BaaS""** as shorthand in the rest of this article.
2.  Serverless can also mean applications where server-side logic is still written by the application developer, but, unlike traditional architectures, it’s run in stateless compute containers that are event-triggered, ephemeral (may only last for one invocation), and fully managed by a third party. One way to think of this is “Functions as a Service” or **""FaaS""**. (Note: The [original source](https://twitter.com/marak/status/736357543598002176) for this name—a tweet by @marak—is no longer publicly available.) [AWS Lambda](https://aws.amazon.com/lambda/) is one of the most popular implementations of a Functions-as-a-Service platform at present, but there are many others, too.

## Origin of ‘Serverless’

The term _“Serverless”_ is confusing since with such applications there are both server hardware and server processes running somewhere, but the difference compared to normal approaches is that the organization building and supporting a ‘Serverless’ application is not looking after that hardware or those processes. They are outsourcing this responsibility to someone else.

First usages of the term seem to have appeared around 2012, including in [this article](http://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/) by [Ken Fromm](https://twitter.com/frommww). [Badri Janakiraman](https://twitter.com/badrij) says that he also heard the term used around this time in regard to [continuous integration](https://martinfowler.com/articles/continuousIntegration.html) and source control systems being hosted as a service, rather than on a company’s own servers. However this second usage was about development team infrastructure (i.e. the tools that a software team uses), rather than about incorporation of external services into the actual products built by a development team - the meaning that we now tend to use for Serverless.

The term became more popular in 2015, following the AWS Lambda launch in 2014, and grew further in popularity after Amazon’s API Gateway launched in July 2015. Here’s [an example](https://medium.com/precipitation-io/servers-are-dead-3c0fa8d77259#.mbd7csugq) where [Ant Stanley](https://twitter.com/IamStan) writes about Serverless following the API Gateway announcement. In October 2015 there was a talk at Amazon’s re:Invent conference titled “[The Serverless Company using AWS Lambda](https://www.youtube.com/watch?v=U8ODkSCJpJU)”, referring to [PlayOn! Sports](http://www.playonsports.com/). Towards the end of 2015 the [‘Javascript Amazon Web Services (JAWS)’ open source project renamed themselves](https://serverlesscode.com/post/serverless-formerly-jaws/) to the [Serverless Framework](https://github.com/serverless/serverless), continuing the trend.

By mid 2016, Serverless had become a dominant name for this area, giving way to the birth of the [Serverless Conference](http://serverlessconf.io) series, and various Serverless vendors embracing the term in everything from product marketing to job descriptions. Serverless as a term was here to stay

In this article, we’ll primarily focus on FaaS. Not only is it the area of Serverless that’s newer and driving a lot of the hype, but it has significant differences to how we typically think about technical architecture.

BaaS and FaaS are related in their operational attributes (e.g., no resource management) and are frequently used together. The large cloud vendors all have “Serverless portfolios” that include both BaaS and FaaS products—for example, [here’s Amazon’s Serverless](https://aws.amazon.com/serverless/) product page. Google’s Firebase BaaS database has explicit FaaS support through [Google Cloud Functions for Firebase.](https://firebase.google.com/docs/functions/)

There is similar linking of the two areas from smaller companies too. [Auth0](https://auth0.com) started with a BaaS product that implemented many facets of user management, and subsequently created the companion FaaS service [Webtask](https://webtask.io). The company have taken this idea even further with [Extend](https://auth0.com/extend/), which enables other SaaS and BaaS companies to easily add a FaaS capability to existing products so they can create a unified Serverless product.

### A couple of examples

#### UI-driven applications

Let’s think about a traditional three-tier client-oriented system with server-side logic. A good example is a typical ecommerce app—dare I say an online pet store?

Traditionally, the architecture will look something like the diagram below. Let’s say it’s implemented in Java or Javascript on the server side, with an HTML + Javascript component as the client:

With this architecture the client can be relatively unintelligent, with much of the logic in the system—authentication, page navigation, searching, transactions—implemented by the server application.

With a Serverless architecture this may end up looking more like this:

This is a massively simplified view, but even here we see a number of significant changes:

1.  We’ve deleted the authentication logic in the original application and have replaced it with a third-party BaaS service (e.g., Auth0.)
2.  Using another example of BaaS, we’ve allowed the client direct access to a subset of our database (for product listings), which itself is fully hosted by a third party (e.g., Google Firebase.) We likely have a different security profile for the client accessing the database in this way than for server resources that access the database.
3.  These previous two points imply a very important third: some logic that was in the Pet Store server is now within the client—e.g., keeping track of a user session, understanding the UX structure of the application, reading from a database and translating that into a usable view, etc. The client is well on its way to becoming a [Single Page Application](https://en.wikipedia.org/wiki/Single-page_application).
4.  We may want to keep some UX-related functionality in the server, if, for example, it’s compute intensive or requires access to significant amounts of data. In our pet store, an example is “search.” Instead of having an always-running server, as existed in the original architecture, we can instead implement a FaaS function that responds to HTTP requests via an API gateway (described later). Both the client and the server “search” function read from the same database for product data.

If we choose to use AWS Lambda as our FaaS platform we can port the search code from the original Pet Store server to the new Pet Store Search function without a complete rewrite, since Lambda supports Java and Javascript—our original implementation languages.

6.  Finally, we may replace our “purchase” functionality with another separate FaaS function, choosing to keep it on the server side for security reasons, rather than reimplement it in the client. It too is fronted by an API gateway. Breaking up different logical requirements into separately deployed components is a very common approach when using FaaS.

Stepping back a little, this example demonstrates another very important point about Serverless architectures. In the original version, all flow, control, and security was managed by the central server application. In the Serverless version there is no central arbiter of these concerns. Instead we see a preference for **choreography over orchestration**, with each component playing a more architecturally aware role—an idea also common in a microservices approach.

There are many benefits to such an approach. As Sam Newman notes in his _[Building Microservices](https://samnewman.io/books/building_microservices/)_ book, systems built this way are often “more flexible and amenable to change,” both as a whole and through independent updates to components; there is better division of concerns; and there are also some fascinating cost benefits, a point that Gojko Adzic discusses in [this excellent talk](https://gojko.net/2017/10/05/serverless-design-gotocph.html).

Of course, such a design is a trade-off: it requires better distributed monitoring (more on this later), and we rely more significantly on the security capabilities of the underlying platform. More fundamentally, there are a greater number of moving pieces to get our heads around than there are with the monolithic application we had originally. Whether the benefits of flexibility and cost are worth the added complexity of multiple backend components is very context dependent.

#### Message-driven applications

A different example is a backend data-processing service.

Say you’re writing a user-centric application that needs to quickly respond to UI requests, and, secondarily, it needs to capture all the different types of user activity that are occurring, for subsequent processing. Think about an online advertisement system: when a user clicks on an ad you want to very quickly redirect them to the target of that ad. At the same time, you need to collect the fact that the click has happened so that you can charge the advertiser. (This example is not hypothetical—my former team at [Intent Media](http://www.intentmedia.com/) had exactly this need, which they implemented in a Serverless way.)

Traditionally, the architecture may look as below. The “Ad Server” synchronously responds to the user (not shown) and also posts a “click message” to a channel. This message is then asynchronously processed by a “click processor” application that updates a database, e.g., to decrement the advertiser’s budget.

In the Serverless world this looks as follows:

Can you see the difference? The change in architecture is much smaller here compared to our first example—this is why asynchronous message processing is a very popular use case for Serverless technologies. We’ve replaced a long-lived message-consumer _application_ with a FaaS _function_. This function runs within the event-driven context the vendor provides. Note that the cloud platform vendor supplies both the message broker _and_ the FaaS environment—the two systems are closely tied to each other.

The FaaS environment may also process several messages in parallel by instantiating multiple copies of the function code. Depending on how we wrote the original process this may be a new concept we need to consider.

### Unpacking ""Function as a Service""

We've mentioned FaaS a lot already, but it's time to dig into what it really means. To do this let's look at the [opening description](https://aws.amazon.com/lambda/) for Amazon's FaaS product: Lambda. I've added some tokens to it, which I’ll expand on.

> AWS Lambda lets you run code without provisioning or managing servers. **(1)** ... With Lambda, you can run code for virtually any type of application or backend service **(2)** - all with zero administration. Just upload your code and Lambda takes care of everything required to run **(3)** and scale **(4)** your code with high availability. You can set up your code to automatically trigger from other AWS services **(5)** or call it directly from any web or mobile app **(6)**.

1.  **Fundamentally, FaaS is about running backend code without managing your own server systems or your own long-lived server applications.** That second clause—long-lived server applications—is a key difference when comparing with other modern architectural trends like containers and PaaS (Platform as a Service).

If we go back to our click-processing example from earlier, FaaS replaces the click-processing server (possibly a physical machine, but definitely a specific application) with something that doesn’t need a provisioned server, nor an application that is running all the time.

3.  FaaS offerings do not require coding to a specific framework or library. FaaS functions are regular applications when it comes to language and environment. For instance, AWS Lambda functions can be implemented “first class” in Javascript, Python, Go, any JVM language (Java, Clojure, Scala, etc.), or any .NET language. However your Lambda function can also execute another process that is bundled with its deployment artifact, so you can actually use any language that can compile down to a Unix process (see Apex, later in this article).

FaaS functions have significant architectural restrictions though, especially when it comes to state and execution duration. We’ll get to that soon.

Let’s consider our click-processing example again. The only code that needs to change when moving to FaaS is the “main method” (startup) code, in that it is deleted, and likely the specific code that is the top-level message handler (the “message listener interface” implementation), but this might only be a change in method signature. The rest of the code (e.g., the code that writes to the database) is no different in a FaaS world.

6.  Deployment is very different from traditional systems since we have no server applications to run ourselves. In a FaaS environment we upload the code for our function to the FaaS provider, and the provider does everything else necessary for provisioning resources, instantiating VMs, managing processes, etc.
7.  Horizontal scaling is completely automatic, elastic, and managed by the provider. If your system needs to be processing 100 requests in parallel the provider will handle that without any extra configuration on your part. The “compute containers” executing your functions are ephemeral, with the FaaS provider creating and destroying them purely driven by runtime need. Most importantly, with FaaS **the vendor handles all underlying resource provisioning and allocation**—no cluster or VM management is required by the user at all.

Let’s return to our click processor. Say that we were having a good day and customers were clicking on ten times as many ads as usual. For the traditional architecture, would our click-processing application be able to handle this? For example, did we develop our application to be able to handle multiple messages at a time? If we did, would one running instance of the application be enough to process the load? If we are able to run multiple processes, is autoscaling automatic or do we need to reconfigure that manually? With a FaaS approach all of these questions are already answered—you need to write the function ahead of time to assume horizontal-scaled parallelism, but from that point on the FaaS provider automatically handles all scaling needs.

9.  Functions in FaaS are typically triggered by event types defined by the provider. With Amazon AWS such stimuli include S3 (file/object) updates, time (scheduled tasks), and messages added to a message bus (e.g., [Kinesis](https://aws.amazon.com/kinesis/)).
10.  Most providers also allow functions to be triggered as a response to inbound HTTP requests; in AWS one typically enables this by way of using an API gateway. We used an API gateway in our Pet Store example for our “search” and “purchase” functions. Functions can also be invoked directly via a platform-provided API, either externally or from within the same cloud environment, but this is a comparatively uncommon use.

#### State

FaaS functions have significant restrictions when it comes to local (machine/instance-bound) state—i.e., data that you store in variables in memory, or data that you write to local disk. You do have such storage available, but you have no guarantee that such state is persisted across multiple invocations, and, more strongly, you should not assume that state from one invocation of a function will be available to another invocation of the same function. FaaS functions are therefore often described as stateless, but it’s more accurate to say that any state of a FaaS function that is required to be **persistent** needs to be **externalized** outside of the FaaS function instance.

For FaaS functions that are naturally stateless—i.e., those that provide a purely functional transformation of their input to their output—this is of no concern. But for others this can have a large impact on application architecture, albeit not a unique one—the “[Twelve-Factor app](http://12factor.net/)” concept has [precisely the same restriction](http://12factor.net/processes). Such state-oriented functions will typically make use of a database, a cross-application cache (like Redis), or network file/object store (like S3) to store state across requests, or to provide further input necessary to handle a request.

#### Execution duration

FaaS functions are typically limited in how long each invocation is allowed to run. At present the “timeout” for an AWS Lambda function to respond to an event is at most five minutes, before being terminated. Microsoft Azure and Google Cloud Functions have similar limits.

This means that certain classes of long-lived tasks are not suited to FaaS functions without re-architecture—you may need to create several different coordinated FaaS functions, whereas in a traditional environment you may have one long-duration task performing both coordination and execution.

#### Startup latency and “cold starts”

It takes some time for a FaaS platform to initialize an instance of a function before each event. This startup latency can vary significantly, even for one specific function, depending on a large number of factors, and may range anywhere from a few milliseconds to several seconds. That sounds bad, but let’s get a little more specific, using AWS Lambda as an example.

Initialization of a Lambda function will either be a “warm start”—reusing an instance of a Lambda function and its host container from a previous event—or a “cold start” —creating a new container instance, starting the function host process, etc. Unsurprisingly, when considering startup latency, it’s these cold starts that bring the most concern.

Cold-start latency depends on many variables: the language you use, how many libraries you’re using, how much code you have, the configuration of the Lambda function environment itself, whether you need to connect to [VPC](https://aws.amazon.com/vpc/) resources, etc. Many of these aspects are under a developer’s control, so it’s often possible to reduce the startup latency incurred as part of a cold start.

Equally as variable as cold-start duration is cold-start frequency. For instance, if a function is processing 10 events per second, with each event taking 50 ms to process, you’ll likely only see a cold start with Lambda every 100,000–200,000 events or so. If, on the other hand, you process an event once per hour, you’ll likely see a cold start for every event, since Amazon retires inactive Lambda instances after a few minutes. Knowing this will help you understand whether cold starts will impact you on aggregate, and whether you might want to perform “keep alives” of your function instances to avoid them being put out to pasture.

Are cold starts a concern? It depends on the style and traffic shape of your application. My former team at Intent Media has an asynchronous message-processing Lambda app implemented in Java (typically the language with the slowest startup time) which processes hundreds of millions of messages per day, and they have no concerns with startup latency for this component. That said, if you were writing a low-latency trading application you probably wouldn’t want to use cloud-hosted FaaS systems at this time, no matter the language you were using for implementation.

Whether or not you think your app may have problems like this, you should test performance with production-like load. If your use case doesn’t work now you may want to try again in a few months, since this is a major area of continual improvement by FaaS vendors.

For much more detail on cold starts, please see [my article on the subject](https://blog.symphonia.io/learning-lambda-part-8-addfab6b460d).

#### API gateways

One aspect of Serverless that we brushed upon earlier is an “API gateway.” An API gateway is an HTTP server where routes and endpoints are defined in configuration, and each route is associated with a resource to handle that route. In a Serverless architecture such handlers are often FaaS functions.

When an API gateway receives a request, it finds the routing configuration matching the request, and, in the case of a FaaS-backed route, will call the relevant FaaS function with a representation of the original request. Typically the API gateway will allow mapping from HTTP request parameters to a more concise input for the FaaS function, or will allow the entire HTTP request to be passed through, typically as a JSON object. The FaaS function will execute its logic and return a result to the API gateway, which in turn will transform this result into an HTTP response that it passes back to the original caller.

Amazon Web Services have their own API gateway (slightly confusingly named “[API Gateway](https://aws.amazon.com/api-gateway/)”), and other vendors offer similar abilities. Amazon’s API Gateway is a BaaS (yes, BaaS!) service in its own right in that it’s an external service that you configure, but do not need to run or provision yourself.

Beyond purely routing requests, API gateways may also perform authentication, input validation, response code mapping, and more. (If your spidey senses are tingling as you consider whether this is actually such a good idea, hold that thought! We'll consider this further later.)

One use case for an API gateway with FaaS functions is creating HTTP-fronted microservices in a Serverless way with all the scaling, management, and other benefits that come from FaaS functions.

When I first wrote this article, the tooling for Amazon’s API Gateway, at least, was achingly immature. Such tools have improved significantly since then. Components like AWS API Gateway are not quite “mainstream,” but hopefully they’re a little less painful than they once were, and will only continue to improve.

#### Tooling

The comment above about maturity of tooling also applies to Serverless FaaS in general. In 2016 things were pretty rough; by 2018 we’ve seen a marked improvement, and we expect tools to get better still.

A couple of notable examples of good “developer UX” in the FaaS world are worth calling out. First of all is [Auth0 Webtask](https://webtask.io) which places significant priority on developer UX in its tooling. Second is Microsoft, with their [Azure Functions](https://azure.microsoft.com/en-us/services/functions/) product. Microsoft has always put Visual Studio, with its tight feedback loops, at the forefront of its developer products, and Azure Functions is no exception. The ability it offers to debug functions locally, given an input from a cloud-triggered event, is quite special.

An area that still needs significant improvement is monitoring. I discuss that later on.

#### Open source

So far I’ve mostly discussed proprietary vendor products and tools. The majority of Serverless applications make use of such services, but there are open-source projects in this world, too.

The most common uses of open source in Serverless are for FaaS tools and frameworks, especially the popular [Serverless Framework](https://github.com/serverless/serverless), which aims to make working with AWS API Gateway and Lambda easier than using the tools provided by AWS. It also provides an amount of cross-vendor tooling abstraction, which some users find valuable. Examples of similar tools include [Claudia](https://github.com/claudiajs/claudia) and [Zappa](https://github.com/Miserlou/Zappa). Another example is [Apex](https://github.com/apex/apex), which is particularly interesting since it allows you to develop Lambda functions in languages other than those directly supported by Amazon.

The big vendors themselves aren’t getting left behind in the open-source tool party though. AWS’s own deployment tool, SAM—the [Serverless Application Model](https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html)—is [also open source](https://github.com/awslabs/serverless-application-model).

One of the main benefits of proprietary FaaS is not having to be concerned about the underlying compute infrastructure (machines, VMs, even containers). But what if you _want_ to be concerned about such things? Perhaps you have some security needs that can’t be satisfied by a cloud vendor, or maybe you have a few racks of servers that you’ve already bought and don’t want to throw away. Can open source help in these scenarios, allowing you to run your own “Serverful” FaaS platform?

Yes, and there’s been a good amount of activity in this area. One of the initial leaders in open-source FaaS was IBM (with [OpenWhisk](https://openwhisk.apache.org/), now an Apache project) and surprisingly—to me at least!—Microsoft, which open sourced much of its [Azure Functions](https://azure.microsoft.com/en-us/services/functions/) platform. Many other self-hosted FaaS implementations make use of an underlying container platform, frequently Kubernetes, which makes a lot of sense for many reasons. In this arena it’s worth exploring projects like [Galactic Fog](http://www.galacticfog.com/), [Fission](https://fission.io/), and [OpenFaaS](https://github.com/openfaas/faas). This is a large, fast-moving world, and I recommend looking at the work that the Cloud Native Computing Federation (CNCF) [Serverless Working Group](https://github.com/cncf/wg-serverless) have done to track it.

### What isn’t Serverless?

So far in this article I've described Serverless as being the union of two ideas: Backend as a Service and Functions as a Service. I've also dug into the capabilities of the latter. For more precision about what I see as the key attributes of a Serverless service (and why I consider even older services like S3 to be Serverless), I refer you to another article of mine: [Defining Serverless](https://blog.symphonia.io/defining-serverless-part-1-704d72bc8a32).

Before we start looking at the very important area of benefits and drawbacks, I'd like to spend one more quick moment on definition. Let’s define what Serverless isn't.

#### Comparison with PaaS

Given that Serverless FaaS functions are very similar to [Twelve-Factor applications](http://12factor.net/), are they just another form of [""Platform as a Service""](https://en.wikipedia.org/wiki/Platform_as_a_service) (PaaS) like [Heroku](http://www.heroku.com/)? For a brief answer I refer to Adrian Cockcroft

> If your PaaS can efficiently start instances in 20ms that run for half a second, then call it serverless. [\-- Adrian Cockcroft](https://twitter.com/adrianco/status/736553530689998848)

In other words, most PaaS applications are not geared towards bringing entire applications up and down in response to an event, whereas FaaS platforms do _exactly_ this.

If I’m being a good Twelve-Factor app developer, this doesn’t necessarily impact how I program and architect my applications, but it does make a big difference in how I operate them. Since we're all good DevOps-savvy engineers, we're thinking about operations as much as we’re thinking about development, right?

The key operational difference between FaaS and PaaS is _scaling_. Generally with a PaaS you still need to think about how to scale—for example, with Heroku, how many Dynos do you want to run? With a FaaS application this is completely transparent. Even if you set up your PaaS application to auto-scale you won’t be doing this to the level of individual requests (unless you have a very specifically shaped traffic profile), so a FaaS application is much more efficient when it comes to costs.

Given this benefit, why would you still use a PaaS? There are several reasons, but tooling is probably the biggest. Also some people use PaaS platforms like [Cloud Foundry](https://en.wikipedia.org/wiki/Cloud_Foundry) to provide a common development experience across a hybrid public and private cloud; at time of writing there isn’t a FaaS equivalent as mature as this.

#### Comparison with containers

One of the reasons to use Serverless FaaS is to avoid having to manage application processes at the operating-system level. PaaS services, like Heroku, also provide this capability, and I’ve described above how PaaS is different to Serverless FaaS. Another popular abstraction of processes are containers, with [Docker](https://www.docker.com/) being the most visible example of such a technology. Container hosting systems such as [Mesos](http://mesos.apache.org/) and [Kubernetes](http://kubernetes.io/), which abstract individual applications from OS-level deployment, are increasingly popular. Even further along this path we see cloud-hosting container platforms like [Amazon ECS](https://aws.amazon.com/ecs/) and [EKS](https://aws.amazon.com/eks/), and [Google Container Engine](https://cloud.google.com/container-engine) which, like Serverless FaaS, let teams avoid having to manage their own server hosts at all. Given the momentum around containers, is it still worth considering Serverless FaaS?

Principally the argument I made for PaaS still holds with containers - for Serverless FaaS **scaling is automatically managed, transparent, and fine grained**, and this is tied in with the automatic resource provisioning and allocation I mentioned earlier. Container platforms have traditionally still needed you to manage the size and shape of your clusters.

I’d also argue that container technology is still not mature and stable, although it is getting ever closer to being so. That’s not to say that Serverless FaaS is mature, of course, but picking which rough edges you’d like is still the order of the day.

It’s also important to mention that self-scaling container clusters are now available within container platforms. Kubernetes has this built in with ""[Horizontal Pod Autoscaling](http://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling/),"" and services like [AWS Fargate](https://aws.amazon.com/fargate/) also make the promise of “Serverless Containers.”

As we see the gap of management and scaling between Serverless FaaS and hosted containers narrow, the choice between them may just come down to style and type of application. For example, it may be that FaaS is seen as a better choice for an event-driven style with few event types per application component, and containers are seen as a better choice for synchronous-request–driven components with many entry points. I expect in a fairly short period of time that many applications and teams will use both architectural approaches, and it will be fascinating to see patterns of such use emerge.

#### #NoOps

Serverless doesn’t mean ""No Ops""—though it might mean “No sysadmin” depending on how far down the Serverless rabbit hole you go.

“Ops” means a lot more than server administration. It also means—at least—monitoring, deployment, security, networking, support, and often some amount of production debugging and system scaling. These problems all still exist with Serverless apps, and you’re still going to need a strategy to deal with them. In some ways Ops is harder in a Serverless world because a lot of this is so new.

The sysadmin is still happening—you’re just outsourcing it with Serverless. That’s not necessarily a bad (or good) thing—we outsource a lot, and its goodness or badness depends on what precisely you’re trying to do. Either way, at some point the abstraction will likely leak, and you’ll need to know that human sysadmins somewhere are supporting your application.

[Charity Majors](https://twitter.com/mipsytipsy) gave [a great talk on this subject](https://www.youtube.com/watch?v=wgT5f0eBhD8) at the first Serverlessconf. (You can also read her two write-ups on it: [WTF is operations?](https://charity.wtf/2016/05/31/wtf-is-operations-serverless/) and [Operational Best Practices](https://charity.wtf/2016/05/31/operational-best-practices-serverless/).)

#### Stored Procedures as a Service

> I wonder if serverless services will become a thing like stored procedures, a good idea that quickly turns into massive technical debt [\-- Camille Fournier](https://twitter.com/skamille/status/719583067275403265)

Another theme I’ve seen is that Serverless FaaS is “Stored Procedures as a Service.” I think that's come from the fact that many examples of FaaS functions (including some I've used in this article) are small pieces of code that are tightly integrated with a database. If that's all we could use FaaS for I think the name would be useful, but because it is really just a subset of FaaS's capability, I don’t think it’s useful to think about FaaS in these terms.

That being said, it’s worth considering whether FaaS comes with some of the same problems of stored procedures, including the technical debt concern Camille mentions in the above-referenced tweet. There are many lessons that come from using stored procedures that are worth reviewing in the context of FaaS and seeing whether they apply. Consider that stored procedures:

1.  Often require vendor-specific language, or at least vendor-specific frameworks / extensions to a language
2.  Are hard to test since they need to be executed in the context of a database
3.  Are tricky to version control or to treat as a first class application

While not all of these will necessarily apply to all implementations of stored procs, they’re certainly problems one might come across. Let’s see if they might apply to FaaS:

(1) is definitely not a concern for the FaaS implementations I’ve seen so far, so we can scrub that one off the list right away.

For (2) since we’re dealing with ""just code,"" unit testing is definitely as easy as any other code. Integration testing is a different (and legitimate) question though, and one which we’ll discuss later.

For (3), again since FaaS functions are “just code” version control is okay. Until recently application packaging was also a concern, but we’re starting to see maturity here, with tools like Amazon’s [Serverless Application Model](https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html) (SAM) and the Serverless Framework that I mentioned earlier. At the beginning of 2018 Amazon even launched a “[Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/)” (SAR) providing organizations with a way to distribute applications, and application components, built on AWS Serverless services. (Read more on SAR in my fittingly titled article [Examining the AWS Serverless Application Repository](https://blog.symphonia.io/examining-the-aws-serverless-application-repository-9ef316e2fd4).)

## Benefits

So far I've mostly tried to stick to just defining and explaining what Serverless architectures have come to mean. Now I'm going to discuss some of the benefits and drawbacks to such a way of designing and deploying applications. You should definitely not take any decision to use Serverless without significant consideration and weighing of pros and cons.

Let’s start off in the land of rainbows and unicorns and look at the benefits of Serverless.

### Reduced operational cost

Serverless is, at its most simple, an outsourcing solution. It allows you to pay someone to manage servers, databases and even application logic that you might otherwise manage yourself. Since you're using a predefined service that many other people will also be using we see an [Economy of Scale](https://en.wikipedia.org/wiki/Economies_of_scale) effect: you pay less for your managed database because one vendor is running thousands of very similar databases.

The reduced costs appear to you as the total of two aspects. The first are infrastructure cost gains that come purely from sharing infrastructure (e.g., hardware, networking) with other people. The second are labor cost gains: you'll be able to spend less of your own time on an outsourced Serverless system than on an equivalent developed and hosted by yourself.

This benefit, however, isn't too different than what you'll get from Infrastructure as a Service (IaaS) or Platform as a Service (PaaS). But we can extend this benefit in two key ways, one for each of Serverless BaaS and FaaS.

### BaaS: reduced development cost

IaaS and PaaS are based on the premise that server and operating system management can be commodified. Serverless Backend as a Service, on the other hand, is a result of entire application components being commodified.

Authentication is a good example. Many applications code their own authentication functionality, which often includes features such as signup, login, password management, and integration with other authentication providers. On the whole this logic is very similar across most applications, and services like [Auth0](https://auth0.com) have been created to allow us to integrate ready-built authentication functionality into our application without us having to develop it ourselves.

On the same thread are BaaS databases, like [Firebase's database service](https://firebase.google.com/docs/database/). Some mobile application teams have found it makes sense to have the client communicate directly with a server-side database. A BaaS database removes much of the database administration overhead, and typically provides mechanisms to perform appropriate authorization for different types of users, in the patterns expected of a Serverless app.

Depending on your background, these ideas might make you squirm (likely for reasons that we'll get into in the drawbacks section) but there’s no denying the number of successful companies that have been able to produce compelling products with barely any of their own server-side code. [Joe Emison gave a couple of examples](http://www.slideshare.net/ServerlessConf/joe-emison-10x-product-development) of this at the first Serverless Conference.

### FaaS: scaling costs

One of the joys of Serverless FaaS is that—as I put it earlier in this article—“horizontal scaling is completely automatic, elastic, and managed by the provider.” There are several benefits to this but on the basic infrastructural side **the biggest benefit is that you only pay for the compute that you need**, down to a 100ms boundary in the case of AWS Lambda. Depending on your traffic scale and shape, this can be a huge economic win for you.

#### Example: occasional requests

Say you're running a server application that only processes one request every minute, it takes 50 ms to process each request, and your mean CPU usage over an hour is 0.1 percent. If this application is deployed to its own dedicated host then this is wildly inefficient. A thousand other similar applications could all share that one machine.

Serverless FaaS captures this inefficiency, handing the benefit to you in reduced cost. With the example application above you'd be paying for just 100 ms of compute every minute, which is 0.15 percent of the time overall.

This has the following knock-on benefits:

*   For would-be microservices that have very small load requirements it gives support to breaking down components by logic/domain even if the operational costs of such fine granularity might have been otherwise prohibitive.
*   Such cost benefits are a great democratizer. If companies or teams want to try out something new they have extremely small operational costs associated with “dipping their toe in the water” when they use FaaS for their compute needs. In fact, if your total workload is relatively small (but not entirely insignificant), you may not need to pay for any compute at all due to the “free tier” provided by some FaaS vendors.

#### Example: inconsistent traffic

Let's look at another example. Say your traffic profile is very spiky—perhaps your baseline traffic is 20 requests per second, but that every five minutes you receive 200 requests per second (10 times the usual number) for 10 seconds. Let's also assume, for the sake of the example, that your baseline performance maxes out your preferred host server type, and that you don't want to reduce your response time during the traffic spike phase. How do you solve for this?

In a traditional environment you may need to increase your total hardware count by a factor of 10 over what it might otherwise be to handle the spikes, even though the total durations of the spikes account for less than 4 percent of total machine uptime. Auto-scaling is likely not a good option here due to how long new instances of servers will take to come up—by the time your new instances have booted the spike phase will be over.

With Serverless FaaS however this becomes a non-issue. You literally do nothing differently than if your traffic profile was uniform, and you only pay for the extra compute capacity during the spike phases.

Obviously I've deliberately picked examples here for which Serverless FaaS gives huge cost savings, but the point is to show that, from a scaling viewpoint, unless you have a very steady traffic shape that consistently uses the whole capacity of your server hosts, then you may save money using FaaS.

One caveat about the above: if your traffic is uniform and would consistently make good utilization of a running server you may not see this cost benefit, and you may actually spend more by using FaaS. You should do some math and compare current provider costs with the equivalents of running full-time servers to see whether costs are acceptable.

For more detail on the cost benefits of FaaS I recommend the paper “[Serverless Computing: Economic and Architectural Impact](http://www.doc.ic.ac.uk/~rbc/papers/fse-serverless-17.pdf)” by Gojko Adzic and Robert Chatley.

#### Optimization is the root of some cost savings

There is one more interesting aspect to mention about FaaS costs: any performance optimizations you make to your code will not only increase the speed of your app, but they’ll have a direct and immediate link to reduction in operational costs, subject to the granularity of your vendor’s charging scheme. For example, say an application initially takes one second to process an event. If, through code optimization, this is reduced to 200 ms, it will (on AWS Lambda) immediately see an 80 percent savings in compute costs without making any infrastructural changes.

### Easier operational management

This next section comes with a giant asterisk—some aspects of operations are still tough for Serverless, but for now we’re sticking with our unicorn and rainbow friends…

On the Serverless BaaS side of the fence, it’s fairly obvious why operational management is more simple than other architectures: supporting fewer components equals less work.

On the FaaS side there are a number of aspects at play though, and I’m going to dig into a couple of them.

#### Scaling benefits of FaaS beyond infrastructure costs

While scaling is fresh in our minds from the previous section it’s worth noting that not only does the scaling functionality of FaaS reduce compute cost, it also reduces operational management because the scaling is automatic.

In the best case, if your scaling process was a manual one—say, a human being needs to explicitly add and remove instances to an array of servers—with FaaS you can happily forget about that and let your FaaS vendor scale your application for you.

Even if you’ve gotten to the point of using auto-scaling in a non-FaaS architecture, that still requires setup and maintenance. This work is no longer necessary with FaaS.

Similarly, since scaling is performed by the provider on every request/event, **you no longer need to think about the question of how many concurrent requests you can handle** before running out of memory or seeing too much of a performance hit—at least not within your FaaS-hosted components. Downstream databases and non-FaaS components will have to be reconsidered in light of a possibly significant increase in their load.

#### Reduced packaging and deployment complexity

Packaging and deploying a FaaS function is simple compared to deploying an entire server. All you’re doing is packaging all your code into a zip file, and uploading it. No Puppet/Chef, no start/stop shell scripts, no decisions about whether to deploy one or many containers on a machine. If you’re just getting started you don’t even need to package anything—you may be able to write your code in the vendor console itself (this, obviously, is not recommended for production code!).

This process doesn't take long to describe, but for some teams this benefit may be absolutely huge: **a fully Serverless solution requires zero system administration**.

PaaS solutions have similar deployment benefits, but as we saw earlier, when comparing PaaS with FaaS, the scaling advantages are unique to FaaS.

#### Time to market and continuous experimentation

Easier operational management is a benefit that we as engineers understand, but what does that mean to our businesses?

The obvious reason is cost: less time spent on operations equals fewer people needed for operations, as I’ve already described. But a far more important reason in my mind is [time to market](https://en.wikipedia.org/wiki/Time_to_market). As our teams and products become increasingly geared toward lean and agile processes, we want to continually try new things and rapidly update our existing systems. While simple redeployment in the context of continuous delivery allows rapid iteration of stable projects, having a good _new-idea-to-initial-deployment_ capability allows us to try new experiments with low friction and minimal cost.

The new-idea-to-initial-deployment story for FaaS is often excellent, especially for simple functions triggered by a maturely defined event in the vendor’s ecosystem. For instance, say your organization is already using [AWS Kinesis](https://aws.amazon.com/kinesis/), a Kafka-like messaging system, for broadcasting various types of real-time events through your infrastructure. With AWS Lambda you can develop and deploy a new production event listener against that Kinesis stream in minutes—you could try several different experiments all in one day!

While the cost benefits are the most easily expressed improvements with Serverless, **it’s this reduction in lead time that makes me most excited**. It can enable a product development mindset of [_continuous experimentation_](https://www.youtube.com/watch?v=mzjhEZLTEpM), and that is a true revolution for how we deliver software in companies.

### ""Greener"" computing?

Over the last couple of decades, there’s been a massive increase in the numbers and sizes of data centers in the world. As well as the physical resources necessary to build these centers, the associated energy requirements are so large that Apple, Google, and the like talk about hosting some of their data centers near sources of renewable energy in order to reduce the fossil-fuel burning impact of such sites that would otherwise be necessary.

Idle, but powered up, servers consume an untoward amount of this energy - and they’re a big part of the reason why we need so many, and bigger data centers:

> Typical servers in business and enterprise data centers deliver between 5 and 15 percent of their maximum computing output on average over the course of the year.
> 
> \-- [Forbes](http://www.forbes.com/sites/benkepes/2015/06/03/30-of-servers-are-sitting-comatose-according-to-research/#2f4944612c2)

That’s extraordinarily inefficient, and creates a huge environmental impact.

On one hand it’s likely that cloud infrastructure has probably helped reduce this impact already since companies can “buy” more servers on demand, only when they absolutely need them, rather than provisioning all only possibly necessary servers a long time in advance. However one could also argue that the ease of provisioning servers may have made the situation worse if a lot of those servers are being left around without adequate capacity management.

Whether we use a self-hosted server, IaaS, or PaaS infrastructure solution we’re still manually making capacity decisions about our applications that will often last months or years. Typically we are cautious, and rightly so, about managing capacity, and so we over-provision, leading to the inefficiencies just described. With a Serverless approach **we no longer make such capacity decisions ourselves**—we let the Serverless vendor provision just enough compute capacity for our needs in real time. The vendor can then make their own capacity decisions in aggregate across their customers.

This difference should lead to far more efficient use of resources across data centers, and therefore to reductions in environmental impact compared with traditional capacity management approaches.

## Drawbacks

So, dear reader, I hope you enjoyed your time in the land of rainbows, unicorns, and all things shiny and nice, because we’re about to get slapped around the face by the wet fish of reality.

There’s certainly a lot to like about Serverless architectures, but they come with significant trade-offs. Some of these trade-offs are inherent to the concepts; they can’t be entirely fixed by progress, and they’re always going to need to be considered. Others are tied to current implementations; with time we can expect to see these resolved.

### Inherent drawbacks

#### Vendor control

With any outsourcing strategy you are giving up control of some of your system to a third-party vendor. Such lack of control may manifest as system downtime, unexpected limits, cost changes, loss of functionality, forced API upgrades, and more. Charity Majors, who I referenced earlier, explains this problem in much more detail in the Tradeoffs section of [this article](https://charity.wtf/2016/05/31/operational-best-practices-serverless/):

> \[The Vendor service\], if it is smart, will put strong constraints on how you are able to use it, so they are more likely to deliver on their reliability goals. When users have flexibility and options it creates chaos and unreliability. If the platform has to choose between your happiness vs thousands of other customers’ happiness, they will choose the many over the one every time — as they should.
> 
> \-- [Charity Majors](https://charity.wtf/2016/05/31/operational-best-practices-serverless/)

#### Multitenancy problems

[Multitenancy](https://en.wikipedia.org/wiki/Multitenancy) refers to the situation where multiple instances of software for several different customers (or tenants) are run on the same machine, and possibly within the same hosting application. It's a strategy to achieve the economy of scale benefits we mentioned earlier. Service vendors try their darndest to make customers feel that they each are the only ones using their system, and typically good service vendors do a great job of that. But no one’s perfect and sometimes multitenant solutions can have problems with security (one customer being able to see another’s data), robustness (an error in one customer’s software causing a failure in a different customer’s software), and performance (a high-load customer causing another to slow down).

These problems are not unique to Serverless systems—they exist in many other service offerings that use multitenancy. AWS Lambda is now mature enough that we don’t expect to see these kind of problems with it, but you should be on the lookout for such issues with any service that is less mature, whether it’s from AWS or other vendors.

#### Vendor lock-in

It’s very likely that whatever Serverless features you’re using from one vendor will be implemented differently by another vendor. If you want to switch vendors you’ll almost certainly need to update your operational tools (deployment, monitoring, etc.), you’ll probably need to change your code (e.g., to satisfy a different FaaS interface), and you may even need to change your design or architecture if there are differences to how competing vendor implementations behave.

Even if you manage to easily migrate one part of your ecosystem, you may be more significantly impacted by another architectural component. For instance, say you’re using AWS Lambda to respond to events on an AWS Kinesis message bus. The differences between [AWS Lambda](https://aws.amazon.com/lambda/), [Google Cloud Functions](https://cloud.google.com/functions/docs/) and [Microsoft Azure Functions](https://azure.microsoft.com/en-us/services/functions/) may be relatively small, but you’re still not going to be able to hook up the latter two vendor implementations directly to your AWS Kinesis stream. This means that **moving, or porting, your code from one solution to another isn’t going to be possible without also moving other chunks of your infrastructure**.

A lot of people are scared by this idea—it’s not a great feeling to know that if your chosen cloud vendor today needs to change tomorrow that you have a lot of work to do. Because of this some people adopt a “multi-cloud” approach, developing and operating applications in a way that’s agnostic of the actual cloud vendor being used. Often this is even more costly than a single-cloud approach—so while vendor lock-in is a legitimate concern, I still recommend picking a vendor that you’re happy with and exploiting their capabilities as much as possible. I talk more about why that is in [this article](https://blog.symphonia.io/on-serverless-multi-cloud-and-vendor-lock-in-da930b3993f).

#### Security concerns

Embracing a Serverless approach opens you up to a large number of security questions. Here’s just a very brief smattering of things to consider—be sure to explore what else could impact you.

*   Each Serverless vendor that you use increases the number of different security implementations embraced by your ecosystem. This increases your surface area for malicious intent and ups the likelihood of a successful attack.
*   If using a BaaS database directly from your mobile platforms you are losing the protective barrier a server-side application provides in a traditional application. While this is not a dealbreaker, it does require significant care in designing and developing your application.
*   As your organization embraces FaaS you may experience a cambrian explosion of FaaS functions across your company. Each of those functions offers another vector for problems. For instance, in AWS Lambda, every Lambda function typically goes hand in hand with a configured [IAM policy](https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html), which are easy to get wrong. This is not a simple topic, nor is it one that can be ignored. IAM management needs careful consideration, at least within production AWS accounts.

#### Repetition of logic across client platforms

With a “full” BaaS architecture no custom logic is written on the server side—it’s all in the client. This may be fine for your first client platform, but as soon as you need your next platform you’re going to need to repeat the implementation of a subset of that logic—and you wouldn’t have needed this repetition in a more traditional architecture. For instance, if using a BaaS database in this kind of system, all your client apps (perhaps web, native iOS, and native Android) now need to be able to communicate with your vendor database, and will need to understand how to map from your database schema to application logic.

Furthermore, if you want to migrate to a new database at any point, you’re going to need to replicate that coding/coordination change across all your different clients.

#### Loss of server optimizations

With a full BaaS architecture there is no opportunity to optimize your server design for client performance. The [‘Backend For Frontend’](http://samnewman.io/patterns/architectural/bff/) pattern exists to abstract certain underlying aspects of your whole system within the server, partly so that the client can perform operations more quickly and use less battery power in the case of mobile applications. Such a pattern is not available for full BaaS.

Both this and the previous drawback exist for full BaaS architectures where all custom logic is in the client and the only backend services are vendor supplied. A mitigation of both of these is to embrace FaaS, or some other kind of lightweight server-side pattern, to move certain logic to the server.

#### No in-server state for Serverless FaaS

After a couple of BaaS-specific drawbacks, let’s talk about FaaS for a moment. I said earlier:

> FaaS functions have significant restrictions when it comes to local .. state. .. You should not assume that state from one invocation of a function will be available to another invocation of the same function.

The reason for this assumption is that with FaaS we typically have no control over when the host containers for our functions start and stop.

I also said earlier that the alternative to local state was to follow factor number 6 of the Twelve-Factor app, which is to embrace this very constraint:

> Twelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, typically a database.
> 
> \-- [The Twelve-Factor App](http://12factor.net/processes)

Heroku recommends this way of thinking, but you can bend the rules when running on their PaaS since you have control of when Heroku Dynos are started and stopped. With FaaS there’s no bending the rules.

So where does your state go with FaaS if you can’t keep it in memory? The quote above refers to using a database, and in many cases a fast NoSQL database, out-of-process cache (e.g., Redis), or an external object/file store (e.g., S3) will be some of your options. But these are all a lot slower than in-memory or on-machine persistence. You’ll need to consider whether your application is a good fit for this.

Another concern in this regard is in-memory caches. Many apps that are reading from a large data set stored externally will keep an in-memory cache of part of that data set. You may be reading from “reference data” tables in a database and using something like [Ehcache](http://www.ehcache.org/). Alternatively you may be reading from an HTTP service that specifies cache headers, in which case your in-memory HTTP client can provide a local cache.

FaaS does allow some use of local cache, and this may be useful assuming your functions are used frequently enough. For instance, with AWS Lambda we typically expect a function instance to stick around for a few hours as long as it’s used at least once every few minutes. That means we can use the (configurable) 3 GB RAM, or 512 MB local “/tmp” space, that Lambda can provide us. For some caches this may be sufficient. Otherwise you will need to no longer assume in-process cache, and you’ll need to use a low-latency external cache like Redis or Memcached. However this requires extra work, and may be prohibitively slow depending on your use case.

### Implementation drawbacks

The previously described drawbacks are likely always going to exist with Serverless. We’ll see improvements in mitigating solutions, but they’re always going to be there.

The remaining drawbacks, however, come down purely to the current state of the art. With inclination and investment on the part of vendors and/or a heroic community these can all be wiped out. In fact this list has shrunk since the first version of this article.

#### Configuration

When I wrote the first version of this article AWS offered very little in the way of configuration for Lambda functions. I’m glad to say that has now been fixed, but it’s still something that’s worth checking if you use a less mature platform.

#### DoS yourself

Here’s an example of why _caveat emptor_ is a key phrase whenever you’re dealing with FaaS. AWS Lambda limits how many concurrent executions of your Lambda functions you can be running at a given time. Say that this limit is one thousand; that means that at any time you are allowed to be executing one thousand function instances. If you to need to go above that you may start getting exceptions, queueing, and/or general slow down.

The problem here is that this limit is across an entire AWS account. Some organizations use the same AWS account for both production and testing. That means if someone, somewhere, in your organization performs a new type of load test and starts trying to execute one thousand concurrent Lambda functions, you’ll accidentally [DoS](https://en.wikipedia.org/wiki/Denial-of-service_attack) your production applications. Oops.

Even if you use different AWS accounts for production and development, one overloaded production lambda (e.g., processing a batch upload from a customer) could cause your separate real-time lambda-backed production API to become unresponsive.

Amazon provides some protection here, [by way of **reserved concurrency**](https://blog.symphonia.io/aws-lambda-reserved-concurrency-f2c3a32b9f1d). Reserved concurrency allows you to limit the concurrency of a Lambda function so that it doesn’t blow up the rest of your account, while simultaneously making sure there is always capacity available no matter what the other functions in an account are doing. However, reserved concurrency is not turned on by default for an account, and it needs careful management.

#### Execution duration

Earlier in the article I mentioned that AWS Lambda functions are aborted if they run for longer than five minutes. This has been consistent now for a couple of years, and AWS has shown no signs of changing it.

#### Startup latency

I talked about cold starts earlier, and mentioned [my article on the subject](https://blog.symphonia.io/learning-lambda-part-8-addfab6b460d). AWS has improved this area over time, but there are still significant concerns here, especially for only occasionally triggered JVM-implemented functions and/or functions that need access to VPC resources. Continued improvements are expected in this area.

Okay, that’s enough picking on AWS Lambda specifically. I’m sure other vendors also have some pretty ugly skeletons barely in their closets.

#### Testing

Unit testing Serverless apps is fairly simple for reasons I’ve talked about earlier: any code that you write is “just code,” and for the most part there aren’t a whole bunch of custom libraries you have to use or interfaces that you have to implement.

Integration testing Serverless apps, on the other hand, is hard. In the BaaS world you’re deliberately relying on externally provided systems rather than, for instance, your own database. So should your integration tests use the external systems too? If yes, then how amenable are those systems to testing scenarios? Can you easily tear up and tear down state? Can your vendor give you a different billing strategy for load testing?

If you want to stub those external systems for integration testing does the vendor provide a local stub simulation? If so, how good is the fidelity of the stub? If the vendor doesn’t supply a stub how will you implement one yourself?

The same kinds of problems exist in FaaS land, although there’s been improvement in this area. It’s now possible to run FaaS functions locally for both Lambda and Microsoft Azure. However no local environment can fully simulate the cloud environment; relying solely on local FaaS environments is not a strategy I’d recommend. In fact, I’d go further and suggest that your canonical environment for running automated integration tests, at least as part of a [deployment pipeline](https://martinfowler.com/bliki/DeploymentPipeline.html), should be the cloud, and that you should use the local testing environments primarily for interactive development and debugging. These local testing environments continue to improve - [SAM CLI](https://github.com/awslabs/aws-sam-cli), for example, provides fast feedback for developing a Lambda-backed HTTP API application.

And remember those cross-account execution limits I mentioned a couple of sections ago when running integration tests in the cloud? You probably want to at least isolate such tests from your production cloud accounts, and likely use even more fine-grained accounts than that.

Part of the reason that considering integration tests is a big deal is that our units of integration with Serverless FaaS (i.e., each function) are a lot smaller than with other architectures, so we rely on integration testing a lot more than we may with other architectural styles.

Relying on cloud-based testing environments rather than running everything locally on my laptop has been quite a shock to me. But times change, and the capabilities we get from the cloud are similar to what engineers at Google and the like have had for over a decade. Amazon now [even lets you run your IDE in the cloud](https://aws.amazon.com/cloud9/). I haven’t quite made that jump yet—but it’s probably coming.

#### Debugging

Debugging with FaaS is an interesting area. There’s been progress here, mostly related to running FaaS functions locally, in line with the testing updates discussed above. Microsoft, as I mentioned earlier, provides excellent debugging support for functions run locally, yet triggered by remote events. Amazon offers something similar, but not yet triggered by production events.

Debugging functions actually running in a production cloud environment is a different story. Lambda at least has no support for that yet, though it would be great to see such a capability.

#### Deployment, packaging, and versioning

This is an area under active improvement. AWS has made vast strides in improving this area, and I discuss it further in the “Future of Serverless” section a little later.

#### Discovery

“[Discovery](https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/)” is a frequently discussed topic in the microservices world: it’s the question of how one service can call the correct version of another service. In the Serverless world there’s been little discussion of discovery. Initially this concerned me, but now I’m less worried. Many usages of Serverless are inherently event driven, and here the consumer of an event typically self registers to some extent. For API-oriented usages of FaaS, we typically use them behind an API gateway. In this context we use DNS in front of the API gateway, and automated deployment/traffic shifting behind the gateway. We may even use further layers in front of the API gateway (e.g., using [AWS CloudFront](https://aws.amazon.com/cloudfront/)) to support cross-region resiliency.

I’m leaving this idea in “limitations” since I don’t think it’s been proven yet, but it may end up being fine after all.

#### Monitoring and observability

Monitoring is a tricky area for FaaS because of the ephemeral nature of containers. Most of the cloud vendors give you some amount of monitoring support, and we’ve seen a lot of third-party work here from traditional monitoring vendors too. Still, whatever they—and you—can ultimately do depends on the fundamental data the vendor gives you. This may be fine in some cases, but for AWS Lambda, at least, it is very basic. What we really need in this area are open APIs and the ability for third-party services to help out more.

#### API gateway definition, and over-ambitious API gateways

ThoughtWorks, as part of its Technology Radar publication, has discussed [over-ambitious API gateways](https://www.thoughtworks.com/radar/platforms/overambitious-api-gateways). While the link refers to API gateways in general (e.g., for those fronting traditionally deployed microservices) it can definitely apply to the use of API gateways as HTTP frontend-to-FaaS functions. The problem is that API gateways offer the opportunity to perform much application-specific logic within their own configuration/definition domain. This logic is typically hard to test, version control, and, sometimes, define. Typically it’s far better for such logic to remain in program code like the rest of the application.

There’s definitely a tension here though. If we consider an API gateway as a BaaS, isn’t it valuable to consider all the options it gives us, in order to save ourselves work? And if we’re paying for use of an API gateway per request, as opposed to by per CPU utilization, isn’t it more cost efficient to maximize the use of the API gateway’s functionality?

My guidance is to use enhanced API gateway functionality judiciously, and only if it really is saving you effort in the long run, including in how it is deployed, monitored, and tested. Definitely don’t use API gateway features that can’t be expressed within a source-controllable configuration file or deployment script.

Regarding difficulty of definition, Amazon’s API gateway used to force you to create some tricky configuration to map HTTP requests and responses to/from Lambda functions. Much of that has been made more simple with [Lambda proxy integration](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html), but you still need to understand some occasionally tricky nuances. Those elements themselves are made easier using open-source projects like the [Serverless Framework](https://github.com/serverless/serverless) and [Claudia.js](https://github.com/claudiajs/claudia), or Amazon’s [Serverless Application Model](https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html).

#### Deferring of operations

I mentioned earlier that Serverless is not “No Ops”—there’s still plenty to do from monitoring, architectural scaling, security, and networking points of view. However, it’s easy to ignore operations when you’re getting started (“Look, ma, no operating system!”). The danger here is getting lulled into a false sense of security. Maybe you have your app up and running but it unexpectedly appears on Hacker News, and suddenly you have 10 times the amount of traffic to deal with and oops! You’re accidentally DoS’ed and have no idea how to deal with it.

The fix here is education. Teams using Serverless systems need to consider operational activities early, and it is on vendors and the community to provide the teaching to help them understand what this means. Areas like preemptive load testing, and [chaos engineering](https://www.oreilly.com/webops-perf/free/chaos-engineering.csp), will also help teams teach themselves.

## The Future of Serverless

We’re coming to the end of this journey into the world of Serverless architectures. To close out I’m going to discuss a few areas where I think the Serverless world may develop in the coming months and years.

### Mitigating the drawbacks

Serverless is still a fairly new world. As such, the previous section on drawbacks was extensive, and I didn’t even cover everything I could have. The most important developments of Serverless are going to be to mitigate the inherent drawbacks and remove, or at least improve, the implementation drawbacks.

#### Tooling

Tooling continues to be a concern with Serverless, and that’s because so many of the technologies and techniques are new. Deployment/application bundling and configuration have both improved over the last two years, with the Serverless framework and Amazon’s Serverless Application Model leading the way. However the “first 10 minutes” experience still isn’t as universally amazing as it could be, although Amazon and Google could look to Microsoft and Auth0 for more inspiration.

An area I’ve been excited to see being actively addressed by cloud vendors is higher-level release approaches. In traditional systems, teams have typically needed to code their own processes to handle “traffic-shifting” ideas like blue-green deployment and [canary releases](https://martinfowler.com/bliki/CanaryRelease.html). With this in mind Amazon supports [automatic traffic shifting](https://docs.aws.amazon.com/lambda/latest/dg/automating-updates-to-serverless-apps.html) for both Lambda and API Gateway. Such concepts are even more useful in Serverless systems where so many individually deployed components make up a system—atomic release of 100 Lambda functions at a time is simply not possible. In fact, [Nat Pryce](https://twitter.com/natpryce) described to me the idea for a “mixing desk” approach, one where we can gradually bring groups of components in and out of a traffic flow.

Distributed monitoring is probably the area in need of the most significant improvement. We’ve seen the early days of work here from Amazon’s [X-Ray](https://aws.amazon.com/xray/) and various third-party products, but this is definitely not a solved problem.

Remote debugging is also something I’d like to see more widespread. Microsoft Azure Functions supports this, but Lambda does not. Being able to breakpoint a remotely running function is a very powerful capability.

Finally, I expect to see improvements for tooling of “meta operations”—how to more effectively look after hundreds or thousands of FaaS functions, configured services, etc. For instance, organizations need to be able to see when certain service instances are no longer used (for security purposes, if nothing else), they need better grouping and visibility of cross-service costs (especially for autonomous teams that have cost responsibilities), and more.

#### State management

The lack of persistent in-server state for FaaS is fine for a good number of applications, but it’s a deal breaker for many others—whether it be for large cache sets or fast access to session state.

One workaround for high-throughput applications will likely be for vendors to keep function instances alive for longer between events, and let regular in-process caching approaches do their job. This won’t work 100 percent of the time since the cache won’t be warm for every event, but this is the same concern that already exists for traditionally deployed apps using auto-scaling.

A better solution could be very low-latency access to out-of-process data, like being able to query a Redis database with very low network overhead. This doesn’t seem too much of a stretch given that Amazon already offer a hosted Redis solution in their [Elasticache](https://aws.amazon.com/elasticache/) product, and that they already allow relative co-location of EC2 (server) instances using [Placement Groups](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html).

More likely, though, I think we’re going to see different kinds of hybrid (Serverless and non-Serverless) application architectures embraced to take account of the externalized-state constraint. For instance, for low-latency applications you may see an approach of a regular, long-running server handling an initial request, gathering all the context necessary to process that request from its local and external state, then handing off a fully contextualized request to a farm of FaaS functions that don’t need to look up data externally.

#### Platform improvements

Certain drawbacks to Serverless FaaS right now come down to the way platforms are implemented. Execution duration, startup latency, and cross-function limits are three obvious ones. These will likely either be fixed by new solutions or given workarounds with possible extra costs. For instance, I imagine that startup latency could be mitigated by allowing a customer to request that two instances of a FaaS function are always available at low latency, with the customer paying for this availability. Microsoft Azure Functions has elements of this idea with [Durable Functions](https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview), and [App Service plan-hosted functions](https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale).

Of course we’ll see platform improvements beyond just fixing current deficiencies, and these will be exciting too.

#### Education

Many vendor-specific inherent drawbacks with Serverless are being mitigated through education. Everyone using such platforms needs to think actively about what it means to have so much of their ecosystems hosted by one or many application vendors. We need to think about questions like, “Do we want to consider parallel solutions from different vendors in case one becomes unavailable?” and “How do applications gracefully degrade in the case of a partial outage?”

Another area for education is technical operations. Many teams now have fewer sysadmins than they used to, and Serverless is going to accelerate this change. But sysadmins do more than just configure Unix boxes and Chef scripts—they’re often the people on the front line of support, networking, security, and the like.

A true [DevOps culture](https://martinfowler.com/bliki/DevOpsCulture.html) becomes even more important in a Serverless world since those other non-sysadmin activities still need to get done, and often it’s developers who are now responsible for them. These activities may not come naturally to many developers and technical leads, so education and close collaboration with operations folk is of utmost importance.

#### Increased transparency and clearer expectations from vendors

Finally, on the subject of mitigation: vendors are going to have to be even more clear in the expectations we can have of their platforms as we rely on them for more of our hosting capabilities. While migrating platforms is hard, it’s not impossible, and untrustworthy vendors will see their customers taking their business elsewhere.

### The emergence of patterns

Our understanding of how and when to use Serverless architectures is still in its infancy. Right now teams are throwing all kinds of ideas at Serverless platforms and seeing what sticks. Thank goodness for pioneers! We’re starting to see patterns of recommended practice occur, and this knowledge will only grow.

Some of the patterns we’re seeing are in application architecture. For instance, how big can FaaS functions get before they get unwieldy? Assuming we can atomically deploy a group of FaaS functions, what are good ways of creating such groupings? Do they map closely to how we’d currently clump logic into microservices, or does the difference in architecture push us in a different direction?

One particularly interesting area of active discussion in Serverless application architecture is how it interacts with event-thinking. Ajay Nair, head of product for AWS Lambda, [gave a great talk](https://serverless.com/blog/ajay-nair-good-citizen-event-driven-world-emit-2017/) on this in 2017, and it’s [one of the main areas of discussion](https://github.com/cloudevents/spec/blob/master/spec.md) for the CNCF Serverless Working Group.

Extending this further, what are good ways of creating hybrid architectures between FaaS and traditional “always on” persistent server components? What are good ways of introducing BaaS into an existing ecosystem? And, for the reverse, what are the warning signs that a fully or mostly BaaS system needs to start embracing or using more custom server-side code?

We’re also seeing many more usage patterns discussed. One of the standard examples for FaaS is media conversion, e.g. whenever a large media file is stored to an S3 bucket then automatically running a process to create smaller versions in another bucket. However we also now see significant use of Serverless in data-processing pipelines, highly scalable web APIs, and as general purpose “glue” code in operations. Some of these patterns can be implemented as generic components, directly deployable into organizations; [I’ve written about Amazon’s Serverless Application Repository](https://blog.symphonia.io/examining-the-aws-serverless-application-repository-9ef316e2fd4), which has an early form of this idea.

Finally, we’re starting to see recommended operational patterns as tooling improves. How do we logically aggregate logging for a hybrid architecture of FaaS, BaaS, and traditional servers? How do we most effectively debug FaaS functions? A lot of the answers to these questions—and the emerging patterns—are coming from the cloud vendors themselves, and I expect activity to grow in this area.

### Globally distributed architectures

In the Pet Store example that I gave earlier we saw that the single Pet Store server was broken up into several server-side components and some logic that moved all the way up to the client—but fundamentally this was still an architecture focused either on the client, or on remote services in known locations.

What we’re starting to see in the Serverless world now is a much fuzzier distribution of responsibility. An example is Amazon’s [Lambda@Edge](https://aws.amazon.com/lambda/edge/) product: a way to run Lambda functions in Amazon’s CloudFront Content Delivery Network. With Lambda@Edge a Lambda function is now globally distributed—a single upload activity by an engineer will mean that function is deployed to [over 100 data centers](https://aws.amazon.com/cloudfront/details/) across the globe. This is not a design that we are accustomed to, and comes with a raft of both constraints and capabilities.

Further, Lambda functions can be run [on devices](https://aws.amazon.com/greengrass/), machine-learning models can be run on mobile clients, and before you know it, the bifurcation of “client side” and “server side” no longer seems to make sense. We in fact now see a spectrum of locality of components, spreading out from the human user. Serverless will become Regionless.

### Beyond ""FaaSification""

Most usages of FaaS that I’ve seen so far are mostly about taking existing code and design ideas and “FaaSifying” them: converting them to a set of stateless functions. This is powerful, but I expect that we’ll start to see more abstractions, and possibly languages, using FaaS as an underlying implementation that gives developers the benefits of FaaS without actually thinking about their application as a set of discrete functions.

As an example, I don’t know whether Google uses a FaaS implementation for its [Dataflow](https://cloud.google.com/dataflow/) product, but I can imagine someone creating a product or open-source project that does something similar, and using FaaS as an implementation. A comparison here is something like [Apache Spark](http://spark.apache.org/) . Spark is a tool for large-scale data processing, and offers very high-level abstractions that can use [Amazon EMR and Hadoop](https://aws.amazon.com/elasticmapreduce/details/spark/) as its underlying platform.

### Testing

I think there’s more work to be done on integration and acceptance testing of Serverless systems, but a lot of this work is the same as “cloud native” microservice systems developed in more traditional ways.

One radical idea here is to embrace ideas like [testing in production](https://youtu.be/L-WOJmCcA9g) and [monitoring-driven development](https://nl.devoteam.com/en/blog-post/monitoring-driven-development-making-money/); once code has passed basic unit-test validation, deploy to a subset of traffic and see how it compares to the previous version. This can be combined with the traffic-shifting tools I mentioned earlier. This doesn’t work for all contexts, but it can be a surprisingly effective tool for many teams.

### Portable implementations

There are a couple ways that teams can use Serverless, while being less tied to specific cloud vendors.

#### Abstractions over vendor implementations

The [Serverless Framework](http://serverless.com/) primarily exists to ease operational tasks for Serverless applications, but also provides an amount of neutrality about where and how such applications are deployed. For example, it would be great to be able to easily switch, even right now, between AWS API Gateway + Lambda and Auth0 webtask, depending on the operational capabilities of each of the platforms.

A tricky aspect of this is modeling abstracted FaaS coding interfaces without some idea of standardization, but that is precisely the work of the CNCF Serverless Working Group on [CloudEvents](https://github.com/cloudevents/spec/blob/master/spec.md).

It’s questionable how much value exists in providing a deployment abstraction for multiple platforms though, once complexities of operations rear their ugly heads. For instance getting security right for one cloud is always likely to be different in another cloud.

#### Deployable implementations

It may sound odd to suggest that we use Serverless techniques without using third-party providers, but consider these thoughts:

*   Maybe we’re a large technical organization and we want to start offering a [Firebase](https://firebase.google.com/docs/database/)\-like database experience to all of our mobile application development teams, but we want to use our existing database architecture as the back end.
*   I talked earlier about “Serverful” FaaS platform—being able to use FaaS-style architecture for some of our projects, but submitting to compliance, legal, etc. reasons to run our applications on premise.

In either of these cases there are still many benefits of using a Serverless approach without those that come from vendor hosting. There’s a precedent here—consider Platform as a Service (PaaS). The initial popular PaaS were all cloud based (e.g., Heroku), but, fairly quickly, people saw the benefits of running a PaaS environment on their own systems—a so-called “Private” PaaS (e.g., [Cloud Foundry](https://en.wikipedia.org/wiki/Cloud_Foundry), as I mentioned earlier in the article).

I can imagine, like private PaaS implementations, that we’ll see both open-source and commercial implementations of BaaS and FaaS concepts becoming popular, especially those integrated with container platforms like Kubernetes.

### Community

There is already a good-size Serverless community with multiple conferences, meetups in many cities, and various online groups. I expect this will continue to grow, probably in the same vein of communities like Docker and Spring.

## Conclusion

Serverless, despite the confusing name, is a style of architecture where we rely on running our own server-side systems as part of our applications to a smaller extent than usual. We do this through two techniques: BaaS, where we tightly integrate third-party remote application services directly into the frontend of our apps, and FaaS, which moves server-side code from long-running components to ephemeral function instances.

Serverless is not the correct approach for every problem, so be wary of anyone who says it will replace all of your existing architectures. Be careful if you take the plunge into Serverless systems now, especially in the FaaS realm. While there are riches—of scaling and saved deployment effort—to be plundered, there also be dragons—of debugging and monitoring—lurking right around the next corner.

Those riches shouldn’t be dismissed too quickly, however, since there are significant positive aspects to Serverless architecture, including reduced operational and development costs, easier operational management, and reduced environmental impact. But I think the most important benefit is the reduced feedback loop of creating new application components. I’m a huge fan of “lean” approaches, largely because I think there is a lot of value in getting technology in front of an end user as soon as possible to get early feedback, and the reduced time to market that comes with Serverless fits right in with this philosophy.

Serverless services, and our understanding of how to use them, are today (May 2018) in the “slightly awkward teenage years” of maturity. There will be many advances in the field over the coming years, and it will be fascinating to see how Serverless fits into our architectural toolkit.

* * *

## Acknowledgements

Thanks to the following for their input into this article: Obie Fernandez, Martin Fowler, Paul Hammant, Badri Janakiraman, Kief Morris, Nat Pryce, Ben Rady, Carlos Nunez, John Chapin, Robert Bagge, Karel Sague Alfonso, Premanand Chandrasekaran, Augusto Marietti, Roberto Sarrionandia, Donna Malayeri.

Thanks to Badri Janakiraman and Ant Stanley who provided input for the sidebar on origins of the term.

Thanks to members of my former team at Intent Media for tackling this new technology with appropriately sceptical enthusiasm: John Chapin, Pete Gieser, Sebastián Rojas and Philippe René.

Thanks to Sid Orlando for performing copy-editing.

Finally, thanks to my friends and colleagues in the Serverless community, especially those whose content I link to in this article.

Significant Revisions

_22 May 2018:_ Substantive update of entire article. Read [here](https://go.symphonia.io/sa-may-2018) for details of this update.

_04 August 2016:_ Added “Future” and “Conclusion”

_25 July 2016:_ Added origins sidebar and section “Comparison with containers”

_18 July 2016:_ Added “Drawbacks”

_13 July 2016:_ Added “Benefits”

_17 June 2016:_ Added “What isn’t Serverless’”

_16 June 2016:_ Added “Unpacking ‘Function as a Service’”

_15 June 2016:_ Published first installment - A couple of examples",null,undefined
2020-02-18T18:33:31.000Z,https://twitter.com/shaikhulud/status/1229836357209657346,true,"[""best""]",tweet,shaikhulud_1229836357209657346,shaikhulud,twitter,null,"Рыночная стоимость Facebook составляет 620 миллиардов долларов. https://t.co/fOdT06wlxG
![](https://pbs.twimg.com/media/ERFBahJWoAAKbtr.png)
",SonyBoy Max Z,undefined
2020-02-14T08:38:00.000Z,https://twitter.com/simply_brunette/status/1228236940022956032,true,"[""best""]",tweet,simply_brunette_1228236940022956032,simply_brunette,twitter,null,"- Бог землю за 7 дней создал, а мы пропсу прокинуть за 7 дней не можем!
- Бог же землю не на реакте создавал

#yabudni
",Elena Kunakova,undefined
2020-04-08T13:18:21.000Z,https://twitter.com/sixveeceear/status/1247876435278168065,true,"[""best""]",tweet,sixveeceear_1247876435278168065,sixveeceear,twitter,null,"#skyway_book #pixelart  #ドット絵 https://t.co/fUI87h0IrS
![](https://pbs.twimg.com/media/EVFYp4QU0AAsgHZ.png)
",6VCR,undefined
2020-03-23T07:04:01.000Z,https://twitter.com/smotrikakya/status/1241984027546005504,true,"[""best""]",tweet,smotrikakya_1241984027546005504,smotrikakya,twitter,null,"Смотри, как я побеждаю https://t.co/AkkmLtLLwX
![](https://pbs.twimg.com/amplify_video_thumb/1241983964920926208/img/STu7pxktA7aNddOr.jpg)
","Смотри, как я...",undefined
2020-05-20T01:42:03.000Z,https://twitter.com/snackistani/status/1262921498467205124,true,"[""best""]",tweet,snackistani_1262921498467205124,snackistani,twitter,null,"I’m ugly laughing at these https://t.co/ySNLA3vBSR
![](https://pbs.twimg.com/media/EYbMZDxXkAEL5A6.jpg)
![](https://pbs.twimg.com/media/EYbMZDwWAAcsI2w.jpg)
![](https://pbs.twimg.com/media/EYbMZEsXkAgH4U5.jpg)
![](https://pbs.twimg.com/media/EYbMZEuWoAAVgjK.jpg)
",zee,undefined
2020-01-09T16:13:14.000Z,https://tonsky.me/blog/disenchantment/,false,"[""best""]",article,Software disenchantment,null,pocket,null,"# Software disenchantment

by [Xi](https://github.com/google/xi-editor), [tonsky.me](http://tonsky.me)  
September 17, 2018

_Translations: [Chinese](https://tonsky.me/blog/disenchantment/zh/) [French](https://tonsky.me/blog/disenchantment/fr/) [Italian](https://tonsky.me/blog/disenchantment/it/) [Korean](https://tonsky.me/blog/disenchantment/ko/) [Portuguese](https://tonsky.me/blog/disenchantment/pt/) [Russian](https://tonsky.me/blog/disenchantment/ru/) [Spanish](https://tonsky.me/blog/disenchantment/es/)_

I’ve been programming for 15 years now. Recently, our industry’s lack of care for efficiency, simplicity, and excellence started really getting to me, to the point of me getting depressed by my own career and IT in general.

Modern cars work, let’s say for the sake of argument, at 98% of what’s physically possible with the current engine design. Modern buildings use just enough material to fulfill their function and stay safe under the given conditions. All planes converged to the optimal size/form/load and basically look the same.

Only in software, it’s fine if a program runs at 1% or even 0.01% of the possible performance. Everybody just seems to be ok with it. People are often even proud about how inefficient it is, as in “why should we worry, computers are fast enough”:

> [@tveastman](https://twitter.com/tveastman/status/1039002300600147968): I have a Python program I run every day, it takes 1.5 seconds. I spent six hours re-writing it in rust, now it takes 0.06 seconds. That efficiency improvement means I’ll make my time back in 41 years, 24 days :-)

You’ve probably heard this mantra: “Programmer time is more expensive than computer time.” What it means basically is that we’re wasting computers at an unprecedented scale. Would you buy a car if it eats 100 liters per 100 kilometers? How about 1000 liters? With computers, we do that all the time.

## Everything is unbearably slow

Look around: our portable computers are thousands of times more powerful than the ones that brought man to the moon. Yet every other webpage struggles to maintain a smooth 60fps scroll on the latest top-of-the-line MacBook Pro. I can comfortably play games, watch 4K videos, but not scroll web pages? How is that ok?

Google Inbox, a web app written by Google, running in Chrome browser also by Google, [takes 13 seconds to open moderately-sized emails](https://twitter.com/nikitonsky/statuses/968882438024941568):

It also animates empty white boxes instead of showing their content because it’s the only way anything can be animated on a webpage with decent performance. No, decent doesn’t mean 60fps, it’s rather “as fast as this web page could possibly go”. I’m dying to see the web community answer when 120Hz displays become mainstream. Shit barely hits 60Hz already.

Windows 10 [takes 30 minutes to update](https://grumpy.website/post/0PeXr1S7N). What could it possibly be doing for that long? That much time is enough to fully format my SSD drive, download a fresh build and install it like 5 times in a row.

> [Pavel Fatin](https://pavelfatin.com/typing-with-pleasure/): Typing in editor is a relatively simple process, so even 286 PCs were able to provide a rather fluid typing experience.

Modern text editors have higher latency than 42-year-old Emacs. Text editors! What can be simpler? On each keystroke, all you have to do is update a tiny rectangular region and modern text editors can’t do that in 16ms. It’s a lot of time. A LOT. A 3D game can fill the whole screen with hundreds of thousands (!!!) of polygons in the same 16ms and also process input, recalculate the world and dynamically load/unload resources. How come?

As a general trend, we’re not getting faster software with more features. We’re getting faster hardware that runs slower software with the same features. Everything works way below the possible speed. Ever wonder why your phone needs 30 to 60 seconds to boot? Why can’t it boot, say, in one second? There are no physical limitations to that. I would love to see that. I would love to see limits reached and explored, utilizing every last bit of performance we can get for something meaningful in a meaningful way.

## Everything is HUUUUGE

And then there’s bloat. Web apps could open up to 10 times faster if you just simply blocked all ads. Google begs everyone to stop shooting themselves in the foot with the AMP initiative—a technology solution to a problem that doesn’t need any technology, just a little bit of common sense. If you remove bloat, the web becomes crazy fast. How smart do you have to be to understand that?

An Android system with no apps [takes up almost 6 GB](https://grumpy.website/post/0Oz1lDOq5). Just think for a second about how obscenely HUGE that number is. What’s in there, HD movies? I guess it’s basically code: kernel, drivers. Some string and resources too, sure, but those can’t be big. So, how many drivers do you need for a phone?

Windows 95 was 30MB. Today we have web pages heavier than that! Windows 10 is 4GB, which is 133 times as big. But is it 133 times as superior? I mean, functionally they are basically the same. Yes, we have Cortana, but I doubt it takes 3970 MB. But whatever Windows 10 is, is Android really 150% of that?

Google’s keyboard app routinely eats 150 MB. Is an app that draws 30 keys on a screen really five times more complex than the whole Windows 95? Google app, which is basically just a package for Google Web Search, is 350 MB! Google Play Services, which I do not use (I don’t buy books, music or videos there)—300 MB that just sit there and which I’m unable to delete.

All that leaves me around 1 GB for my photos after I install all the essential (social, chats, maps, taxi, banks etc) apps. And that’s with no games and no music at all! Remember times when an OS, apps and all your data fit on a floppy?

Your desktop todo app is probably written in Electron and thus [has a userland driver for the Xbox 360 controller in it](https://josephg.com/blog/electron-is-flash-for-the-desktop/), can render 3D graphics and play audio and take photos with your web camera.

A simple text chat is notorious for its load speed and memory consumption. Yes, you really have to count Slack in as a resource-heavy application. I mean, chatroom and barebones text editor, those are supposed to be two of the less demanding apps in the whole world. Welcome to 2018.

At least it works, you might say. Well, bigger doesn’t imply better. Bigger means someone has lost control. Bigger means we don’t know what’s going on. Bigger means complexity tax, performance tax, reliability tax. This is not the norm and should not become the norm. Overweight apps should mean a red flag. They should mean run away scared.

## Everything rots

A 16GB Android phone was perfectly fine 3 years ago. Today, with Android 8.1, it’s barely usable because each app has become at least twice as big _for no apparent reason_. There are no additional features. They are not faster or more optimized. They don’t look different. They just…grow?

The iPhone 4s was released with iOS 5, but can barely run iOS 9. And it’s not because iOS 9 is that much superior—it’s basically the same. But their new hardware is faster, so they made software slower. Don’t worry—you got exciting new capabilities like…running the same apps with the same speed! I dunno.

iOS 11 dropped support for 32-bit apps. That means if the developer isn’t around at the time of the iOS 11 release or isn’t willing to go back and update a once-perfectly-fine app, chances are you won’t be seeing their app ever again.

> @[jckarter](https://twitter.com/jckarter/statuses/1017071794245623808): A DOS program can be made to run unmodified on pretty much any computer made since the 80s. A JavaScript app might break with tomorrow’s Chrome update

Web pages working today [would not be compatible with any browser in 10 years time](http://tonsky.me/blog/chrome-intervention/) (probably sooner).

“It takes all the running you can do, to keep in the same place”. But what’s the point? I might enjoy occasionally buying a new phone and new MacBook as much as the next guy, but to do so just to be able to run all the same apps which just became slower?

I think we can and should do better than that. Everyone is busy building stuff for right now, today, rarely for tomorrow. But it would be nice to also have stuff that lasts a little longer than that.

## Worse is better

Nobody understands anything at this point. Neither do they want to. We just throw barely baked shit out there, hope for the best and call it “startup wisdom”.

Web pages ask you to refresh if anything goes wrong. Who has time to figure out what happened?

Any web app produces a constant stream of “random” JS errors in the wild, even on compatible browsers.

The whole webpage/SQL database architecture is built on a premise (hope, even) that nobody will touch your data while you look at the rendered webpage.

Most collaborative implementations are “best effort” and have many common-life scenarios in which they lose data. Ever seen this dialogue “which version to keep?” I mean, the bar is so low today that your users would be happy to at least have a window like that.

And no, in my world, an app that says “I’m gonna destroy some of your work, but you get to choose which one” is not okay.

Linux kills random processes _by design_. And yet it’s the most popular server-side OS.

Every device I own fails regularly one way or another. My Dell monitor needs a hard reboot from time to time because there’s software in it. Airdrop? You’re lucky if it’ll detect your device, otherwise, what do I do? Bluetooth? The spec is so complex that devices [won’t talk to each other](https://thewirecutter.com/blog/understanding-bluetooth-pairing-problems/) and [periodic resets are the best way to go](http://time.com/4358533/bluetooth-fix-how/).

And I’m not even touching the [Internet of Things](https://twitter.com/internetofshit). It’s so far beyond the laughing point I’m not even sure what to add.

I want to take pride in my work. I want to deliver working, stable things. To do that, we need to understand what we are building, in and out, and that’s impossible to do in bloated, over-engineered systems.

## Programming is the same mess

It just seems that nobody is interested in building quality, fast, efficient, lasting, foundational stuff anymore. Even when efficient solutions have been known for ages, we still struggle with the same problems: package management, build systems, compilers, language design, IDEs.

Build systems are inherently unreliable and periodically require full clean, even though all info for invalidation is there. Nothing stops us from making build processes reliable, predictable and 100% reproducible. Just nobody thinks its important. NPM has stayed in “sometimes works” state for years.

> [@przemyslawdabek](https://twitter.com/przemyslawdabek/status/940547268729606145): It seems to me that `rm -rf node_modules` is indispensable part of workflow when developing Node.js/JavaScript projects.

And build times? Nobody thinks compiler that works minutes or even hours is a problem. What happened to “programmer’s time is more important”? Almost all compilers, pre- and post-processors add significant, sometimes disastrous time tax to your build without providing proportionally substantial benefits.

You would expect programmers to make mostly rational decisions, yet sometimes they do the exact opposite of that. E.g. choosing Hadoop [even when it’s slower than running the same task on a single desktop](https://www.chrisstucchio.com/blog/2013/hadoop_hatred.html).

Machine learning and “AI” moved software to guessing in the times when most computers are not even reliable enough in the first place.

> [@rakhim](https://twitter.com/freetonik/status/1039826129190875136): When an app or a service is described as “AI-powered” or “ML-based”, I read it as “unreliable, unpredictable, and impossible to reason about behavior”. I try to avoid “AI” because I want computers to be the opposite: reliable, predictable, reasonable.

We put virtual machines inside Linux, and then we put Docker inside virtual machines, simply because nobody was able to clean up the mess that most programs, languages and their environment produce. We cover shit with blankets just not to deal with it. “Single binary” is still a HUGE selling point for Go, for example. No mess == success.

And dependencies? People easily add overengineered “full package solutions” to solve the simplest problems without considering their costs. And those dependencies bring other dependencies. You end up with a tree that is something in between of horror story (OMG so big and full of conflicts) and comedy (there’s no reason we include these, [yet here they are](https://medium.com/@jdan/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558)):

Programs can’t work for years without reboots anymore. Sometimes [even days are too much to ask](https://docs.gitlab.com/ee/administration/operations/unicorn.html#unicorn-worker-killer). Random stuff happens and nobody knows why.

What’s worse, nobody has time to stop and figure out what happened. Why bother if you can always buy your way out of it. Spin another AWS instance. Restart process. Drop and restore the whole database. Write a watchdog that will restart your broken app every 20 minutes. Include same resources [multiple times, zip and ship](https://blog.timac.org/2017/0410-analysis-of-the-facebook-app-for-ios-v-87-0/). Move fast, don’t fix.

That is not engineering. That’s just lazy programming. Engineering is understanding performance, structure, limits of what you build, deeply. Combining poorly written stuff with more poorly written stuff goes strictly against that. To progress, we need to understand what and why are we doing.

## We’re stuck with it

So everything is just a pile of barely working code added on top of previously written barely working code. It keeps growing in size and complexity, diminishing any chance for a change.

To have a healthy ecosystem you _need_ to go back and revisit. You _need_ to occasionally throw stuff away and replace it with better stuff.

But who has time for that? We haven’t seen new OS kernels in what, 25 years? It’s just too complex to simply rewrite by now. Browsers are so full of edge cases and historical precedents by now that nobody dares to write layout engine from scratch.

Today’s definition of progress is either throw more fuel into the fire:

> [@sahrizv](https://twitter.com/sahrizv/status/1018184792611827712): 2014 - We must adopt #microservices to solve all problems with monoliths.  
> 2016 - We must adopt #docker to solve all problems with microservices.  
> 2018 - We must adopt #kubernetes to solve all problems with docker

or reinventing the wheel:

> [@dr\_c0d3](https://twitter.com/dr_c0d3/status/1040092903052378112): 2000: Write 100s of lines of XML to “declaratively” configure your servlets and EJBs.  
> 2018: Write 100s of lines of YAML to “declaratively” configure your microservices.  
> At least XML had schemas…

We’re stuck with what we have, and nobody will ever save us.

## Business won’t care

Neither will users. They are only learned to expect what we can provide. We (engineers) say every Android app takes 350 MB? Ok, they’ll live with that. We say we can’t give them smooth scrolling? Ok, they’ll live with a phone that stutter. We say “if it doesn’t work, reboot”? They’ll reboot. After all, they have no choice.

There’s no competition either. Everybody is building the same slow, bloated, unreliable products. Occasional jump forward in quality does bring competitive advantage (iPhone/iOS vs other smartphones, Chrome vs other browsers) and forces everybody to regroup, but not for long.

So it’s our mission as engineers to show the world what’s possible with today’s computers in terms of performance, reliability, quality, usability. If we care, people will learn. And there’s nobody but us to show them that it’s very much possible. If only we care.

## It’s not all bad

There are some bright spots indicating that improving over state-of-the-art is not impossible.

Work [Martin Thompson](https://twitter.com/mjpt777) has being doing ([LMAX Disruptor](https://github.com/LMAX-Exchange/disruptor), [SBE](https://github.com/real-logic/simple-binary-encoding), [Aeron](https://github.com/real-logic/aeron)) is impressive, refreshingly simple and efficient.

by Raph Levien seems to be built with the right principles in mind.

[Jonathan Blow](https://www.youtube.com/user/jblow888) has a language he alone develops for his game that can compile 500k lines per second on his laptop. That’s cold compile, no intermediate caching, no incremental builds.

You don’t have to be a genius to write fast programs. There’s no magic trick. The only thing required is not building on top of a huge pile of crap that modern toolchain is.

## Better world manifesto

I want to see progress. I want change. I want state-of-the-art in software engineering to improve, not just stand still. I don’t want to reinvent the same stuff over and over, less performant and more bloated each time. I want something to believe in, a worthy end goal, a future better than what we have today, and I want a community of engineers who share that vision.

What we have today is not progress. We barely meet business goals with poor tools applied over the top. We’re stuck in local optima and nobody wants to move out. It’s not even a good place, it’s bloated and inefficient. We just somehow got used to it.

So I want to call it out: where we are today is bullshit. As engineers, we can, and should, and will do better. We can have better tools, we can build better apps, faster, more predictable, more reliable, using fewer resources (orders of magnitude fewer!). We need to understand deeply what we are doing and why. We need to deliver: reliably, predictably, with topmost quality. We can—and should–take pride in our work. Not just “given what we had…”—no buts!

I hope I’m not alone at this. I hope there are people out there who want to do the same. I’d appreciate if we at least start talking about how absurdly bad our current situation in the software industry is. And then we maybe figure out how to get out.

September 17, 2018 · Related [Good times create weak men](https://tonsky.me/blog/good-times-weak-men/) · Discuss on [HackerNews](https://news.ycombinator.com/item?id=18012334) [More HackerNews](https://news.ycombinator.com/item?id=21929709) [Reddit](https://www.reddit.com/r/programming/comments/9go8ul/software_disenchantment/) [More Reddit](https://www.reddit.com/r/programming/comments/eipb5c/software_disenchantment/)

Hi!

I’m Nikita. Here I write about programming and UI design [Subscribe](https://tonsky.me/blog/how-to-subscribe/)

I also create open-source stuff: Fira Code, AnyBar, DataScript and Rum. If you like what I do and want to get early access to my articles (along with other benefits), you should [support me on Patreon](https://patreon.com/tonsky).",null,undefined
2020-04-10T09:36:22.000Z,https://twitter.com/StatusyOk/status/1248545349851131904,true,"[""best""]",tweet,StatusyOk_1248545349851131904,StatusyOk,twitter,null,"Тимати – лучший дружбан соловья, 
Матранг корешует с питоном, 
А https://t.co/Uec067Fyo8
![](https://pbs.twimg.com/media/EVO5X86UcAMGLLh.jpg)
",Вижу рифмы,undefined
2020-03-14T13:07:05.000Z,https://twitter.com/syncromechanica/status/1238813904047923201,true,"[""best""]",tweet,syncromechanica_1238813904047923201,syncromechanica,twitter,https://twitter.com/342124158/status/1238783598947446784,"@i_am_romochka https://t.co/zERkDamsMn
![](https://pbs.twimg.com/media/ETEmrXmXkAo6r9-.jpg)
",Дед с кинк-вечеринки,undefined
2020-04-03T17:22:33.000Z,https://twitter.com/syncromechanica/status/1246125950074605570,true,"[""best""]",tweet,syncromechanica_1246125950074605570,syncromechanica,twitter,https://twitter.com/342124158/status/1246125572629188620,"Напоминаю, что если бы демократия реально работала, то от голосов всех этих людей реально бы зависела власть и решения, влияющие на жизнь страны. 
Как же хорошо, что никакой демократии на бывает.
",Дед с кинк-вечеринки,undefined
2018-12-03T08:14:02.000Z,https://jamesaltucher.com/2015/08/habits-one-percent/,false,"[""productivity"",""best""]",article,The 1% Rule for Creating All Habits,null,pocket,null,"# The 1% Rule for Creating All Habits

[jamesaltucher.com](http://jamesaltucher.com) | August 28, 2015 07:55 AM

She kept throwing food at me. I was 19 and bought two tuna bagel sandwiches for myself for breakfast. That was the way I rolled.

We were arguing. She took a sandwich out of my hands and threw it all over the street. Tuna everywhere.

I bet the Old Man and the sea never knew he was catching tuna so it could lie dead in pieces in the street because of my ex.

Everyone was watching and sort of laughing. I bet everyone was thinking, “He’s the man!”

No. Scratch that. More like, “What a loser.” Or, “thank god that isn’t us.”

I think I wanted to die.

Then there was the time in the movie theater. I had a large popcorn. I didn’t want her to touch the popcorn until the movie started.

I’d get very upset if popcorn was started before the movie. So I said to her when she reached for it, “No!”.

She took the popcorn out of my hands and threw it all over the theater.

If I could say “Advice to myself at 21” would I avoid her? Of course not. Without her, maybe only now would I be with a woman who threw my food everywhere.

I gradually started improving what my line was in terms of what I could handle in a relationship.

“I don’t want someone who throws my food everywhere”. This became rule #1.

Over the next 20 years I felt I got better and better. Sometimes I slipped. But mostly I got better.

But it took 20 years.

I wish I could go back and tell myself one thing: nothing is going to change for you tomorrow.

Diets don’t work tomorrow. But every diet works.

[Habits don’t change in a day.](https://jamesaltucher.com/2016/11/habits-make-stupid/) But 1% a day makes every habit work. Every.

The reason is: they work if you do a little each day. If you relax and give yourself permission to only improve a little each day, then a good habit works.

It’s permission to improve. It’s also permission to fail. Because when you first start something, you’re on day one.

If you want to succeed at anything, you have to give yourself permission to fail twice as much as you thought you would.

If you insist, I need to change RIGHT NOW, then it won’t work. You’ll only get worse.

If you insist the habit changes tomorrow, then the habit will certainly fail.

[Coolio](http://www.stitcher.com/podcast/stansberry-radio-network/the-james-altucher-show/e/ep-42-coolio-entrepreneurs-paradise-35368214), the rapper, wrote lyrics every day for 17 years before having a hit.

[Commander Hadfield](http://www.jamesaltucher.com/2015/05/hadfield/), the astronaut, improved his skills every day for 20 years before getting into space.

[Kurt Vonnegut](http://www.jamesaltucher.com/2015/08/kurt-vonnegut-the-secret-of-all-art/) wrote every day for 25 years before he had a major bestseller.

Even Mozart, despite being a prodigy, wrote music for 10 years every day before becoming a true master.

Improve a little each day. It compounds. When 1% compounds every day, it doubles every 72 days, not every 100 days. Compounding tiny excellence is what creates big excellence.

You can’t be a master in one day. You have to improve a little every day.

Picasso created 2 works of art a day. That’s 50,000 in a lifetime. It adds up.

“But it’s too late for me!”.

No, it’s not. Compounding creates fast results.

If I read 5 pages a day from non-fiction books, then in a year I will have read 1830 pages of knowledge. And each page I read will build upon the pages I’ve read before.

And it’s 1830 pages 99% of people won’t read. Most people don’t pick up a book after age 20.

If I write 1000 words a day, then in one day that’s nothing. In one year that’s the equivalent of 6-8 novels.

Also you can also decrease 1% a day. We can say, “aww, it’s only one day. Don’t pressure me!”

Such an easy choice. It seems trivial. 1% up or 1% down. But it sneaks up. And then we’re old and lonely.

Every day matters.

When I was losing all of my money, and hanging around with the wrong people. And taking the wrong drugs and dating the wrong people, It’s because I was saying, “it’s just 1 day”. Or, “I don’t need to improve every day, it adds up to nothing”.

Because I couldn’t see how it was adding up at first. And that became my trademarked technique for losing everything, For losing my mind. For being lonely.

It was the one thing that worked: 1% decrease a day cost me everything. I had to get back to 1% up a day.

The 1% Rule can be applied to everything. If I spend 1 less minute feeling regret and use that to feel gratitude, how much better for my stress levels will that be in one year’s time.

Stress is 100% reverse correlated with longer healthier happier life. With more money. With more love. [With more creativity.](https://jamesaltucher.com/2016/08/penultimate-rules-creative/)

Every habit can be built using this technique.

Thoughts are in the head. Thinking, “this seems like a good habit” is a start. Reading about it is a second start. But…

Actions are outside of the head or body. Take 1% action per day.

More than that and you’ll give-up (“diets don’t work!”). Less than that and it might take too long (“diets don’t work!”).

It doesn’t happen in one day. There are no goals. There’s only practice. Practice never makes perfect. Practice makes happy. Practice makes habits.

I started writing 23 years ago. Every day I read a little. [Every day I wrote. I wanted to get better.](https://jamesaltucher.com/2017/10/cheat-sheet-writing-first-book/)

I was very bad at the beginning.

I just looked at some fiction I wrote 23 years ago. WOW! Very bad.

Every day I wake up and think, how can I be a little better? Just a tiny bit. Because I know it will make me feel good today to practice. And I know it will add up.

After Tracey threw the popcorn at me in the movie theater I thought to myself, “That’s it. I’m over this.”

I went to the popcorn guys. I got another larger popcorn. I sat on the other side of the theater. Betty Blue was the picture. I can remember.

Did I break up with her? No. I was a chicken. We stayed together another two years. I didn’t have the strength to change my life in one day.

Or I could measure it in broken windows. Three broken windows later we broke up.

Time is relative.

But every day I got better. Now I’m happy

Unless someone I like throws popcorn at me (“wait until the movie starts!) at the movie theater later today. Then I’m back to square one.

#PKT\_footer\_message { position: relative; margin: 16px 0px; font-size: 0.9em; } #PKT\_footer\_message .PKT\_message\_wrapper { display: block; padding-top: 17px; } #PKT\_footer\_message::before { content:""""; display: block; margin: 0px 40px; border-top: 1px solid #CCCCCC; }

**James Altucher** is a successful entrepreneur, angel investor, chess master and bestselling author of _Choose Yourself._ Learn more at [Jamesaltucher.com](https://getpocket.com/redirect?_pktpp=1&l=1549&m=1417&t=1)",null,undefined
2016-08-26T13:11:49.000Z,http://www.bbc.com/culture/story/20160819-the-21st-centurys-100-greatest-films,false,"[""best""]",article,BBC - Culture - The 21st Century’s 100 greatest films,null,pocket,null,"# The 21st Century’s 100 greatest films

[bbc.com](http://bbc.com)

The best that cinema has had to offer since 2000 as picked by 177 film critics from around the world.

“They don’t make ‘em like they used to.”

How often have we all heard that resigned expression? How often have we said it ourselves? ‘The death of cinema’ is debated in university film studies programs worldwide. Critics lament the loss of 'small movies' in favour of superhero spectacles. Box-office analysts look for signs of an industry on the brink. Studio executives fear that video-on-demand may destroy the idea of going to the cinema more than broadcast and cable TV ever did.

And what can we really call a new classic? What in recent vintage can hold its own on the big screen with the likes of The Searchers, The Godfather, The Rules of the Game, Seven Samurai or Citizen Kane? Some film journalists even think the movie star is a thing of the past.

Perhaps the fault lies not in our movie stars, but in ourselves. If you can’t find masterpieces amid the blockbuster flotsam, you simply aren’t looking hard enough. Film-making today, whether massively expensive or made with tiny budgets, shot on celluloid or video, is thriving artistically as much as it ever has. But today you’ll find greater diversity in the kinds of films being made, if not in the people who are making them. That’s why we, the editors of BBC Culture, decided to commission a poll of critics to determine the 100 greatest films of the 21st Century. Last year, we asked critics to name [the greatest American films of all time](http://www.bbc.com/culture/story/20150720-the-100-greatest-american-films), and we were surprised that only six films made since 2000 made the top 100. Is there a feeling that time sanctifies a classic? Perhaps. But this time, we wanted to prove that this century has given us films that will stand the test of time, that you will continue to think about and argue about if only you give them a chance and watch them.

For our poll to determine the 100 greatest American films, we surveyed 62 film critics from around the world. This time, we received responses from 177 – from every continent except Antarctica. Some are newspaper or magazine reviewers, others write primarily for websites; academics and cinema curators are well-represented too. For the purposes of this poll we have decided that a list of the greatest films of the 21st Century should include the year 2000, even though we recognise that there was no ‘Year Zero’ and that 2001 is mathematically the start of the century. Not only did we all celebrate the turn of the millennium on 31 December 1999, but the year 2000 was a landmark in global cinema, and, in particular, saw the emergence of new classics from Asia like nothing we had ever seen before.

We believe that the new classics on this list are destined to become old classics. Whether or not that happens is ultimately up to you, the moviegoers. But one thing is certain: cinema isn’t dying, it’s evolving.

100\. Toni Erdmann (Maren Ade, 2016)  
100\. Requiem for a Dream (Darren Aronofsky, 2000)  
100\. Carlos (Olivier Assayas, 2010)  
99\. The Gleaners and I (Agnès Varda, 2000)  
98\. Ten (Abbas Kiarostami, 2002)  
97\. White Material (Claire Denis, 2009)  
96\. Finding Nemo (Andrew Stanton, 2003)  
95\. Moonrise Kingdom (Wes Anderson, 2012)  
94\. Let the Right One In (Tomas Alfredson, 2008)  
93\. Ratatouille (Brad Bird, 2007)  
92\. The Assassination of Jesse James by the Coward Robert Ford (Andrew Dominik, 2007)  
91\. The Secret in Their Eyes (Juan José Campanella, 2009)  
90\. The Pianist (Roman Polanski, 2002)  
89\. The Headless Woman (Lucrecia Martel, 2008)  
88\. Spotlight (Tom McCarthy, 2015)  
87\. Amélie (Jean-Pierre Jeunet, 2001)  
86\. Far From Heaven (Todd Haynes, 2002)  
85\. A Prophet (Jacques Audiard, 2009)  
84\. Her (Spike Jonze, 2013)  
83\. A.I. Artificial Intelligence (Steven Spielberg, 2001)  
82\. A Serious Man (Joel and Ethan Coen, 2009)  
81\. Shame (Steve McQueen, 2011)  
80\. The Return (Andrey Zvyagintsev, 2003)  
79\. Almost Famous (Cameron Crowe, 2000)  
78\. The Wolf of Wall Street (Martin Scorsese, 2013)  
77\. The Diving Bell and the Butterfly (Julian Schnabel, 2007)  
76\. Dogville (Lars von Trier, 2003)  
75\. Inherent Vice (Paul Thomas Anderson, 2014)  
74\. Spring Breakers (Harmony Korine, 2012)  
73\. Before Sunset (Richard Linklater, 2004)  
72\. Only Lovers Left Alive (Jim Jarmusch, 2013)  
71\. Tabu (Miguel Gomes, 2012)  
70\. Stories We Tell (Sarah Polley, 2012)  
69\. Carol (Todd Haynes, 2015)  
68\. The Royal Tenenbaums (Wes Anderson, 2001)  
67\. The Hurt Locker (Kathryn Bigelow, 2008)  
66\. Spring, Summer, Fall, Winter…and Spring (Kim Ki-duk, 2003)  
65\. Fish Tank (Andrea Arnold, 2009)  
64\. The Great Beauty (Paolo Sorrentino, 2013)  
63\. The Turin Horse (Béla Tarr and Ágnes Hranitzky, 2011)  
62\. Inglourious Basterds (Quentin Tarantino, 2009)  
61\. Under the Skin (Jonathan Glazer, 2013)  
60\. Syndromes and a Century (Apichatpong Weerasethakul, 2006)  
59\. A History of Violence (David Cronenberg, 2005)  
58\. Moolaadé (Ousmane Sembène, 2004)  
57\. Zero Dark Thirty (Kathryn Bigelow, 2012)  
56\. Werckmeister Harmonies (Béla Tarr, director; Ágnes Hranitzky, co-director, 2000)  
55\. Ida (Paweł Pawlikowski, 2013)  
54\. Once Upon a Time in Anatolia (Nuri Bilge Ceylan, 2011)  
53\. Moulin Rouge! (Baz Luhrmann, 2001)  
52\. Tropical Malady (Apichatpong Weerasethakul, 2004)  
51\. Inception (Christopher Nolan, 2010)  
50\. The Assassin (Hou Hsiao-hsien, 2015)  
49\. Goodbye to Language (Jean-Luc Godard, 2014)  
48\. Brooklyn (John Crowley, 2015)  
47\. Leviathan (Andrey Zvyagintsev, 2014)  
46\. Certified Copy (Abbas Kiarostami, 2010)  
45\. Blue Is the Warmest Color (Abdellatif Kechiche, 2013)  
44\. 12 Years a Slave (Steve McQueen, 2013)  
43\. Melancholia (Lars von Trier, 2011)  
42\. Amour (Michael Haneke, 2012)  
41\. Inside Out (Pete Docter, 2015)  
40\. Brokeback Mountain (Ang Lee, 2005)  
39\. The New World (Terrence Malick, 2005)  
38\. City of God (Fernando Meirelles and Kátia Lund, 2002)  
37\. Uncle Boonmee Who Can Recall His Past Lives (Apichatpong Weerasethakul, 2010)  
36\. Timbuktu (Abderrahmane Sissako, 2014)  
35\. Crouching Tiger, Hidden Dragon (Ang Lee, 2000)  
34\. Son of Saul (László Nemes, 2015)  
33\. The Dark Knight (Christopher Nolan, 2008)  
32\. The Lives of Others (Florian Henckel von Donnersmarck, 2006)  
31\. Margaret (Kenneth Lonergan, 2011)  
30\. Oldboy (Park Chan-wook, 2003)  
29\. WALL-E (Andrew Stanton, 2008)  
28\. Talk to Her (Pedro Almodóvar, 2002)  
27\. The Social Network (David Fincher, 2010)  
26\. 25th Hour (Spike Lee, 2002)  
25\. ​Memento (Christopher Nolan, 2000)  
24\. The Master (Paul Thomas Anderson, 2012)  
23\. Caché (Michael Haneke, 2005)  
22\. Lost in Translation (Sofia Coppola, 2003)  
21\. The Grand Budapest Hotel (Wes Anderson, 2014)  
20\. Synecdoche, New York (Charlie Kaufman, 2008)  
19\. Mad Max: Fury Road (George Miller, 2015)  
18\. The White Ribbon (Michael Haneke, 2009)  
17\. Pan's Labyrinth (Guillermo Del Toro, 2006)  
16\. Holy Motors (Leos Carax, 2012)  
15\. 4 Months, 3 Weeks and 2 Days (Cristian Mungiu, 2007)  
14\. The Act of Killing (Joshua Oppenheimer, 2012)  
13\. Children of Men (Alfonso Cuarón, 2006)  
12\. Zodiac (David Fincher, 2007)  
11\. Inside Llewyn Davis (Joel and Ethan Coen, 2013)  
10\. No Country for Old Men (Joel and Ethan Coen, 2007)  
9\. A Separation (Asghar Farhadi, 2011)  
8\. Yi Yi: A One and a Two (Edward Yang, 2000)  
7\. The Tree of Life (Terrence Malick, 2011)  
6\. Eternal Sunshine of the Spotless Mind (Michel Gondry, 2004)  
5\. Boyhood (Richard Linklater, 2014)  
4\. Spirited Away (Hayao Miyazaki, 2001)  
3\. There Will Be Blood (Paul Thomas Anderson, 2007)  
2\. In the Mood for Love (Wong Kar-wai, 2000)  
1\. Mulholland Drive (David Lynch, 2001)

**More on BBC Culture’s 100 greatest films of the 21st Century:**  
[Surprising facts from the 100 greatest films of the 21st Century list](http://www.bbc.com/culture/story/20160802-100-greatest-films-of-the-21st-century-infographic)  
[The full list of critics who participated – and how they voted](http://www.bbc.com/culture/story/20160819-the-21st-centurys-100-greatest-films-who-voted)  
[What the critics had to say about the top 25](http://www.bbc.com/culture/story/20160822-the-21st-centurys-25-greatest-films)  
[Why Mulholland Drive is number one](http://www.bbc.com/culture/story/20160822-why-mulholland-drive-is-the-greatest-film-since-2000)  
[Are we living in a golden age of film?  
](http://www.bbc.com/culture/story/20160822-why-the-21st-century-is-a-new-golden-age-of-cinema)

**_How many of these films have you seen? Let us know with the hashtag #FilmsOfTheCentury on _[_Facebook_](https://www.facebook.com/pages/BBC-Culture/237388053065908)_ or_ [_Twitter_](https://twitter.com/bbc_culture)_._**

_And if you liked this story, _[**_sign up for the weekly bbc.com features newsletter_**](http://pages.emails.bbc.com/subscribe/)_, called “If You Only Read 6 Things This Week”. A handpicked selection of stories from BBC Future, Earth, Culture, Capital, Travel and Autos, delivered to your inbox every Friday._

[Share using Email

](mailto:?subject=Shared%20from%20BBC:The%2021st%20Century%E2%80%99s%20100%20greatest%20films&body=https%3A%2F%2Fwww.bbc.com%2Fculture%2Farticle%2F20160819-the-21st-centurys-100-greatest-films%3Focid%3Dww.social.link.email)[

Share on Twitter](https://twitter.com/intent/tweet?text=The%2021st%20Century%E2%80%99s%20100%20greatest%20films&url=https%3A%2F%2Fwww.bbc.com%2Fculture%2Farticle%2F20160819-the-21st-centurys-100-greatest-films%3Focid%3Dww.social.link.twitter&via=BBC_Culture)[

Share on Facebook](https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.bbc.com%2Fculture%2Farticle%2F20160819-the-21st-centurys-100-greatest-films%3Focid%3Dww.social.link.facebook&t=The%2021st%20Century%E2%80%99s%20100%20greatest%20films)[Share on Linkedin

](https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fwww.bbc.com%2Fculture%2Farticle%2F20160819-the-21st-centurys-100-greatest-films%3Focid%3Dww.social.link.linkedin&title=The%2021st%20Century%E2%80%99s%20100%20greatest%20films)[Share on Whatsapp

](whatsapp://send?text=The%2021st%20Century%E2%80%99s%20100%20greatest%20films:%20https%3A%2F%2Fwww.bbc.com%2Fculture%2Farticle%2F20160819-the-21st-centurys-100-greatest-films%3Focid%3Dww.social.link.whatsapp)",null,undefined
2016-02-23T11:20:57.000Z,https://www.gatesnotes.com/Education/The-Best-Teacher-I-Never-Had,false,"[""best""]",article,The Best Teacher I Never Had | Bill Gates,null,pocket,null,"# The best teacher I never had

by Bill Gates, [gatesnotes.com](http://gatesnotes.com)  
January 27, 2016

Thirty years ago I went on vacation and fell for Richard Feynman.

A friend and I were planning a trip together and wanted to mix a little learning in with our relaxation. We looked at a local university’s film collection, saw that they had one of his lectures on physics, and checked it out. We loved it so much that we ended up watching it twice. Feynman had this amazing knack for making physics clear and fun at the same time. I immediately went looking for more of his talks, and I’ve been a big fan ever since. Years later I bought the rights to those lectures and worked with Microsoft to get them [posted](http://research.microsoft.com/apps/tools/tuva/#data=2%7C%7C%7C0) online for free.

In 1965, Feynman shared a Nobel Prize for work on particle physics. To celebrate the 50th anniversary of that honor, the California Institute of Technology—where he taught for many years before his death in 1988—asked for some thoughts about what made him so special. Here’s the video I sent:

In that video, I especially love the way Feynman explains how fire works. He takes such obvious delight in knowledge—you can see his face light up. And he makes it so clear that anyone can understand it.

In that sense, Feynman has a lot in common with all the amazing teachers I’ve met in schools across the country. You walk into their classroom and immediately feel the energy—the way they engage their students—and their passion for whatever subject they’re teaching. These teachers aren’t famous, but they deserve just as much respect and admiration as someone like Feynman. If there were a Nobel for making high school algebra exciting and fun, I know a few teachers I would nominate.

Incidentally, Feynman wasn’t famous just for being a great teacher and a world-class scientist; he was also quite a character. He translated Mayan hieroglyphics. He loved to play the bongos. While helping develop the atomic bomb at Los Alamos, he entertained himself by figuring out how to break into the safes that contained top-secret research. (Feynman cultivated this image as a colorful guy. His colleague Murray Gell-Mann, a Nobel Prize–winner in his own right, once [remarked](https://www.youtube.com/watch?v=rnMsgxIIQEE), “Feynman was a great scientist, but he spent a great deal of his effort generating anecdotes about himself.”)

Here are some suggestions if you’d like to know more about Feynman or his work:

*   [The Messenger Lectures on Physics](http://research.microsoft.com/apps/tools/tuva/#data=2%7C%7C%7C0). These are the talks that first captivated me back in the 1980s and that you see briefly in the video above. The site is a few years old, but you can watch for free along with some helpful commentary.
*   _Six Easy Pieces: Essentials of Physics Explained by Its Most Brilliant Teacher_ is a collection of the most accessible parts of Feynman’s famous Caltech lectures on physics.
*   He recounted his adventures in two very good books, _Surely You’re Joking, Mr. Feynman!_ and _What Do You Care What Other People Think?_ You won’t learn a lot about physics, but you’ll have a great time hearing his stories.",null,undefined
2013-12-24T08:30:39.000Z,https://www.farnamstreetblog.com/2013/05/the-buffett-formula-how-to-get-smarter/,false,"[""best""]",article,The Buffett Formula — How To Get Smarter,null,pocket,null,"# The Buffett Formula: Going to Bed Smarter Than When You Woke Up

[fs.blog](http://fs.blog) | May 15, 2013 08:00 AM

Most people go through life not really getting any smarter. Why? They simply won’t do the work required.

It’s easy to come home, sit on the couch, watch TV, and zone out until bedtime rolls around. But that’s not going to help you get smarter.

Sure, you can go into the office the next day and discuss the details of last night’s episode of _Mad Men_ or _Game of Thrones_. And yes, you know what happened on _Survivor_. But that’s not knowledge accumulation; that’s a mind-numbing sedative.

You can acquire knowledge if you want it. In fact, there is a simple formula, which if followed is almost certain to make you smarter over time. **Simple but not easy.**

It involves a lot of hard work.

### “The best thing a human being can do is to help another human being know more.”

— Charlie Munger

We’ll call it the **Buffett formula**, named after **Warren Buffett** and his longtime business partner at Berkshire Hathaway, **Charlie Munger**. These two are an extraordinary combination of minds. They are also [learning machines](https://fs.blog/2012/03/are-you-a-learning-machine/).

_“I can see, he can hear. We make a great combination.”_  
—Warren Buffett, speaking of his partner and friend, Charlie Munger.

We can learn a lot from them. They didn’t get smart because they are both billionaires. They became billionaires, in part, because they are smart. More importantly, they keep getting smarter. And it turns out that they have a lot to say on the subject.

## How to Get Smarter

Read. A lot.

Warren Buffett says, “I just sit in my office and read all day.”

What does that mean? He estimates that he spends 80% of his working day reading and thinking.

“You could hardly find a partnership in which two people settle on reading more hours of the day than in ours,” Charlie Munger commented.

When asked how to get smarter, Buffett once held up stacks of paper and said, “Read 500 pages like this every week. That’s how knowledge builds up, like compound interest.”

All of us can build our knowledge, but most of us won’t put in the effort.

### “Go to bed smarter than when you woke up.”

— Charlie Munger

One person who took Buffett’s advice, Todd Combs, now works for the legendary investor. After hearing Buffett talk, he started keeping track of what he read and how many pages he was reading.

The _Omaha World-Herald_ [writes](http://www.omaha.com/article/20130428/MONEY/704289987):

> Eventually finding and reading productive material became second nature, a habit. As he began his investing career, he would read even more, hitting 600, 750, even 1,000 pages a day.
> 
> Combs discovered that Buffett’s formula worked, giving him more knowledge that helped him with what became his primary job—seeking the truth about potential investments.

But [how you read](https://fs.blog/reading/) matters, too.

You need to be critical and always thinking. You need to do the mental [work required](https://fs.blog/2013/04/the-work-required-to-have-an-opinion/) to hold an opinion.

In _[Working Together: Why Great Partnerships Succeed](http://www.amazon.com/gp/product/B0055X53ZO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B0055X53ZO&linkCode=as2&tag=farnamstreet-20),_ Buffett comments to author Michael Eisner:

> Look, my job is essentially just corralling more and more and more facts and information, and occasionally seeing whether that leads to some action. And Charlie—his children call him a book with legs.

## Continuous Learning

Eisner continues:

> Maybe that’s why both men agree it’s better that they never lived in the same city, or worked in the same office. They would have wanted to talk all the time, leaving no time for the reading, which Munger describes as part of an essential continuing education program for the men who run one of the largest conglomerates in the world.
> 
> “I don’t think any other twosome in business was better at continuous learning than we were,” he says, talking in the past tense but not really meaning it. “And if we hadn’t been continuous learners, the record wouldn’t have been as good. And we were so extreme about it that we both spent the better part of our days reading, so we could learn more, which is not a common pattern in business.”

## It Doesn’t Work How You Think It Works

If you’re thinking that they sit in front of a computer all day obsessing over numbers and figures, you’d be dead wrong.

> “No,” says Warren. “We don’t read other people’s opinions. We want to get the facts, and then think.” And when it gets to the thinking part, for Buffett and Munger, there’s no one better to think with than their partners. “Charlie can’t encounter a problem without thinking of an answer,” posits Warren. “He has the best thirty-second mind I’ve ever seen. I’ll call him up, and within thirty seconds, he’ll grasp it. He just sees things immediately.”

Munger sees his knowledge accumulation as an acquired, rather than natural, genius. And he’d give all the credit to the studying he does.

“Neither Warren nor I is smart enough to make the decisions with no time to think,” Munger once told a reporter. “We make actual decisions very rapidly, but that’s because we’ve spent so much time preparing ourselves by quietly sitting and reading and thinking.”

## How Can You Find Time to Read?

[Finding the time to read](https://fs.blog/2013/09/finding-time-to-read/) is easier than you think. One way to help make that happen is to carve an hour out of your day just for yourself.

In an interview he gave for his authorized biography _[The Snowball](http://www.amazon.com/gp/product/0553384619/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0553384619&linkCode=as2&tag=farnamstreet-20),_ Buffett told this story:

> Charlie, as a very young lawyer, was probably getting $20 an hour. He thought to himself, “Who’s my most valuable client?” And he decided it was himself. So he decided to sell himself an hour each day. He did it early in the morning, working on these construction projects and real estate deals. Everybody should do this, be the client, and then work for other people, too, and sell yourself an hour a day.

It’s important to think about the opportunity cost of this hour. On one hand, you can check Twitter, read some online news, and reply to a few emails while pretending to finish the memo that is supposed to be the focus of your attention. On the other hand, you can dedicate the time to improving yourself. In the short term, you’re better off with the dopamine-laced rush of email and Twitter while multitasking. In the long term, the investment in learning something new and improving yourself goes further.

“I have always wanted to improve what I do,” Munger comments, “even if it reduces my income in any given year. And I always set aside time so I can play my own self-amusement and improvement game.”

## Reading Is Only Part of the Equation

But reading isn’t enough. Charlie Munger offers:

> We read a lot. I don’t know anyone who’s wise who doesn’t read a lot. But that’s not enough: You have to have a temperament to grab ideas and do sensible things. Most people don’t grab the right ideas or don’t know what to do with them.

Commenting on what it means to have knowledge, in _[How to Read a Book](https://fs.blog/how-to-read-a-book/),_ Mortimer Adler writes: “The person who says he knows what he thinks but cannot express it usually does not know what he thinks.”

Can you explain what you know to someone else? Try it. Pick an idea you think you have a grasp of and write it out on a sheet of paper as if you were explaining it to someone else. (See [The Feynman Technique](https://fs.blog/2012/04/feynman-technique/) and [here](https://fs.blog/2012/09/a-simple-tool-to-help-you-learn-better/) if you want to improve retention.)

## Nature or Nurture?

Another way to get smarter, outside of reading, is to surround yourself with people who are not afraid to challenge your ideas.",null,undefined
2018-08-06T09:21:54.000Z,https://pxlnv.com/blog/bullshit-web/,false,"[""best""]",article,The Bullshit Web,null,pocket,null,"# The Bullshit Web

by Nick Heer, [pxlnv.com](http://pxlnv.com)  
July 30, 2018

My home computer in 1998 had a 56K modem connected to our telephone line; we were allowed a maximum of thirty minutes of computer usage a day, because my parents — quite reasonably — did not want to have their telephone shut off for an evening at a time. I remember webpages loading slowly: ten to twenty seconds for a basic news article.

At the time, a few of my friends were getting cable internet. It was remarkable seeing the same pages load in just a few seconds, and I remember thinking about the kinds of the possibilities that would open up as the web kept getting faster.

And faster it got, of course. When I moved into my own apartment several years ago, I got to pick my plan and chose a massive fifty megabit per second broadband connection, which I have since upgraded.

So, with an internet connection faster than I could have thought possible in the late 1990s, what’s the score now? A story at the _Hill_ took [over nine seconds](https://d.pr/HElAyq) to load; at _Politico_, [seventeen seconds](https://d.pr/PXrBhY); at CNN, [over thirty seconds](https://d.pr/5R0EBL). This is the bullshit web.

But first, a short parenthetical: I’ve been writing posts in both long- and short-form about this stuff for a while, but I wanted to bring many threads together into a single document that may pretentiously be described as a _theory of_ or, more practically, a _guide to_ the bullshit web.

A second parenthetical: when I use the word “bullshit” in this article, it isn’t in a profane sense. It is much closer to Harry Frankfurt’s definition in “On Bullshit”:

> It is just this lack of connection to a concern with truth — this indifference to how things really are — that I regard as of the essence of bullshit.

I also intend it to be used in much the same sense as the way it is used in [David Graeber’s “On the Phenomenon of Bullshit Jobs”](http://strikemag.org/bullshit-jobs/):

> In the year 1930, John Maynard Keynes predicted that, by century’s end, technology would have advanced sufficiently that countries like Great Britain or the United States would have achieved a 15-hour work week. There’s every reason to believe he was right. In technological terms, we are quite capable of this. And yet it didn’t happen. Instead, technology has been marshaled, if anything, to figure out ways to make us all work more. In order to achieve this, jobs have had to be created that are, effectively, pointless. Huge swathes of people, in Europe and North America in particular, spend their entire working lives performing tasks they secretly believe do not really need to be performed. The moral and spiritual damage that comes from this situation is profound. It is a scar across our collective soul. Yet virtually no one talks about it.
> 
> \[…\]
> 
> These are what I propose to call ‘bullshit jobs’.

What is the equivalent on the web, then?

## 1

The average internet connection in the United States is about [six times as fast](https://www.statista.com/statistics/616210/average-internet-connection-speed-in-the-us/) as it was just ten years ago, but instead of making it faster to browse the same types of websites, we’re simply occupying that extra bandwidth with more _stuff_. Some of this _stuff_ is amazing: in 2006, [Apple added movies to the iTunes Store](https://www.apple.com/newsroom/2006/09/12Apple-Announces-iTunes-7-with-Amazing-New-Features/) that were 640 × 480 pixels, but you can now stream movies in HD resolution and [(pretend) 4K](https://www.pcworld.com/article/2146462/prepare-for-fake-4k-new-standard-will-silently-compress-pc-tablet-video.html). These much higher speeds also allow us to see [more detailed photos](https://www.theatlantic.com/photo/2018/07/photos-of-the-week-pug-mugshot-umbrella-sky-helsinki-summit/565670/), and that’s very nice.

But a lot of the _stuff_ we’re seeing is a pile-up of garbage on seemingly every major website that does nothing to make visitors happier — if anything, much of this stuff is deeply irritating and morally indefensible.

Take [that CNN article](https://www.cnn.com/2018/07/24/politics/michael-cohen-donald-trump-tape/index.html), for example. Here’s what it contained when I loaded it:

*   Eleven web fonts, totalling 414 KB
    
*   Four stylesheets, totalling 315 KB
    
*   Twenty frames
    
*   Twenty-nine XML HTTP requests, totalling about 500 KB
    
*   Approximately one hundred scripts, totalling several megabytes — though it’s hard to pin down the number and actual size because some of the scripts are “beacons” that load after the page is technically finished downloading.
    

The vast majority of these resources are not directly related to the information on the page, and I’m including advertising. Many of the scripts that were loaded are purely for surveillance purposes: self-hosted analytics, of which there are several examples; various third-party analytics firms like Salesforce, Chartbeat, and Optimizely; and social network sharing widgets. They churn through CPU cycles and cause my six-year-old computer to cry out in pain and fury. I’m not asking much of it; I have opened a text-based document on the web.

In addition, pretty much any CNN article page includes an autoplaying video, a tactic which has allowed them to brag about having the [highest number of video starts](https://twitter.com/perlberg/status/1019968000458481664) in their category. I have no access to ComScore’s Media Metrix statistics, so I don’t know exactly how many of those millions of video starts were stopped instantly by either the visitor frantically pressing every button in the player until it goes away or just closing the tab in desperation, but I suspect it’s approximately every single one of them. People [really hate](https://motherboard.vice.com/en_us/article/ezv8q4/why-is-autoplay-video-still-a-thing) autoplaying video.

Also, have you noticed just how many websites desperately want you to sign up for their newsletter? While this is prevalent on so many news and blog websites, I’ve dragged them enough in this piece so far, so I’ll mix it up a bit: this is also _super_ popular with retailers. From [Barnes & Noble](https://d.pr/Xa0xzb) to [Aritzia](https://d.pr/FommHV), [Fluevog](https://d.pr/R35Y5j) to [Linus Bicycles](https://d.pr/JRO6ES), these things are seemingly everywhere. _Get a nominal coupon in exchange for being sent an email you won’t read every day until forever_ — I don’t think so.

Finally, there are a bunch of elements that have become something of a standard with modern website design that, while not offensively intrusive, are often unnecessary. I appreciate great typography, but web fonts still load pretty slowly and cause the text to reflow midway through reading the first paragraph. And then there are those [gigantic full-width header images](https://pxlnv.com/linklog/not-every-article-needs-a-picture/) that dominate the top of every page, as though every two-hundred-word article on a news site was the equivalent of a magazine feature.

So that’s the tip of the bullshit web. You know how [building wider roads doesn’t improve commute times](https://www.wired.com/2014/06/wuwt-traffic-induced-demand/), as it simply encourages people to drive more? It’s that, but with bytes and bandwidth instead of cars and lanes.

## 2

As Graeber [observed in his essay](http://strikemag.org/bullshit-jobs/) and book, bullshit jobs tend to spawn other bullshit jobs for which the sole function is a dependence on the existence of more senior bullshit jobs:

> And these numbers do not even reflect on all those people whose job is to provide administrative, technical, or security support for these industries, or for that matter the whole host of ancillary industries (dog-washers, all-night pizza delivery) that only exist because everyone else is spending so much of their time working in all the other ones.

So, too, is the case with the bullshit web. The combination of huge images that serve little additional purpose than decoration, several scripts that track how far you scroll on a page, and dozens of scripts that are advertising related means that text-based webpages are now obese and torpid and excreting a casual contempt for visitors.

Given the assumption that any additional bandwidth offered to web developers will immediately be consumed, there seems to be just one possible solution, which is to reduce the amount of bytes that are transmitted. For some bizarre reason, this hasn’t happened on the _main_ web, because it somehow makes more sense to create an exact copy of every page on their site that is expressly designed for speed. Welcome back, [WAP](https://en.wikipedia.org/wiki/Wireless_Application_Protocol) — except, for some reason, this mobile-centric copy is entirely dependent on yet more bytes. This is the dumbfoundingly dumb premise of AMP.

Launched in February 2016, AMP is a collection of standard HTML elements and AMP-specific elements on a special ostensibly-lightweight page that needs an 80 kilobyte JavaScript file to load correctly. Let me explain: HTML5 allows custom elements like AMP’s `<amp-img>`, but will render them as `<span>` elements without any additional direction — provided, in AMP’s case, by its mandatory JavaScript file. This large script is also [required by the AMP spec](https://www.ampproject.org/docs/fundamentals/spec#the-amp-html-format) to be hotlinked from `cdn.amp-project.org`, which is a Google-owned domain. That makes an AMP website dependent on Google to display its basic markup, which is super weird for a platform as open as the web.

That belies the reason AMP has taken off. It isn’t necessarily because AMP pages are better for users, though that’s absolutely a consideration, but because Google _wants_ it to be popular. When you search Google for anything remotely related to current events, you’ll see only AMP pages in the news carousel that sits above typical search results. You’ll also see AMP links crowding the first results page, too. Google has openly admitted that they promote AMP pages in their results and that the carousel is restricted to only AMP links on their mobile results page. They insist that this is because AMP pages are faster and, therefore, better for users, but that’s not a complete explanation for three reasons: AMP pages aren’t inherently faster than non-AMP pages, high-performing non-AMP pages are not mixed with AMP versions, and Google has a conflict of interest in promoting the format.

It seems ridiculous to argue that AMP pages aren’t actually faster than their plain HTML counterparts because it’s so easy to see these pages are actually very fast. And there’s a good reason for that. It isn’t that there’s some sort of special sauce that is being done with the AMP format, or some brilliant piece of programmatic rearchitecting. No, it’s just because AMP restricts the kinds of elements that can be used on a page and severely limits the scripts that can be used. That means that webpages can’t be littered with arbitrary and numerous tracking and advertiser scripts, and that, of course, leads to a dramatically faster page. A [series of experiments by Tim Kadlec](https://timkadlec.com/remembers/2018-03-19-how-fast-is-amp-really/) showed the effect of these limitations:

> AMP’s biggest advantage isn’t the library — you can beat that on your own. It isn’t the AMP cache — you can get many of those optimizations through a good build script, and all of them through a decent CDN provider. That’s not to say there aren’t some really smart things happening in the AMP JS library or the cache — there are. It’s just not what makes the biggest difference from a performance perspective.
> 
> AMP’s biggest advantage is the restrictions it draws on how much _stuff_ you can cram into a single page.
> 
> \[…\]
> 
> AMP’s restrictions mean less stuff. It’s a concession publishers are willing to make in exchange for the enhanced distribution Google provides, but that they hesitate to make for their canonical versions.

So: if you have a reasonably fast host and don’t litter your page with scripts, you, too, can have AMP-like results without creating a copy of your site dependent on Google and their slow crawl to gain control over the infrastructure of the web. But you can’t get into Google’s special promoted slots for AMP websites for reasons that are almost certainly driven by self-interest.

## 3

There is a cumulative effect of bullshit; its depth _and_ breadth is especially profound. In isolation, the few seconds that it takes to load some extra piece of surveillance JavaScript isn’t much. Neither is the time it takes for a user to hide an email subscription box, or pause an autoplaying video. But these actions compound on a single webpage, and then again across multiple websites, and those seemingly-small time increments become a swirling miasma of frustration and pain.

It’s key to recognize, though, that this is a choice, a responsibility, and — ultimately — a matter of respect. Let us return to Graeber’s explanation of bullshit jobs, and his observation that we often experience fifteen-hour work weeks while at the office for forty. Much of the same is true on the web: there is the capability for pages to load in a second or two, but it has instead been used to spy on users’ browsing habits, make them miserable, and inundate them on other websites and in their inbox.

As for Frankfurt’s definition — that the essence of bullshit is an indifference to the way things really are — that’s manifested in the hand-wavey treatment of the actual problems of the web in favour of dishonest pseudo-solutions like AMP.

An actual solution recognizes that this bullshit is inexcusable. It is making the web a cumulatively awful place to be. Behind closed doors, those in the advertising and marketing industry can be pretty lucid about how much they also hate surveillance scripts and how awful they find these methods, while simultaneously encouraging their use. Meanwhile, users are increasingly taking matters into their own hands — the [use of ad blockers is rising](https://www2.deloitte.com/content/dam/Deloitte/global/Images/infographics/technologymediatelecommunications/gx-deloitte-tmt-2018-adblocking-media-report.pdf) [across the board](https://digiday.com/media/mobile-ad-blocking-becoming-bigger-threat/), many of which also block tracking scripts and other disrespectful behaviours. Users are making that choice.

They shouldn’t have to. Better choices should be made by web developers to not ship this bullshit in the first place. We wouldn’t tolerate such intrusive behaviour more generally; why are we expected to find it acceptable on the web?

An honest web is one in which the overwhelming majority of the code and assets downloaded to a user’s computer are used in a page’s visual presentation, with nearly all the remainder used to define the semantic structure and associated metadata on the page. Bullshit — in the form of CPU-sucking surveillance, unnecessarily-interruptive elements, and behaviours that nobody responsible for a website would themselves find appealing as a visitor — is unwelcome and intolerable.

Death to the bullshit web.",null,undefined
2018-12-05T19:41:39.000Z,https://gist.github.com/staltz/868e7e9bc2a7b8c1f754,false,"[""rxjs"",""best""]",article,The introduction to Reactive Programming you've been missing · GitHub,null,pocket,null,"# The introduction to Reactive Programming you've been missing

by [subscribing](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted), [gist.github.com](http://gist.github.com)  
May 9, 2020

### [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#this-tutorial-as-a-series-of-videos)This tutorial as a series of videos

**If you prefer to watch video tutorials with live-coding, then check out this series I recorded with the same contents as in this article: [Egghead.io - Introduction to Reactive Programming](https://egghead.io/series/introduction-to-reactive-programming).**

* * *

So you're curious in learning this new thing called Reactive Programming, particularly its variant comprising of Rx, Bacon.js, RAC, and others.

Learning it is hard, even harder by the lack of good material. When I started, I tried looking for tutorials. I found only a handful of practical guides, but they just scratched the surface and never tackled the challenge of building the whole architecture around it. Library documentations often don't help when you're trying to understand some function. I mean, honestly, look at this:

> **Rx.Observable.prototype.flatMapLatest(selector, \[thisArg\])**

> Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.

Holy cow.

I've read two books, one just painted the big picture, while the other dived into how to use the Reactive library. I ended up learning Reactive Programming the hard way: figuring it out while building with it. At my work in [Futurice](https://www.futurice.com) I got to use it in a real project, and had the [support of some colleagues](http://blog.futurice.com/top-7-tips-for-rxjava-on-android) when I ran into troubles.

The hardest part of the learning journey is **thinking in Reactive**. It's a lot about letting go of old imperative and stateful habits of typical programming, and forcing your brain to work in a different paradigm. I haven't found any guide on the internet in this aspect, and I think the world deserves a practical tutorial on how to think in Reactive, so that you can get started. Library documentation can light your way after that. I hope this helps you.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#what-is-reactive-programming)""What is Reactive Programming?""

There are plenty of bad explanations and definitions out there on the internet. [Wikipedia](https://en.wikipedia.org/wiki/Reactive_programming) is too generic and theoretical as usual. [Stackoverflow](http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming)'s canonical answer is obviously not suitable for newcomers. [Reactive Manifesto](http://www.reactivemanifesto.org/) sounds like the kind of thing you show to your project manager or the businessmen at your company. Microsoft's [Rx terminology](https://rx.codeplex.com/) ""Rx = Observables + LINQ + Schedulers"" is so heavy and Microsoftish that most of us are left confused. Terms like ""reactive"" and ""propagation of change"" don't convey anything specifically different to what your typical MV\* and favorite language already does. Of course my framework views react to the models. Of course change is propagated. If it wouldn't, nothing would be rendered.

So let's cut the bullshit.

#### [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#reactive-programming-is-programming-with-asynchronous-data-streams)Reactive programming is programming with asynchronous data streams.

In a way, this isn't anything new. Event buses or your typical click events are really an asynchronous event stream, on which you can observe and do some side effects. Reactive is that idea on steroids. You are able to create data streams of anything, not just from click and hover events. Streams are cheap and ubiquitous, anything can be a stream: variables, user inputs, properties, caches, data structures, etc. For example, imagine your Twitter feed would be a data stream in the same fashion that click events are. You can listen to that stream and react accordingly.

**On top of that, you are given an amazing toolbox of functions to combine, create and filter any of those streams.** That's where the ""functional"" magic kicks in. A stream can be used as an input to another one. Even multiple streams can be used as inputs to another stream. You can _merge_ two streams. You can _filter_ a stream to get another one that has only those events you are interested in. You can _map_ data values from one stream to another new one.

If streams are so central to Reactive, let's take a careful look at them, starting with our familiar ""clicks on a button"" event stream.

[

](https://camo.githubusercontent.com/36c0a9ffd8ed22236bd6237d44a1d3eecbaec336/687474703a2f2f692e696d6775722e636f6d2f634c344d4f73532e706e67)

A stream is a sequence of **ongoing events ordered in time**. It can emit three different things: a value (of some type), an error, or a ""completed"" signal. Consider that the ""completed"" takes place, for instance, when the current window or view containing that button is closed.

We capture these emitted events only **asynchronously**, by defining a function that will execute when a value is emitted, another function when an error is emitted, and another function when 'completed' is emitted. Sometimes these last two can be omitted and you can just focus on defining the function for values. The ""listening"" to the stream is called **subscribing**. The functions we are defining are observers. The stream is the subject (or ""observable"") being observed. This is precisely the [Observer Design Pattern](https://en.wikipedia.org/wiki/Observer_pattern).

An alternative way of drawing that diagram is with ASCII, which we will use in some parts of this tutorial:

```
--a---b-c---d---X---|->

a, b, c, d are emitted values
X is an error
| is the 'completed' signal
---> is the timeline

```

Since this feels so familiar already, and I don't want you to get bored, let's do something new: we are going to create new click event streams transformed out of the original click event stream.

First, let's make a counter stream that indicates how many times a button was clicked. In common Reactive libraries, each stream has many functions attached to it, such as `map`, `filter`, `scan`, etc. When you call one of these functions, such as `clickStream.map(f)`, it returns a **new stream** based on the click stream. It does not modify the original click stream in any way. This is a property called **immutability**, and it goes together with Reactive streams just like pancakes are good with syrup. That allows us to chain functions like `clickStream.map(f).scan(g)`:

```
  clickStream: ---c----c--c----c------c-->
               vvvvv map(c becomes 1) vvvv
               ---1----1--1----1------1-->
               vvvvvvvvv scan(+) vvvvvvvvv
counterStream: ---1----2--3----4------5-->

```

The `map(f)` function replaces (into the new stream) each emitted value according to a function `f` you provide. In our case, we mapped to the number 1 on each click. The `scan(g)` function aggregates all previous values on the stream, producing value `x = g(accumulated, current)`, where `g` was simply the add function in this example. Then, `counterStream` emits the total number of clicks whenever a click happens.

To show the real power of Reactive, let's just say that you want to have a stream of ""double click"" events. To make it even more interesting, let's say we want the new stream to consider triple clicks as double clicks, or in general, multiple clicks (two or more). Take a deep breath and imagine how you would do that in a traditional imperative and stateful fashion. I bet it sounds fairly nasty and involves some variables to keep state and some fiddling with time intervals.

Well, in Reactive it's pretty simple. In fact, the logic is just [4 lines of code](http://jsfiddle.net/staltz/4gGgs/27/). But let's ignore code for now. Thinking in diagrams is the best way to understand and build streams, whether you're a beginner or an expert.

[

](https://camo.githubusercontent.com/995c301de2f566db10748042a5a67cc5d9ac45d9/687474703a2f2f692e696d6775722e636f6d2f484d47574e4f352e706e67)

Grey boxes are functions transforming one stream into another. First we accumulate clicks in lists, whenever 250 milliseconds of ""event silence"" has happened (that's what `buffer(stream.throttle(250ms))` does, in a nutshell. Don't worry about understanding the details at this point, we are just demoing Reactive for now). The result is a stream of lists, from which we apply `map()` to map each list to an integer matching the length of that list. Finally, we ignore `1` integers using the `filter(x >= 2)` function. That's it: 3 operations to produce our intended stream. We can then subscribe (""listen"") to it to react accordingly how we wish.

I hope you enjoy the beauty of this approach. This example is just the tip of the iceberg: you can apply the same operations on different kinds of streams, for instance, on a stream of API responses; on the other hand, there are many other functions available.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#why-should-i-consider-adopting-rp)""Why should I consider adopting RP?""

Reactive Programming raises the level of abstraction of your code so you can focus on the interdependence of events that define the business logic, rather than having to constantly fiddle with a large amount of implementation details. Code in RP will likely be more concise.

The benefit is more evident in modern webapps and mobile apps that are highly interactive with a multitude of UI events related to data events. 10 years ago, interaction with web pages was basically about submitting a long form to the backend and performing simple rendering to the frontend. Apps have evolved to be more real-time: modifying a single form field can automatically trigger a save to the backend, ""likes"" to some content can be reflected in real time to other connected users, and so forth.

Apps nowadays have an abundancy of real-time events of every kind that enable a highly interactive experience to the user. We need tools for properly dealing with that, and Reactive Programming is an answer.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#thinking-in-rp-with-examples)Thinking in RP, with examples

Let's dive into the real stuff. A real-world example with a step-by-step guide on how to think in RP. No synthetic examples, no half-explained concepts. By the end of this tutorial we will have produced real functioning code, while knowing why we did each thing.

I picked **JavaScript** and **[RxJS](https://github.com/Reactive-Extensions/RxJS)** as the tools for this, for a reason: JavaScript is the most familiar language out there at the moment, and the [Rx\* library family](http://www.reactivex.io) is widely available for many languages and platforms ([.NET](https://rx.codeplex.com/), [Java](https://github.com/Netflix/RxJava), [Scala](https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-scala), [Clojure](https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-clojure), [JavaScript](https://github.com/Reactive-Extensions/RxJS), [Ruby](https://github.com/Reactive-Extensions/Rx.rb), [Python](https://github.com/Reactive-Extensions/RxPy), [C++](https://github.com/Reactive-Extensions/RxCpp), [Objective-C/Cocoa](https://github.com/ReactiveCocoa/ReactiveCocoa), [Groovy](https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-groovy), etc). So whatever your tools are, you can concretely benefit by following this tutorial.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#implementing-a-who-to-follow-suggestions-box)Implementing a ""Who to follow"" suggestions box

In Twitter there is this UI element that suggests other accounts you could follow:

[

](https://camo.githubusercontent.com/81e5d63c69768e1b04447d2e246f47540dd83fbd/687474703a2f2f692e696d6775722e636f6d2f65416c4e62306a2e706e67)

We are going to focus on imitating its core features, which are:

*   On startup, load accounts data from the API and display 3 suggestions
*   On clicking ""Refresh"", load 3 other account suggestions into the 3 rows
*   On click 'x' button on an account row, clear only that current account and display another
*   Each row displays the account's avatar and links to their page

We can leave out the other features and buttons because they are minor. And, instead of Twitter, which recently closed its API to the unauthorized public, let's build that UI for following people on Github. There's a [Github API for getting users](https://developer.github.com/v3/users/#get-all-users).

The complete code for this is ready at [http://jsfiddle.net/staltz/8jFJH/48/](http://jsfiddle.net/staltz/8jFJH/48/) in case you want to take a peak already.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#request-and-response)Request and response

**How do you approach this problem with Rx?** Well, to start with, (almost) _everything can be a stream_. That's the Rx mantra. Let's start with the easiest feature: ""on startup, load 3 accounts data from the API"". There is nothing special here, this is simply about (1) doing a request, (2) getting a response, (3) rendering the response. So let's go ahead and represent our requests as a stream. At first this will feel like overkill, but we need to start from the basics, right?

On startup we need to do only one request, so if we model it as a data stream, it will be a stream with only one emitted value. Later, we know we will have many requests happening, but for now, it is just one.

```
--a------|->

Where a is the string 'https://api.github.com/users'

```

This is a stream of URLs that we want to request. Whenever a request event happens, it tells us two things: when and what. ""When"" the request should be executed is when the event is emitted. And ""what"" should be requested is the value emitted: a string containing the URL.

To create such stream with a single value is very simple in Rx\*. The official terminology for a stream is ""Observable"", for the fact that it can be observed, but I find it to be a silly name, so I call it _stream_.

var requestStream \= Rx.Observable.just('https://api.github.com/users');

But now, that is just a stream of strings, doing no other operation, so we need to somehow make something happen when that value is emitted. That's done by to the stream.

requestStream.subscribe(function(requestUrl) {
  // execute the request
  jQuery.getJSON(requestUrl, function(responseData) {
    // ...
  });
}

Notice we are using a jQuery Ajax callback (which we assume you [should know already](http://devdocs.io/jquery/jquery.getjson)) to handle the asynchronicity of the request operation. But wait a moment, Rx is for dealing with **asynchronous** data streams. Couldn't the response for that request be a stream containing the data arriving at some time in the future? Well, at a conceptual level, it sure looks like it, so let's try that.

requestStream.subscribe(function(requestUrl) {
  // execute the request
  var responseStream \= Rx.Observable.create(function (observer) {
    jQuery.getJSON(requestUrl)
    .done(function(response) { observer.onNext(response); })
    .fail(function(jqXHR, status, error) { observer.onError(error); })
    .always(function() { observer.onCompleted(); });
  });
  
  responseStream.subscribe(function(response) {
    // do something with the response
  });
}

What [`Rx.Observable.create()`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablecreatesubscribe) does is create your own custom stream by explicitly informing each observer (or in other words, a ""subscriber"") about data events (`onNext()`) or errors (`onError()`). What we did was just wrap that jQuery Ajax Promise. **Excuse me, does this mean that a Promise is an Observable?**

[

](https://camo.githubusercontent.com/4df519edd2d527bf5e90b7d00e22cdc3c3be00d4/687474703a2f2f7777772e6d79666163657768656e2e6e65742f75706c6f6164732f333332342d616d617a65642d666163652e676966)

Yes.

Observable is Promise++. In Rx you can easily convert a Promise to an Observable by doing `var stream = Rx.Observable.fromPromise(promise)`, so let's use that. The only difference is that Observables are not [Promises/A+](http://promises-aplus.github.io/promises-spec/) compliant, but conceptually there is no clash. A Promise is simply an Observable with one single emitted value. Rx streams go beyond promises by allowing many returned values.

This is pretty nice, and shows how Observables are at least as powerful as Promises. So if you believe the Promises hype, keep an eye on what Rx Observables are capable of.

Now back to our example, if you were quick to notice, we have one `subscribe()` call inside another, which is somewhat akin to callback hell. Also, the creation of `responseStream` is dependent on `requestStream`. As you heard before, in Rx there are simple mechanisms for transforming and creating new streams out of others, so we should be doing that.

The one basic function that you should know by now is [`map(f)`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypemapselector-thisarg), which takes each value of stream A, applies `f()` on it, and produces a value on stream B. If we do that to our request and response streams, we can map request URLs to response Promises (disguised as streams).

var responseMetastream \= requestStream
  .map(function(requestUrl) {
    return Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
  });

Then we will have created a beast called ""_metastream_"": a stream of streams. Don't panic yet. A metastream is a stream where each emitted value is yet another stream. You can think of it as [pointers](https://en.wikipedia.org/wiki/Pointer_(computer_programming)): each emitted value is a _pointer_ to another stream. In our example, each request URL is mapped to a pointer to the promise stream containing the corresponding response.

[

](https://camo.githubusercontent.com/2a8a9cc75acd13443f588fd7f386bd7a6dcb271a/687474703a2f2f692e696d6775722e636f6d2f48486e6d6c61632e706e67)

A metastream for responses looks confusing, and doesn't seem to help us at all. We just want a simple stream of responses, where each emitted value is a JSON object, not a 'Promise' of a JSON object. Say hi to [Mr. Flatmap](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeflatmapselector-resultselector): a version of `map()` that ""flattens"" a metastream, by emitting on the ""trunk"" stream everything that will be emitted on ""branch"" streams. Flatmap is not a ""fix"" and metastreams are not a bug, these are really the tools for dealing with asynchronous responses in Rx.

var responseStream \= requestStream
  .flatMap(function(requestUrl) {
    return Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
  });

[

](https://camo.githubusercontent.com/0b0ac4a249e1c15d7520c220957acfece1af3e95/687474703a2f2f692e696d6775722e636f6d2f4869337a4e7a4a2e706e67)

Nice. And because the response stream is defined according to request stream, **if** we have later on more events happening on request stream, we will have the corresponding response events happening on response stream, as expected:

```
requestStream:  --a-----b--c------------|->
responseStream: -----A--------B-----C---|->

(lowercase is a request, uppercase is its response)

```

Now that we finally have a response stream, we can render the data we receive:

responseStream.subscribe(function(response) {
  // render \`response\` to the DOM however you wish
});

Joining all the code until now, we have:

var requestStream \= Rx.Observable.just('https://api.github.com/users');

var responseStream \= requestStream
  .flatMap(function(requestUrl) {
    return Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
  });

responseStream.subscribe(function(response) {
  // render \`response\` to the DOM however you wish
});

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#the-refresh-button)The refresh button

I did not yet mention that the JSON in the response is a list with 100 users. The API only allows us to specify the page offset, and not the page size, so we're using just 3 data objects and wasting 97 others. We can ignore that problem for now, since later on we will see how to cache the responses.

Everytime the refresh button is clicked, the request stream should emit a new URL, so that we can get a new response. We need two things: a stream of click events on the refresh button (mantra: anything can be a stream), and we need to change the request stream to depend on the refresh click stream. Gladly, RxJS comes with tools to make Observables from event listeners.

var refreshButton \= document.querySelector('.refresh');
var refreshClickStream \= Rx.Observable.fromEvent(refreshButton, 'click');

Since the refresh click event doesn't itself carry any API URL, we need to map each click to an actual URL. Now we change the request stream to be the refresh click stream mapped to the API endpoint with a random offset parameter each time.

var requestStream \= refreshClickStream
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });

Because I'm dumb and I don't have automated tests, I just broke one of our previously built features. A request doesn't happen anymore on startup, it happens only when the refresh is clicked. Urgh. I need both behaviors: a request when _either_ a refresh is clicked _or_ the webpage was just opened.

We know how to make a separate stream for each one of those cases:

var requestOnRefreshStream \= refreshClickStream
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });
  
var startupRequestStream \= Rx.Observable.just('https://api.github.com/users');

But how can we ""merge"" these two into one? Well, there's [`merge()`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypemergemaxconcurrent--other). Explained in the diagram dialect, this is what it does:

```
stream A: ---a--------e-----o----->
stream B: -----B---C-----D-------->
          vvvvvvvvv merge vvvvvvvvv
          ---a-B---C--e--D--o----->

```

It should be easy now:

var requestOnRefreshStream \= refreshClickStream
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });
  
var startupRequestStream \= Rx.Observable.just('https://api.github.com/users');

var requestStream \= Rx.Observable.merge(
  requestOnRefreshStream, startupRequestStream
);

There is an alternative and cleaner way of writing that, without the intermediate streams.

var requestStream \= refreshClickStream
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  })
  .merge(Rx.Observable.just('https://api.github.com/users'));

Even shorter, even more readable:

var requestStream \= refreshClickStream
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  })
  .startWith('https://api.github.com/users');

The [`startWith()`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypestartwithscheduler-args) function does exactly what you think it does. No matter how your input stream looks like, the output stream resulting of `startWith(x)` will have `x` at the beginning. But I'm not [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself) enough, I'm repeating the API endpoint string. One way to fix this is by moving the `startWith()` close to the `refreshClickStream`, to essentially ""emulate"" a refresh click on startup.

var requestStream \= refreshClickStream.startWith('startup click')
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });

Nice. If you go back to the point where I ""broke the automated tests"", you should see that the only difference with this last approach is that I added the `startWith()`.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#modelling-the-3-suggestions-with-streams)Modelling the 3 suggestions with streams

Until now, we have only touched a _suggestion_ UI element on the rendering step that happens in the responseStream's `subscribe()`. Now with the refresh button, we have a problem: as soon as you click 'refresh', the current 3 suggestions are not cleared. New suggestions come in only after a response has arrived, but to make the UI look nice, we need to clean out the current suggestions when clicks happen on the refresh.

refreshClickStream.subscribe(function() {
  // clear the 3 suggestion DOM elements 
});

No, not so fast, pal. This is bad, because we now have **two** subscribers that affect the suggestion DOM elements (the other one being `responseStream.subscribe()`), and that doesn't really sound like [Separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns). Remember the Reactive mantra?

[

](https://camo.githubusercontent.com/e581baffb3db3e4f749350326af32de8d5ba4363/687474703a2f2f692e696d6775722e636f6d2f4149696d5138432e6a7067)

So let's model a suggestion as a stream, where each emitted value is the JSON object containing the suggestion data. We will do this separately for each of the 3 suggestions. This is how the stream for suggestion #1 could look like:

var suggestion1Stream \= responseStream
  .map(function(listUsers) {
    // get one random user from the list
    return listUsers\[Math.floor(Math.random()\*listUsers.length)\];
  });

The others, `suggestion2Stream` and `suggestion3Stream` can be simply copy pasted from `suggestion1Stream`. This is not DRY, but it will keep our example simple for this tutorial, plus I think it's a good exercise to think how to avoid repetition in this case.

Instead of having the rendering happen in responseStream's subscribe(), we do that here:

suggestion1Stream.subscribe(function(suggestion) {
  // render the 1st suggestion to the DOM
});

Back to the ""on refresh, clear the suggestions"", we can simply map refresh clicks to `null` suggestion data, and include that in the `suggestion1Stream`, as such:

var suggestion1Stream \= responseStream
  .map(function(listUsers) {
    // get one random user from the list
    return listUsers\[Math.floor(Math.random()\*listUsers.length)\];
  })
  .merge(
    refreshClickStream.map(function(){ return null; })
  );

And when rendering, we interpret `null` as ""no data"", hence hiding its UI element.

suggestion1Stream.subscribe(function(suggestion) {
  if (suggestion \=== null) {
    // hide the first suggestion DOM element
  }
  else {
    // show the first suggestion DOM element
    // and render the data
  }
});

The big picture is now:

```
refreshClickStream: ----------o--------o---->
     requestStream: -r--------r--------r---->
    responseStream: ----R---------R------R-->   
 suggestion1Stream: ----s-----N---s----N-s-->
 suggestion2Stream: ----q-----N---q----N-q-->
 suggestion3Stream: ----t-----N---t----N-t-->

```

Where `N` stands for `null`.

As a bonus, we can also render ""empty"" suggestions on startup. That is done by adding `startWith(null)` to the suggestion streams:

var suggestion1Stream \= responseStream
  .map(function(listUsers) {
    // get one random user from the list
    return listUsers\[Math.floor(Math.random()\*listUsers.length)\];
  })
  .merge(
    refreshClickStream.map(function(){ return null; })
  )
  .startWith(null);

Which results in:

```
refreshClickStream: ----------o---------o---->
     requestStream: -r--------r---------r---->
    responseStream: ----R----------R------R-->   
 suggestion1Stream: -N--s-----N----s----N-s-->
 suggestion2Stream: -N--q-----N----q----N-q-->
 suggestion3Stream: -N--t-----N----t----N-t-->

```

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#closing-a-suggestion-and-using-cached-responses)Closing a suggestion and using cached responses

There is one feature remaining to implement. Each suggestion should have its own 'x' button for closing it, and loading another in its place. At first thought, you could say it's enough to make a new request when any close button is clicked:

var close1Button \= document.querySelector('.close1');
var close1ClickStream \= Rx.Observable.fromEvent(close1Button, 'click');
// and the same for close2Button and close3Button

var requestStream \= refreshClickStream.startWith('startup click')
  .merge(close1ClickStream) // we added this
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });

That does not work. It will close and reload _all_ suggestions, rather than just only the one we clicked on. There are a couple of different ways of solving this, and to keep it interesting, we will solve it by reusing previous responses. The API's response page size is 100 users while we were using just 3 of those, so there is plenty of fresh data available. No need to request more.

Again, let's think in streams. When a 'close1' click event happens, we want to use the _most recently emitted_ response on `responseStream` to get one random user from the list in the response. As such:

```
    requestStream: --r--------------->
   responseStream: ------R----------->
close1ClickStream: ------------c----->
suggestion1Stream: ------s-----s----->

```

In Rx\* there is a combinator function called [`combineLatest`](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypecombinelatestargs-resultselector) that seems to do what we need. It takes two streams A and B as inputs, and whenever either stream emits a value, `combineLatest` joins the two most recently emitted values `a` and `b` from both streams and outputs a value `c = f(x,y)`, where `f` is a function you define. It is better explained with a diagram:

```
stream A: --a-----------e--------i-------->
stream B: -----b----c--------d-------q---->
          vvvvvvvv combineLatest(f) vvvvvvv
          ----AB---AC--EC---ED--ID--IQ---->

where f is the uppercase function

```

We can apply combineLatest() on `close1ClickStream` and `responseStream`, so that whenever the close 1 button is clicked, we get the latest response emitted and produce a new value on `suggestion1Stream`. On the other hand, combineLatest() is symmetric: whenever a new response is emitted on `responseStream`, it will combine with the latest 'close 1' click to produce a new suggestion. That is interesting, because it allows us to simplify our previous code for `suggestion1Stream`, like this:

var suggestion1Stream \= close1ClickStream
  .combineLatest(responseStream,             
    function(click, listUsers) {
      return listUsers\[Math.floor(Math.random()\*listUsers.length)\];
    }
  )
  .merge(
    refreshClickStream.map(function(){ return null; })
  )
  .startWith(null);

One piece is still missing in the puzzle. The combineLatest() uses the most recent of the two sources, but if one of those sources hasn't emitted anything yet, combineLatest() cannot produce a data event on the output stream. If you look at the ASCII diagram above, you will see that the output has nothing when the first stream emitted value `a`. Only when the second stream emitted value `b` could it produce an output value.

There are different ways of solving this, and we will stay with the simplest one, which is simulating a click to the 'close 1' button on startup:

var suggestion1Stream \= close1ClickStream.startWith('startup click') // we added this
  .combineLatest(responseStream,             
    function(click, listUsers) {
      lreturn listUsers\[Math.floor(Math.random()\*listUsers.length)\];
    }
  )
  .merge(
    refreshClickStream.map(function(){ return null; })
  )
  .startWith(null);

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#wrapping-up)Wrapping up

And we're done. The complete code for all this was:

var refreshButton \= document.querySelector('.refresh');
var refreshClickStream \= Rx.Observable.fromEvent(refreshButton, 'click');

var closeButton1 \= document.querySelector('.close1');
var close1ClickStream \= Rx.Observable.fromEvent(closeButton1, 'click');
// and the same logic for close2 and close3

var requestStream \= refreshClickStream.startWith('startup click')
  .map(function() {
    var randomOffset \= Math.floor(Math.random()\*500);
    return 'https://api.github.com/users?since=' + randomOffset;
  });

var responseStream \= requestStream
  .flatMap(function (requestUrl) {
    return Rx.Observable.fromPromise($.ajax({url: requestUrl}));
  });

var suggestion1Stream \= close1ClickStream.startWith('startup click')
  .combineLatest(responseStream,             
    function(click, listUsers) {
      return listUsers\[Math.floor(Math.random()\*listUsers.length)\];
    }
  )
  .merge(
    refreshClickStream.map(function(){ return null; })
  )
  .startWith(null);
// and the same logic for suggestion2Stream and suggestion3Stream

suggestion1Stream.subscribe(function(suggestion) {
  if (suggestion \=== null) {
    // hide the first suggestion DOM element
  }
  else {
    // show the first suggestion DOM element
    // and render the data
  }
});

**You can see this working example at [http://jsfiddle.net/staltz/8jFJH/48/](http://jsfiddle.net/staltz/8jFJH/48/)**

That piece of code is small but dense: it features management of multiple events with proper separation of concerns, and even caching of responses. The functional style made the code look more declarative than imperative: we are not giving a sequence of instructions to execute, we are just **telling what something is** by defining relationships between streams. For instance, with Rx we told the computer that _`suggestion1Stream` **is** the 'close 1' stream combined with one user from the latest response, besides being `null` when a refresh happens or program startup happened_.

Notice also the impressive absence of control flow elements such as `if`, `for`, `while`, and the typical callback-based control flow that you expect from a JavaScript application. You can even get rid of the `if` and `else` in the `subscribe()` above by using `filter()` if you want (I'll leave the implementation details to you as an exercise). In Rx, we have stream functions such as `map`, `filter`, `scan`, `merge`, `combineLatest`, `startWith`, and many more to control the flow of an event-driven program. This toolset of functions gives you more power in less code.

## [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#what-comes-next)What comes next

If you think Rx\* will be your preferred library for Reactive Programming, take a while to get acquainted with the [big list of functions](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md) for transforming, combining, and creating Observables. If you want to understand those functions in diagrams of streams, take a look at [RxJava's very useful documentation with marble diagrams](https://github.com/Netflix/RxJava/wiki/Creating-Observables). Whenever you get stuck trying to do something, draw those diagrams, think on them, look at the long list of functions, and think more. This workflow has been effective in my experience.

Once you start getting the hang of programming with Rx\*, it is absolutely required to understand the concept of [Cold vs Hot Observables](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/creating.md#cold-vs-hot-observables). If you ignore this, it will come back and bite you brutally. You have been warned. Sharpen your skills further by learning real functional programming, and getting acquainted with issues such as side effects that affect Rx\*.

But Reactive Programming is not just Rx\*. There is [Bacon.js](http://baconjs.github.io/) which is intuitive to work with, without the quirks you sometimes encounter in Rx\*. The [Elm Language](http://elm-lang.org/) lives in its own category: it's a Functional Reactive Programming **language** that compiles to JavaScript + HTML + CSS, and features a [time travelling debugger](http://debug.elm-lang.org/). Pretty awesome.

Rx works great for event-heavy frontends and apps. But it is not just a client-side thing, it works great also in the backend and close to databases. In fact, [RxJava is a key component for enabling server-side concurrency in Netflix's API](http://techblog.netflix.com/2013/02/rxjava-netflix-api.html). Rx is not a framework restricted to one specific type of application or language. It really is a paradigm that you can use when programming any event-driven software.

If this tutorial helped you, [tweet it forward](https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Fgist.github.com%2Fstaltz%2F868e7e9bc2a7b8c1f754%2F&text=The%20introduction%20to%20Reactive%20Programming%20you%27ve%20been%20missing&tw_p=tweetbutton&url=https%3A%2F%2Fgist.github.com%2Fstaltz%2F868e7e9bc2a7b8c1f754&via=andrestaltz).

* * *

### [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#legal)Legal

© Andre Medeiros (alias ""Andre Staltz""), 2014. Unauthorized use and/or duplication of this material without express and written permission from this site’s author and/or owner is strictly prohibited. Excerpts and links may be used, provided that full and clear credit is given to Andre Medeiros and [http://andre.staltz.com](http://andre.staltz.com) with appropriate and specific direction to the original content.

  
""Introduction to Reactive Programming you've been missing"" by [Andre Staltz](http://andre.staltz.com) is licensed under a [Creative Commons Attribution-NonCommercial 4.0 International License](http://creativecommons.org/licenses/by-nc/4.0/).  
Based on a work at [](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)[https://gist.github.com/staltz/868e7e9bc2a7b8c1f754](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754).",null,undefined
2018-11-28T15:08:30.000Z,https://blog.doist.com/the-life-changing-magic-of-tidying-up-your-todoist-8413b3e06473,false,"[""productivity"",""best""]",article,The Life-Changing Magic of Tidying Up Your Todoist,null,pocket,null,"# The Life-Changing Magic of Tidying Up Your To-Do List

by [Neil Vidyarthi](https://doist.com/blog/by/neil-vidyarthi/), [doist.com](http://doist.com)  
February 1, 2018 01:36 PM

Taking a cue from Marie Kondo, you can declutter your task list in the same way she tidies physical belongings.",null,undefined
2018-01-24T07:21:55.000Z,http://blog.capwatkins.com/the-sliding-scale-of-giving-a-fuck,false,"[""best""]",article,The Sliding Scale of Giving a Fuck,null,pocket,null,"# The Sliding Scale of Giving a Fuck

[blog.capwatkins.com](http://blog.capwatkins.com) | May 19, 2015

During my first big project at Etsy, completely overhauling our Item Reviews system, I was paired with [Andrew Morrison](https://twitter.com/asmorrison), an incredibly talented engineer (and now a very good friend). Andy cared a lot about not just the code he wrote, but the product itself - how it was designed, how it worked, how elements on the page lined up together. He never shied away from asking questions about the design directions I proposed, nor about suggesting his own solutions for making the product work.

For the most part, our relationship worked pretty well. At times, however, I’d find myself in endless, circular arguments with Andy on how the product should function. What are the rules for when an item can be reviewed? What about problems with an item? How long should a single review impact the overall average for the shop? Should this flow be two steps, or should we consolidate down to one? Between the two of us, we could easily spend half an hour debating these topics, both advocating for our different points of view and trying to convince the other that we were right. And while most of our topics merited the scrutiny, at times I felt like he was pushing back on something extremely small and inconsequential, which in turn led me to push back even more.

One day, we were going a few rounds over a small detail (I can’t even remember what it was, honestly) when Andy suddenly brought the conversation to a halt:

_Hold on a second. I’m like a two-out-of-ten on this. How strongly do you feel?_

_I’m probably a six-out-of-ten,_ I replied after a couple moments of consideration.

_Cool, then let’s do it your way._

I realized two things at that point. First, sometimes Andy just likes a good, healthy debate (to ensure that we’ve thought through everything). Secondly, I was frequently out of touch with how strongly (or not strongly) I felt about a particular topic of discussion. Regularly, I’d find myself impassioned more towards the ten-out-of-ten side of things, mostly because I wasn’t stopping to think about the scope and importance of those topics.

Ever since then, I’ve found myself more and more rating both my feelings and the importance of any particular decision on that same one-to-ten scale. Is the decision non-critical and I don’t actually care that much one way or another? Then I’ll voice my preference, but follow up with “but I’m a two-out-of-ten on this, so whatever you want to do is fine.” Is the topic mission-critical, with far-reaching effects? My opinion will probably be a bit stronger and I’ll debate a bit harder or longer.

Interestingly, it turns out that many, many of the decisions I’m a part of day-to-day and week-to-week rate pretty low on the scale. It’s rare that I find myself beyond a five, which is probably right. Someone said to me once: if everything is an emergency, then nothing is. Similarly, if I’m a ten-out-of-ten on every single decision I’m ever a part of, how can anyone know or trust me when I say something’s very important to me? Having an internal barometer for what’s important and what’s less critical is incredibly useful for helping others trust your responses to ideas and proposals.

Not only that, but I’ve found myself now reading others’ internal barometers. There have been a few times recently when I could tell someone felt far more strongly about a decision than I did. So, I acquiesced, with the hope that the next time I’m a ten-out-of-ten on a topic with that person involved, they’ll recognize that and hear me out. If you can let go of the things that don’t matter so much to you directly, you can build currency with others and earn their trust when you do wind up pushing back.

_Don’t like visiting web sites? [Sign up for the newsletter](http://www.capwatkins.com/subscribe/) to get blog content and links I’ve found each week._",null,undefined
2018-11-27T07:17:58.000Z,https://12factor.net/,false,"[""devops"",""best""]",article,The Twelve-Factor App,null,pocket,null,"# The Twelve-Factor App

by Adam Wiggins, [12factor.net](http://12factor.net)

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

# Introduction

In the modern era, software is commonly delivered as a service: called _web apps_, or _software-as-a-service_. The twelve-factor app is a methodology for building software-as-a-service apps that:

*   Use **declarative** formats for setup automation, to minimize time and cost for new developers joining the project;
*   Have a **clean contract** with the underlying operating system, offering **maximum portability** between execution environments;
*   Are suitable for **deployment** on modern **cloud platforms**, obviating the need for servers and systems administration;
*   **Minimize divergence** between development and production, enabling **continuous deployment** for maximum agility;
*   And can **scale up** without significant changes to tooling, architecture, or development practices.

The twelve-factor methodology can be applied to apps written in any programming language, and which use any combination of backing services (database, queue, memory cache, etc).

# Background

The contributors to this document have been directly involved in the development and deployment of hundreds of apps, and indirectly witnessed the development, operation, and scaling of hundreds of thousands of apps via our work on the [Heroku](http://www.heroku.com/) platform.

This document synthesizes all of our experience and observations on a wide variety of software-as-a-service apps in the wild. It is a triangulation on ideal practices for app development, paying particular attention to the dynamics of the organic growth of an app over time, the dynamics of collaboration between developers working on the app’s codebase, and [avoiding the cost of software erosion](http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/).

Our motivation is to raise awareness of some systemic problems we’ve seen in modern application development, to provide a shared vocabulary for discussing those problems, and to offer a set of broad conceptual solutions to those problems with accompanying terminology. The format is inspired by Martin Fowler’s books _[Patterns of Enterprise Application Architecture](https://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC)_ and _[Refactoring](https://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C)_.

# Who should read this document?

Any developer building applications which run as a service. Ops engineers who deploy or manage such applications.",null,undefined
2018-12-09T16:15:02.000Z,https://jamesaltucher.com/2013/12/ultimate-cheat-sheet-for-reinventing-yourself-2/,false,"[""productivity"",""best""]",article,The Ultimate Cheat Sheet For Reinventing Yourself,null,pocket,null,"# The Ultimate Cheat Sheet For Reinventing Yourself

[jamesaltucher.com](http://jamesaltucher.com) | December 1, 2013 01:38 PM

Here are the rules: I’ve been at zero a few times, come back a few times, and done it over and over. I’ve started entire new careers. People who knew me then, don’t me now. And so on.

I’ve had to change careers several times. Sometimes because my interests changed. Sometimes because all bridges have been burned beyond recognition, sometimes because I desperately needed money. And sometimes just because I hated everyone in my old career or they hated me.

There are other ways to reinvent yourself, so take what I say with a grain of salt. **This is what worked for me.**

I’ve seen it work for maybe a few hundred other people. Through interviews, through people writing me letters, through the course of the past 20 years. You can try it or not.

**A) Reinvention never stops.**

Every day you reinvent yourself. You’re always in motion. But you decide every day: forward or backward.

**B) You start from scratch.**

Every label you claim you have from before is just vanity. You were a doctor? You were Ivy League? You had millions? You had a family? Nobody cares. You lost everything. You’re a zero. Don’t try to say you’re anything else.

**C) [You need a mentor.](https://www.thealtucherreport.com/checkout/1/digital-virtual-mentor.php)**

Else, you’ll sink to the bottom. Someone has to show you how to move and breathe. But don’t worry about finding a mentor (see below).

**D) Three types of mentors**

1.  **Direct.** Someone who is in front of you who will show you how they did it. What is “it”? Wait. By the way, mentors aren’t like that old Japanese guy in “The Karate Kid.” Ultimately most mentors will hate you.
2.  **Indirect.** Books. **_[{See More On How Books Can Be Better Mentors Than People… And My New Solution To Help You Find Your Mentor – Click Here}.](https://www.thealtucherreport.com/checkout/1/digital-virtual-mentor.php)_** You can outsource 90 percent of mentorship to books and other materials. 200-500 books equals one good mentor. People ask me, “What is a good book to read?” I never know the answer. There are 200-500 good books to read. I would throw in inspirational books. Whatever are your beliefs, underline them through reading every day.
3.  **Everything is a mentor.** If you are a zero, and have passion for reinvention, then everything you look at will be a metaphor for what you want to do. The tree you see, with roots you don’t, with underground water that feeds it, is a metaphor for computer programming if you connect the dots. And everything you look at, you will connect the dots.

**E) Don’t worry if you don’t have passion for anything.**

You have passion for your health. Start there. Take baby steps. You don’t need a passion to succeed. Do what you do with love and success is a natural symptom.

**F) Time it takes to reinvent yourself: five years.**

Here’s a description of the five years:

*   Year One: you’re flailing and reading everything and just starting to DO.
*   Year Two: you know who you need to talk to and network with. You’re Doing every day. You finally know what the monopoly board looks like in your new endeavors.
*   Year Three: you’re good enough to start making money. It might not be a living yet.
*   Year Four: you’re making a good living
*   Year Five: you’re making wealth

Sometimes I get frustrated in years 1-4. I say, “why isn’t it happening yet?” and I punch the floor and hurt my hand and throw a coconut on the floor in a weird ritual. That’s okay. Just keep going. Or stop and pick a new field. It doesn’t matter. Eventually you’re dead and then it’s hard to reinvent yourself.

**G) If you do this faster or slower then you are doing something wrong.**

Google is a good example.

**H) It’s not about the money. But money is a decent measuring stick.**

When people say “it’s not about the money” they should make sure they have a different measuring stick.

“What about just doing what you love?” There will be many days when you don’t love what you are doing. If you are doing it just for love then it will take much much longer than five years.

Happiness is just a positive perception from our brain. Some days you will be unhappy. Our brain is a tool we use. It’s not who we are.

**I) When can you say, “I do X!” where X is your new career?**

Today.

**J) When can I start doing X?**

Today. If you want to paint, then buy a canvas and paints today, start buying 500 books one at a time, and start painting. If you want to write do these three things:

*   Read
*   Write
*   Take your favorite author and type your favorite story of his word for word. Wonder to yourself why he wrote each word. He’s your mentor today.

If you want to start a business, start spec-ing out the idea for your business. Reinvention starts today. Every day.

**K) How do I make money?**

By year three you’ve put in 5,000-7,000 hours. That’s good enough to be in the top 200-300 in the world in anything. The top 200 in almost any field makes a living.

By year three you will know how to make money. By year four you will scale that up and make a living. Some people stop at year four.

**L) By year five you’re in the top 30-50 so you can make wealth.**

**M) What is “it”? How do I know what I should do?**

Whatever area you feel like reading 500 books about. Go to the bookstore and find it. If you get bored three months later go back to the bookstore.

It’s okay to get disillusioned. That’s what failure is about. Success is better than failure but the biggest lessons are found in failure.

Very important: There’s no rush. You will reinvent yourself many times in an interesting life. You will fail to reinvent many times. That’s fun also.

Many reinventions make your life a book of stories instead of a textbook.

Some people want the story of their life to be a textbook. For better or worse, mine is a book of stories.

That’s why reinvention happens every day.

**N) The choices you make today will be in your biography tomorrow**.

Make interesting choices and you will have an interesting biography.

**N1) The choices you make today will be in your biography tomorrow.**

**O) What if I like something obscure? Like biblical archaeology or 11th-century warfare?**

Repeat all of the steps above, and then in year five you will make wealth. We have no idea how. Don’t look to find the end of the road when you are still at the very first step.

**P) What if my family wants me to be an accountant?**

How many years of your life did you promise your family? Ten years? Your whole life? Then wait until the next life. The good thing is: you get to choose.

Choose freedom over family. Freedom over preconceptions. Freedom over government. Freedom over people-pleasing. Then you will be pleased.

**Q) My mentor wants me to do it HIS way.**

That’s fine. Learn HIS way. Then do it YOUR way. With respect.

Hopefully nobody has a gun to your head. Then you have to do it their way until the gun is put down.

**R) My spouse is worried about who will support/take care of kids?**

Then after you work 16 hours a day, seven days a week being a janitor, use your spare time to reinvent.

Someone who is reinventing ALWAYS has spare time. Part of reinvention is collecting little bits and pieces of time and re-carving them the way you want them to be.

**S) What if my friends think I’m crazy?**

What friends?

**T) What if I want to be an astronaut?**

That’s not a reinvention. That’s a specific job. If you like “outer space” there are many careers. Richard Branson wanted to be an astronaut and started Virgin Galactic.

**U) What if I like to go out drinking and partying?**

Read this post again in a year.

**V) What if I’m busy cheating on my husband or wife or betraying a partner?**

Read this post again in two or three years when you are broke and jobless and nobody likes you.

**W) What if I have no skills at all?**

Read “B” again.

**X) What if I have no degree or I have a useless degree?**

Read “B” again.

**Y) What if I have to focus on paying down my debt and mortgage?**

Read “R” again.

**Z) How come I always feel like I’m on the outside looking in?**

Albert Einstein was on the outside looking in. Nobody in the establishment would even hire him.

Everyone feels like a fraud at some point. The highest form of creativity is born out of skepticism.

**AA) I can’t read 500 books. What one book should I read for inspiration?**

Give up.

**BB) What if I’m too sick to reinvent?**

Reinvention will boost every healthy chemical in your body: serotonin, dopamine, oxytocin. Keep moving forward and you might not get healthy but you will get healthier. Don’t use health as an excuse.

Finally, reinvent your health first. Sleep more hours. Eat better. Exercise. These are key steps to reinvention.

**CC) What if my last partner screwed me and I’m still suing him?**

Stop litigating and never think about him again. Half the problem was you, not him.

**DD) What if I’m going to jail?**

Perfect. Reread “B.” Read a lot of books in jail.

**EE) What if I’m shy?**

Make your weaknesses your strengths. Introverts listen better, focus better, and have ways of being more endearing.

**FF) What if I can’t wait five years?**

If you plan on being alive in five years then you might as well start today.

**GG) How should I network?**

Make concentric circles. You’re at the middle.

The next circle is friends and family.

The next circle is online communities.

The circle after that is meetups and coffees.

The circle after that is conferences and thought leaders.

The circle after that is mentors.

The circle after that is customers and wealth-creators.

Start making your way through the circles.

**HH) What happens when I have ego about what I do?**

In 6-12 months you’ll be back at “B.”

**II) What if I’m passionate about two things? What if I can’t decide?**

Combine them and you’ll be the best in the world at the combination.

**JJ) What if I’m so excited I want to teach what I’m learning?**

Start teaching on YouTube. Start with an audience of one and see if it builds up.

**KK) What if I want to make money while I sleep?**

In year four, start outsourcing what you do.

**LL) How do I meet mentors and thought leaders?**

Once you have enough knowledge (after 100-200 books), write down 10 ideas for 20 different potential mentors.

None of them will respond. Write down 10 more ideas for 20 new mentors. Repeat every week.

Put together a newsletter for everyone who doesn’t respond. Keep repeating until someone responds. Blog about your learning efforts. Build community around you being an expert.

**MM) What if I can’t come up with ideas?**

Then keep practicing coming up with ideas. The idea muscle atrophies. You have to build it up.

It’s hard for me to touch my toes if I haven’t been doing it every day. I have to do it every day for a while before I can easily touch my toes. Don’t expect to come up with good ideas on day one.

**NN) What else should I read?**

AFTER books, read websites, forums, magazines. But most of that is garbage.

**OO) What if I do everything you say but it still doesn’t seem like it’s working?**

It will work. Just wait. Keep reinventing every day.

Don’t try and find the end of the road. You can’t see it in the fog. But you can see the next step and you _do_ know that if you take that next step eventually you get to the end of the road.

**PP) What if I get depressed?**

Sit in silence for one hour a day. You need to get back to your core.

If you think this sounds stupid then don’t do it. Stay depressed.

**QQ) What if I don’t have time to sit in silence?**

Then sit in silence for two hours a day. This is not meditation. This is just sitting.

**RR) What if I get scared?**

Sleep 8-9 hours a day and never gossip. Sleep is the No. 1 key to successful health. It’s not the only key. It’s just No. 1. Some people write to me and say, “I only need four hours of sleep” or “in my country sleeping means laziness.” Well, those people will fail and die young.

What about gossip? The brain biologically wants to have 150 friends. Then when you are with one of your friends you can gossip about any of the other 150. If you don’t have 150 friends then the brain wants to read gossip magazines until it thinks it has 150 friends.

Don’t be as stupid as your brain.

**SS) What if I keep feeling like nothing ever works out for me?**

Spend 10 minutes a day practicing gratitude. Don’t suppress the fear. Notice the anger.

But also allow yourself to be grateful for the things you do have. Anger is never inspirational but gratitude is. Gratitude is the bridge between your world and the parallel universe where all creative ideas live.

**TT) What if I have to deal with personal bullshit all the time?**

Find new people to be around.

Someone who is reinventing herself will constantly find people to try and bring her down. The brain is scared of reinvention because it might not be safe.

Biologically, the brain wants you to be safe and reinvention is a risk. So it will throw people in your path who will try to stop you.

Learn how to say “no.”

**UU) What if I’m happy at my cubicle job?**

Good luck.

**VV) Why should I trust you – you’ve failed so many times?**

Don’t trust me.

**WW) Will you be my mentor?**

You’ve just read this post.

I’ve spoken to some of the top innovators, investors and peak performers in the world…

And I’d like to share what I’ve learned, and continue to learn, for free.

Every weekday, I’ll send my latest stories, ideas and exclusive interviews straight to your inbox.

Sign up below for _Altucher Confidential_, my FREE e-letter.

By submitting your email address, you will receive a free subscription to _Altucher Confidential_. This daily investment newsletter delivers free independent financial forecasting and commentary along with carefully selected products and services that we think might interest you. We will not share your email address and you can unsubscribe at any time. [Privacy Statement](https://ads.agorafinancial.com/www/delivery/ck.php?oaparams=2__bannerid=6457__zoneid=358__cb=56d8f396a6__oadest=https%3A%2F%2Fjamesaltucher.com%2Fprivacy-policy%2F).

#PKT\_footer\_message { position: relative; margin: 16px 0px; font-size: 0.9em; } #PKT\_footer\_message .PKT\_message\_wrapper { display: block; padding-top: 17px; } #PKT\_footer\_message::before { content:""""; display: block; margin: 0px 40px; border-top: 1px solid #CCCCCC; }

**James Altucher** is a successful entrepreneur, angel investor, chess master and bestselling author of _Choose Yourself._ Learn more at [Jamesaltucher.com](https://getpocket.com/redirect?_pktpp=1&l=1549&m=1417&t=1)",null,undefined
2020-02-19T17:05:12.000Z,https://twitter.com/think_not_think/status/1230176517554147328,true,"[""best""]",tweet,think_not_think_1230176517554147328,think_not_think,twitter,null,"https://t.co/TUHGeymnkG
![](https://pbs.twimg.com/media/ERJ3BR-WsAAK43-.jpg)
",Дипмиссия Уругвая,undefined
2020-03-29T14:44:41.000Z,https://twitter.com/think_not_think/status/1244274282609414147,true,"[""best""]",tweet,think_not_think_1244274282609414147,think_not_think,twitter,null,"Через две недели в России https://t.co/UDv5kGVuBa
![](https://pbs.twimg.com/media/EUSM3KSWoAE1Fz7.jpg)
",Дипмиссия Уругвая,undefined
2020-03-07T13:59:25.000Z,https://twitter.com/thisdiegolopez/status/1236290359489114114,true,"[""best""]",tweet,thisdiegolopez_1236290359489114114,thisdiegolopez,twitter,null,"It’s been brought to my attention not every single human being has had the privilege of watching this phenomenal German commercial. It deserves a goddamn Oscar imho https://t.co/vc5SqUOPhj
![](https://pbs.twimg.com/ext_tw_video_thumb/1236290174956568576/pu/img/wNcis5xv0N_hXm4A.jpg)
",Diego Lopez,undefined
2020-03-21T01:45:49.000Z,https://twitter.com/tinch/status/1241179171696652290,true,"[""best""]",tweet,tinch_1241179171696652290,tinch,twitter,null,"If you ever wondered how a bat pees. 

You’re welcome. It’s the best quarantine content I got. https://t.co/wB5uPWnR5b
![](https://pbs.twimg.com/ext_tw_video_thumb/1241179142328123397/pu/img/QvxcNCUx_RsNY1iW.jpg)
",🆁🅴🆃,undefined
2020-02-23T00:57:46.000Z,https://twitter.com/TinyBetelgeuse/status/1231382609550331909,true,"[""best""]",tweet,TinyBetelgeuse_1231382609550331909,TinyBetelgeuse,twitter,null,"Мы с терапевтом разработали для меня черновую систему карточек-напоминалок, чтобы перечитывать их, когда мне пиздец. Запишу их сюда, а то забываю - и вдруг кому-то будет полезно.
",Киберкусь,undefined
2020-04-17T09:30:00.000Z,https://twitter.com/tproger/status/1251080460395876353,true,"[""best""]",tweet,tproger_1251080460395876353,tproger,twitter,null,"Джун - почему мой код не работает?
Мидл - почему мой код работает?
Сеньор - что это за код, и почему он мой?
",Типичный программист,undefined
2020-05-27T08:42:09.000Z,https://twitter.com/tvii/status/1265563932737048576,true,"[""best""]",tweet,tvii_1265563932737048576,tvii,twitter,null,"> [In reply to](https://twitter.com/rstacruz/status/1265485214924455936):
> IDEA: React can be used to manage server infrastructure as well. Amazon CDK already has a TypeScript API—why not make a React shim for it? https://t.co/VV0G7wurOk
> ![](https://pbs.twimg.com/media/EY_n9kDU0AA_hzu.jpg)

I'm really sorry but I must https://t.co/ByqX3gKG6a https://t.co/GOkvAB6qlu
![](https://pbs.twimg.com/media/EZAvbvqWsAAz2gi.jpg)
",𝚅 𝙻 𝙳 𝙼 𝚁,undefined
2020-03-30T09:50:04.000Z,https://twitter.com/tvoy_dead/status/1244562530422460417,true,"[""best""]",tweet,tvoy_dead_1244562530422460417,tvoy_dead,twitter,null,"https://t.co/KAHJWDdFuQ
![](https://pbs.twimg.com/media/EUWTBc5XsAECa_F.jpg)
",Viktor Zu,undefined
2020-03-15T23:17:59.000Z,https://twitter.com/userpig/status/1239330028753747969,true,"[""best""]",tweet,userpig_1239330028753747969,userpig,twitter,null,"Нйю-Йорк потихоньку уходит в режим самоизоляции. С понедельника на месяц закрывают школы. 

Соседи в честь этого готовят свое любимое традиционное блюдо — судя по запаху, варят чей-то труп в кастрюле с говном.
",Белкин,undefined
2020-04-13T08:02:17.000Z,https://twitter.com/userpig/status/1249608834508873729,true,"[""best""]",tweet,userpig_1249608834508873729,userpig,twitter,null,"> [In reply to](https://twitter.com/yayalexisgay/status/1249057146051821568):
> every single party in San Francisco👍 https://t.co/xjOEFtTAZF
> ![](https://pbs.twimg.com/ext_tw_video_thumb/1249055946799640576/pu/img/LwBu1IAvN4BnDKBu.jpg)

Я был на одной, и это на 100% передает содержание каждого ебаного разговора. https://t.co/4R4vTLwhly
",Белкин,undefined
2015-08-31T07:07:03.000Z,https://developers.google.com/web/updates/2015/08/27/using-requestidlecallback,false,"[""best""]",article,Using requestIdleCallback — Google Web Updates,null,pocket,null,"# Using requestIdleCallback

by [Paul Lewis](https://developers.google.com/web/resources/contributors/paullewis), [developers.google.com](http://developers.google.com)  
July 2, 2018

Many sites and apps have a lot of scripts to execute. Your JavaScript often needs to be run as soon as possible, but at the same time you don’t want it to get in the user’s way. If you send analytics data when the user is scrolling the page, or you append elements to the DOM while they happen to be tapping on the button, your web app can become unresponsive, resulting in a poor user experience.

The good news is that there’s now an API that can help: **`requestIdleCallback`**. In the same way that adopting `requestAnimationFrame` allowed us to schedule animations properly and maximize our chances of hitting 60fps, `requestIdleCallback` will schedule work when there is free time at the end of a frame, or when the user is inactive. This means that there’s an opportunity to do your work without getting in the user’s way. It’s available as of Chrome 47, so you can give it a whirl today by using Chrome Canary! It is an _experimental feature_, and the spec is still in flux, so things could change in the future.

## Why should I use requestIdleCallback?

Scheduling non-essential work yourself is very difficult to do. It’s impossible to figure out exactly how much frame time remains because after `requestAnimationFrame` callbacks execute there are style calculations, layout, paint, and other browser internals that need to run. A home-rolled solution can’t account for any of those. In order to be sure that a user _isn’t_ interacting in some way you would also need to attach listeners to every kind of interaction event (`scroll`, `touch`, `click`), even if you don’t need them for functionality, _just_ so that you can be absolutely sure that the user isn’t interacting. The browser, on the other hand, knows exactly how much time is available at the end of the frame, and if the user is interacting, and so through `requestIdleCallback` we gain an API that allows us to make use of any spare time in the most efficient way possible.

Let’s take a look at it in a little more detail and see how we can make use of it.

## Checking for requestIdleCallback

It’s early days for `requestIdleCallback`, so before using it you should check that it’s available for use:

```
if ('requestIdleCallback' in window) {
  // Use requestIdleCallback to schedule work.
} else {
  // Do what you’d do today.
}

```

You can also shim its behavior, which requires falling back to `setTimeout`:

```
window.requestIdleCallback =
  window.requestIdleCallback ||
  function (cb) {
    var start = Date.now();
    return setTimeout(function () {
      cb({
        didTimeout: false,
        timeRemaining: function () {
          return Math.max(0, 50 - (Date.now() - start));
        }
      });
    }, 1);
  }

window.cancelIdleCallback =
  window.cancelIdleCallback ||
  function (id) {
    clearTimeout(id);
  }

```

Using `setTimeout` isn't great because it doesn't know about idle time like `requestIdleCallback` does, but since you would call your function directly if `requestIdleCallback` wasn't available, you are no worse off shimming in this way. With the shim, should `requestIdleCallback` be available, your calls will be silently redirected, which is great.

For now, though, let’s assume that it exists.

Calling `requestIdleCallback` is very similar to `requestAnimationFrame` in that it takes a callback function as its first parameter:

```
requestIdleCallback(myNonEssentialWork);

```

When `myNonEssentialWork` is called, it will be given a `deadline` object which contains a function which returns a number indicating how much time remains for your work:

```
function myNonEssentialWork (deadline) {
  while (deadline.timeRemaining() > 0)
    doWorkIfNeeded();
}

```

The `timeRemaining` function can be called to get the latest value. When `timeRemaining()` returns zero you can schedule another `requestIdleCallback` if you still have more work to do:

```
function myNonEssentialWork (deadline) {
  while (deadline.timeRemaining() > 0 && tasks.length > 0)
    doWorkIfNeeded();

  if (tasks.length > 0)
    requestIdleCallback(myNonEssentialWork);
}

```

## Guaranteeing your function is called

What do you do if things are really busy? You might be concerned that your callback may never be called. Well, although `requestIdleCallback` resembles `requestAnimationFrame`, it also differs in that it takes an optional second parameter: an options object with **a timeout** property. This timeout, if set, gives the browser a time in milliseconds by which it must execute the callback:

```
// Wait at most two seconds before processing events.
requestIdleCallback(processPendingAnalyticsEvents, { timeout: 2000 });

```

If your callback is executed because of the timeout firing you’ll notice two things:

*   `timeRemaining()` will return zero.
*   The `didTimeout` property of the `deadline` object will be true.

If you see that the `didTimeout` is true, you will most likely just want to run the work and be done with it:

```
function myNonEssentialWork (deadline) {

  // Use any remaining time, or, if timed out, just run through the tasks.
  while ((deadline.timeRemaining() > 0 || deadline.didTimeout) &&
         tasks.length > 0)
    doWorkIfNeeded();

  if (tasks.length > 0)
    requestIdleCallback(myNonEssentialWork);
}

```

Because of the potential disruption this timeout can cause to your users (the work could cause your app to become unresponsive or janky) be cautious with setting this parameter. Where you can, let the browser decide when to call the callback.

## Using requestIdleCallback for sending analytics data

Let’s take a look using `requestIdleCallback` to send analytics data. In this case, we probably would want to track an event like -- say -- tapping on a navigation menu. However, because they normally animate onto the screen, we will want to avoid sending this event to Google Analytics immediately. We will create an array of events to send and request that they get sent at some point in the future:

```
var eventsToSend = [];

function onNavOpenClick () {

  // Animate the menu.
  menu.classList.add('open');

  // Store the event for later.
  eventsToSend.push(
    {
      category: 'button',
      action: 'click',
      label: 'nav',
      value: 'open'
    });

  schedulePendingEvents();
}

```

Now we will need to use `requestIdleCallback` to process any pending events:

```
function schedulePendingEvents() {

  // Only schedule the rIC if one has not already been set.
  if (isRequestIdleCallbackScheduled)
    return;

  isRequestIdleCallbackScheduled = true;

  if ('requestIdleCallback' in window) {
    // Wait at most two seconds before processing events.
    requestIdleCallback(processPendingAnalyticsEvents, { timeout: 2000 });
  } else {
    processPendingAnalyticsEvents();
  }
}

```

Here you can see I’ve set a timeout of 2 seconds, but this value would depend on your application. For analytics data, it makes sense that a timeout would be used to ensure data is reported in a reasonable timeframe rather than just at some point in the future.

Finally we need to write the function that `requestIdleCallback` will execute.

```
function processPendingAnalyticsEvents (deadline) {

  // Reset the boolean so future rICs can be set.
  isRequestIdleCallbackScheduled = false;

  // If there is no deadline, just run as long as necessary.
  // This will be the case if requestIdleCallback doesn’t exist.
  if (typeof deadline === 'undefined')
    deadline = { timeRemaining: function () { return Number.MAX_VALUE } };

  // Go for as long as there is time remaining and work to do.
  while (deadline.timeRemaining() > 0 && eventsToSend.length > 0) {
    var evt = eventsToSend.pop();

    ga('send', 'event',
        evt.category,
        evt.action,
        evt.label,
        evt.value);
  }

  // Check if there are more events still to send.
  if (eventsToSend.length > 0)
    schedulePendingEvents();
}

```

For this example I assumed that if `requestIdleCallback` didn’t exist that the analytics data should be sent immediately. In a production application, however, it would likely be better to delay the send with a timeout to ensure it doesn’t conflict with any interactions and cause jank.

## Using requestIdleCallback to make DOM changes

Another situation where `requestIdleCallback` can really help performance is when you have non-essential DOM changes to make, such as adding items to the end of an ever-growing, lazy-loaded list. Let’s look at how `requestIdleCallback` actually fits into a typical frame.

It’s possible that the browser will be too busy to run any callbacks in a given frame, so you shouldn’t expect that there will be _any_ free time at the end of a frame to do any more work. That makes it different to something like `setImmediate`, which _does_ run per frame.

If the callback _is_ fired at the end of the frame, it will be scheduled to go after the current frame has been committed, which means that style changes will have been applied, and, importantly, layout calculated. If we make DOM changes inside of the idle callback, those layout calculations will be invalidated. If there are any kind of layout reads in the next frame, e.g. `getBoundingClientRect`, `clientWidth`, etc, the browser will have to perform a [Forced Synchronous Layout](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid-forced-synchronous-layouts), which is a potential performance bottleneck.

Another reason not trigger DOM changes in the idle callback is that the time impact of changing the DOM is unpredictable, and as such we could easily go past the deadline the browser provided.

The best practice is to only make DOM changes inside of a `requestAnimationFrame` callback, since it is scheduled by the browser with that type of work in mind. That means that our code will need to use a document fragment, which can then be appended in the next `requestAnimationFrame` callback. If you are using a VDOM library, you would use `requestIdleCallback` to make changes, but you would _apply_ the DOM patches in the next `requestAnimationFrame` callback, not the idle callback.

So with that in mind, let’s take a look at the code:

```
function processPendingElements (deadline) {

  // If there is no deadline, just run as long as necessary.
  if (typeof deadline === 'undefined')
    deadline = { timeRemaining: function () { return Number.MAX_VALUE } };

  if (!documentFragment)
    documentFragment = document.createDocumentFragment();

  // Go for as long as there is time remaining and work to do.
  while (deadline.timeRemaining() > 0 && elementsToAdd.length > 0) {

    // Create the element.
    var elToAdd = elementsToAdd.pop();
    var el = document.createElement(elToAdd.tag);
    el.textContent = elToAdd.content;

    // Add it to the fragment.
    documentFragment.appendChild(el);

    // Don't append to the document immediately, wait for the next
    // requestAnimationFrame callback.
    scheduleVisualUpdateIfNeeded();
  }

  // Check if there are more events still to send.
  if (elementsToAdd.length > 0)
    scheduleElementCreation();
}

```

Here I create the element and use the `textContent` property to populate it, but chances are your element creation code would be more involved! After creating the element `scheduleVisualUpdateIfNeeded` is called, which will set up a single `requestAnimationFrame` callback that will, in turn, append the document fragment to the body:

```
function scheduleVisualUpdateIfNeeded() {

  if (isVisualUpdateScheduled)
    return;

  isVisualUpdateScheduled = true;

  requestAnimationFrame(appendDocumentFragment);
}

function appendDocumentFragment() {
  // Append the fragment and reset.
  document.body.appendChild(documentFragment);
  documentFragment = null;
}

```

All being well we will now see much less jank when appending items to the DOM. Excellent!

## FAQ

*   **Is there a polyfill?** Sadly not, but [there is a shim](https://gist.github.com/paullewis/55efe5d6f05434a96c36) if you want to have a transparent redirection to `setTimeout`. The reason this API exists is because it plugs a very real gap in the web platform. Inferring a lack of activity is difficult, but no JavaScript APIs exist to determine the amount of free time at the end of the frame, so at best you have to make guesses. APIs like `setTimeout`, `setInterval`, or `setImmediate` can be used to schedule work, but they are not timed to avoid user interaction in the way that `requestIdleCallback` is.
*   **What happens if I overrun the deadline?** If `timeRemaining()` returns zero, but you opt to run for longer, you can do so without fear of the browser halting your work. However, the browser gives you the deadline to try and ensure a smooth experience for your users, so unless there’s a very good reason, you should always adhere to the deadline.
*   **Is there maximum value that `timeRemaining()` will return?** Yes, it’s currently 50ms. When trying to maintain a responsive application, all responses to user interactions should be kept under 100ms. Should the user interact the 50ms window should, in most cases, allow for the idle callback to complete, and for the browser to respond to the user’s interactions. You may get multiple idle callbacks scheduled back-to-back (if the browser determines that there’s enough time to run them).
*   **Is there any kind of work I shouldn’t do in a requestIdleCallback?** Ideally the work you do should be in small chunks (microtasks) that have relatively predictable characteristics. For example, changing the DOM in particular will have unpredictable execution times, since it will trigger style calculations, layout, painting, and compositing. As such you should only make DOM changes in a `requestAnimationFrame` callback as suggested above. Another thing to be wary of is resolving (or rejecting) Promises, as the callbacks will execute immediately after the idle callback has finished, even if there is no more time remaining.
*   **Will I always get a `requestIdleCallback` at the end of a frame?** No, not always. The browser will schedule the callback whenever there is free time at the end of a frame, or in periods where the user is inactive. You shouldn’t expect the callback to be called per frame, and if you require it to run within a given timeframe you should make use of the timeout.
*   **Can I have multiple `requestIdleCallback` callbacks?** Yes, you can, very much as you can have multiple `requestAnimationFrame` callbacks. It’s worth remembering, though, that if your first callback uses up the time remaining during its callback then there will be no more time left for any other callbacks. The other callbacks will then have to wait until the browser is next idle before they can be run. Depending on the work you’re trying to get done, it may be better to have a single idle callback and divide the work in there. Alternatively you can make use of the timeout to ensure that no callbacks get starved for time.
*   **What happens if I set a new idle callback inside of another?** The new idle callback will be scheduled to run as soon as possible, starting from the _next_ frame (rather than the current one).

## Idle on!

`requestIdleCallback` is an awesome way to make sure you can run your code, but without getting in the user’s way. It's simple to use, and very flexible. It's still early days, though, and the spec isn't fully settled, so any feedback you have is welcome.

Check it out in Chrome Canary, give it a spin for your projects, and let us know how you get on!",null,undefined
2020-03-03T19:12:42.000Z,https://twitter.com/VanuaShimko/status/1234919649466355712,true,"[""best""]",tweet,VanuaShimko_1234919649466355712,VanuaShimko,twitter,null,"я программист простой

если я с чем-то не сталкивался, этого не существует
если я о чем-то не знаю, это никому не нужно
если я чего-то не понимаю, это полная ерунда
",binary lifestyle,undefined
2020-04-14T08:11:32.000Z,https://twitter.com/vas3k/status/1249973549688860673,true,"[""best""]",tweet,vas3k_1249973549688860673,vas3k,twitter,null,"Так https://t.co/NpdV5Nl1Mm
![](https://pbs.twimg.com/media/EVjMTqBWsAAJjmA.jpg)
",Вастрики,undefined
2020-02-11T11:23:42.000Z,https://twitter.com/vasilenkos/status/1227191477115199488,true,"[""best""]",tweet,vasilenkos_1227191477115199488,vasilenkos,twitter,https://twitter.com/342124158/status/1227190468666155008,"@syncromechanica На самом деле, зависит от горизонта жизненного цикла продукта и места head'а в этом жизненном цикле. 

Чем раньше человек появляется на проекте, тем больше у него свободы и больше ответственности.

Чем позже, тем выше зарплата :)
",⌊⁸⁰⌖₈₆⌉,undefined
2020-02-15T05:15:04.000Z,https://twitter.com/vasilenkos/status/1228548255174275078,true,"[""best""]",tweet,vasilenkos_1228548255174275078,vasilenkos,twitter,null,"Краткая памятка всем вошедшим в ИТ https://t.co/6tlEENkfCV
![](https://pbs.twimg.com/media/EQyuH2hWkAAVlmT.png)
",⌊⁸⁰⌖₈₆⌉,undefined
2020-03-21T20:36:00.000Z,https://twitter.com/vasilenkos/status/1241463593935220737,true,"[""best""]",tweet,vasilenkos_1241463593935220737,vasilenkos,twitter,null,"По моим наблюдениям, это вот мнение абсолютно верно описывает ментальность китайцев https://t.co/IkcRKvT9G9
![](https://pbs.twimg.com/media/ETqQi7nWkAAW1bs.png)
",⌊⁸⁰⌖₈₆⌉,undefined
2020-04-13T18:50:14.000Z,https://twitter.com/vasilenkos/status/1249771896297664513,true,"[""best""]",tweet,vasilenkos_1249771896297664513,vasilenkos,twitter,null,"> [In reply to](https://twitter.com/lyasechkina/status/1249742368804397058):
> Я в феврале: да вот переедем и захуярим за пару недель все стены в квартире, почему с ремонтом возятся месяцами, не понимаю> 
Я в апреле: а, вот почему

От создателей ""Да чего они там возятся, лошары... Мы бы такую софтину написали за пару недель..."" https://t.co/BuiPwJHRIr
",⌊⁸⁰⌖₈₆⌉,undefined
2020-05-25T08:26:38.000Z,https://twitter.com/vasilenkos/status/1264835251504906241,true,"[""best""]",tweet,vasilenkos_1264835251504906241,vasilenkos,twitter,https://twitter.com/97734647/status/1264639207097729024,"@meowthsli @thecoldwine Для разработчиков менеджер, для акул бизнеса - дельфин-гомик. https://t.co/DoCYUrZwUM
![](https://pbs.twimg.com/media/EY2Y9DRXgAUneUI.jpg)
",⌊⁸⁰⌖₈₆⌉,undefined
2020-06-04T10:42:40.000Z,https://twitter.com/vasilenkos/status/1268493367433998341,true,"[""best""]",tweet,vasilenkos_1268493367433998341,vasilenkos,twitter,https://twitter.com/97894369/status/1268487069158047744,"@webholt Есть такой замечательный документ: СВТ

Там есть замечательный и первейший показатель хорошего, годного софта: гарантии проектирования

Если есть гарантии проектирования, то и софт изящен и красив.

Правда, оценка этих самых гарантий проектирования превышает оценку разработки.
",⌊⁸⁰⌖₈₆⌉,undefined
2020-06-08T14:55:35.000Z,https://twitter.com/vasilenkos/status/1270006567631556610,true,"[""best""]",tweet,vasilenkos_1270006567631556610,vasilenkos,twitter,null,"Как всегда, о программистах без купюр. https://t.co/vwUz8bSMVx
![](https://pbs.twimg.com/media/EZ_4KI2WoAAmMzf.png)
",⌊⁸⁰⌖₈₆⌉,undefined
2020-02-16T07:28:34.000Z,https://twitter.com/vce_huevo/status/1228944240899764225,true,"[""best""]",tweet,vce_huevo_1228944240899764225,vce_huevo,twitter,null,"Я ОЧЕНЬ СИЛЬНО РЖУ С ЭТОЙ КАРТИНКИ РАСПРОСТРАНИТЕ https://t.co/ZyjDdFSchF
![](https://pbs.twimg.com/media/EQ4WQ6-XYAEjW6N.jpg)
",сардуля 🧷,undefined
2020-04-16T17:43:37.000Z,https://twitter.com/vedmich/status/1250842294393147392,true,"[""best""]",tweet,vedmich_1250842294393147392,vedmich,twitter,null,"вернимнемой2007 https://t.co/5VXvWOYcDp
![](https://pbs.twimg.com/media/EVviWX0X0AEBJ-6.png)
",Matsukaze,undefined
2020-03-14T10:29:29.000Z,https://twitter.com/verkholena/status/1238774242939985920,true,"[""best""]",tweet,verkholena_1238774242939985920,verkholena,twitter,null,"Я не могу https://t.co/pi16tyLi2P
![](https://pbs.twimg.com/media/ETECmhAWAAIRX7B.jpg)
","не могу, но придётся",undefined
2020-02-18T08:25:15.000Z,https://twitter.com/webholt/status/1229683282092183555,true,"[""best""]",tweet,webholt_1229683282092183555,webholt,twitter,https://twitter.com/97894369/status/1229675781519028225,"Классика JS-пакетов. Одни и те же баги вылезают от версии к версии. Нельзя просто обновиться до последней версии. Нужно найти конкретную, где баг чинили. Потому что в следующих версиях с достаточной вероятностью баг всплывёт снова. Забивать на тесты мы не бросим.
",Vlad :: gwer,undefined
2020-03-29T06:12:18.000Z,https://twitter.com/webholt/status/1244145340485447682,true,"[""best""]",tweet,webholt_1244145340485447682,webholt,twitter,null,"С появлением собаки дом становится какой-то армейской частью для слабоумных. Причём кто тут из нас слабоумный, понятно не до конца.
",Vlad :: gwer,undefined
2020-05-27T15:04:53.000Z,https://twitter.com/webholt/status/1265660252944547841,true,"[""best""]",tweet,webholt_1265660252944547841,webholt,twitter,null,"> [In reply to](https://twitter.com/pomidore/status/1265659582271180801):
> Добавить зависимость: пара минут> 
> 
Убрать зависимость: пара месяцев задача в бэклоге, несколько часов на работу, ревью и тестирование

Думать, прежде чем что-то делать: бесценно. https://t.co/3u7D4qxHqW
",Vlad :: gwer,undefined
2020-02-12T13:08:01.000Z,https://twitter.com/yebenya/status/1227580115762270208,true,"[""best""]",tweet,yebenya_1227580115762270208,yebenya,twitter,null,"BLOG | станция Коноша-II https://t.co/wJoCQ7IvWr
![](https://pbs.twimg.com/media/EQk9nB1XYAIGNmw.jpg)
",[эстетика ебеней],undefined
2020-03-31T20:41:08.000Z,https://twitter.com/yebenya/status/1245088762926948352,true,"[""best""]",tweet,yebenya_1245088762926948352,yebenya,twitter,null,"Ирина Токарева | Тула https://t.co/JFqgvuhIrH
![](https://pbs.twimg.com/media/EUdxoZaXYAkCHQV.jpg)
",[эстетика ебеней],undefined
2020-02-05T15:06:48.000Z,https://twitter.com/YeltsinOcelot/status/1225073292400386049,true,"[""best""]",tweet,YeltsinOcelot_1225073292400386049,YeltsinOcelot,twitter,null,"https://t.co/M2Vndmrere
![](https://pbs.twimg.com/media/EQBVqatWkAEi0-E.jpg)
",Boris Revolver,undefined
2020-02-02T23:13:23.000Z,https://twitter.com/Yoghikitt/status/1224108583274655744,true,"[""best""]",tweet,Yoghikitt_1224108583274655744,Yoghikitt,twitter,null,"От этого списка меня переполняют разного рода эмоции https://t.co/ySm2MKgqMD
![](https://pbs.twimg.com/media/EPzoRApUUAEvc55.jpg)
",Никотинка с Бровями,undefined
2020-03-02T13:56:46.000Z,https://twitter.com/Yoghikitt/status/1234477754810322945,true,"[""best""]",tweet,Yoghikitt_1234477754810322945,Yoghikitt,twitter,null,"https://t.co/W7Y2rqBsTz
![](https://pbs.twimg.com/media/ESG--R6WAAA6uhw.jpg)
",Никотинка с Бровями,undefined
2020-03-24T13:49:58.000Z,https://twitter.com/Yoghikitt/status/1242448575952494592,true,"[""best""]",tweet,Yoghikitt_1242448575952494592,Yoghikitt,twitter,null,"мы не заслуживаем польских мемов https://t.co/S9mybAguhn
![](https://pbs.twimg.com/media/ET4QVMHWsAAfdBO.jpg)
",Никотинка с Бровями,undefined
2020-05-14T10:39:30.000Z,https://twitter.com/Yoghikitt/status/1260882424927604736,true,"[""best""]",tweet,Yoghikitt_1260882424927604736,Yoghikitt,twitter,null,"Картинка может вызвать неконтролируемую волну ностальгии и слёзы https://t.co/feepTzPvQN
![](https://pbs.twimg.com/media/EX-N4SXWkAUBkJn.jpg)
",Никотинка с Бровями,undefined
2020-06-05T12:43:00.000Z,https://twitter.com/Yoghikitt/status/1268886035846639617,true,"[""best""]",tweet,Yoghikitt_1268886035846639617,Yoghikitt,twitter,null,"Совсем скоро https://t.co/Q5NDOimU6N
![](https://pbs.twimg.com/media/EZv9H0iWsAAy_Rj.jpg)
",Никотинка с Бровями,undefined
2020-03-23T00:39:43.000Z,https://twitter.com/zdongl/status/1241887312507789322,true,"[""best""]",tweet,zdongl_1241887312507789322,zdongl,twitter,null,"идеи для мужских ароматов парфюма и шампуней: 

РУБЕРОИД 

РАСПЛАВЛЕННАЯ СТАЛЬ

ГОРЯЩИЙ ТОРФ

ГРАНИТНАЯ КРОШКА 

ОПИЛКИ СЕКВОЙИ 

ДОМЕННАЯ ПЕЧЬ

КРОВЬ МЕДВЕДЯ ГРИЗЛИ

НИКЕЛЕВАЯ РУДА

ГУДРОН 

ШПАЛОПРОПИТОЧНЫЙ КРЕОЗОТ

АНТРАЦИТ 

БИТУМ

КРЕМНИЙ

ШЛАКОБЛОК

АВИАЦИОННЫЙ КЕРОСИН
",yoxter,undefined
2020-05-05T23:03:07.000Z,https://twitter.com/zloygik/status/1257808070681427975,true,"[""best""]",tweet,zloygik_1257808070681427975,zloygik,twitter,null,"В такие моменты я просто ОБОЖАЮ твиттер https://t.co/ugU7syeArF
![](https://pbs.twimg.com/media/EXShphqWoAMU5he.png)
![](https://pbs.twimg.com/media/EXShqNuXYAEPYs7.png)
![](https://pbs.twimg.com/media/EXShq9vXsAU7jsH.png)
",Злой Гик,undefined
2019-09-23T19:13:09.000Z,https://vas3k.ru/blog/go_to_berlin/,false,"[""best""]",article,"Большой пост о том, как я переезжал в Берлин",null,pocket,null,"# Большой пост о том, как я переезжал в Берлин

by [Вастрик](https://vas3k.ru), [vas3k.ru](http://vas3k.ru)  
March 19, 2019 05:00 AM

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

По итогам поста, мы запустили свой проект помощи всем переезжающим. **Если вы тоже переезжаете в Берлин и хотите сэкономить кучу денег, избежать ошибок, и побыстрее интегрироваться, пишите на [\[email protected\]](http://howtoberlin.de) с пометкой, что вы от Вастрика.** Лучший способ вложить свой релокейшен пакет, пока его не сожрали местные налоги! Сам бы такой хотел.

Каждые 154 секунды в интернете выходит статья о том, как очередной айтишник уехал куда-то за границу и теперь доябывает всех своими жизненными советами. _Это же легко_ — кукарекает он, _идешь на сайт с вакансиями, рассылаешь резюме, вращаешь деревья по скайпу, получаешь оффер — пака_.

Кодомразь никак не поймёт, что если ему повезло родиться программистом — это совершенно не значит, что теперь каждому дана такая привилегия. Мужики на угольных шахтах в Сибири, вон, рекурсии в глаза не видели, а он сидит в своём опенспейсе и размышляет почему же undefined, мать его, is not a function.

Когда-нибудь вас всех люстрируют и за джентрификацию начнут сажать. А пока начнём.

Данный пост изобилует бранными словами, иронией и постмодернизмом. Он написан в стиле «для своих» по многочисленным их просьбам, потому именно такой. Если вы беременный ребёнок или просто тупой — немедленно закройте вкладку. Я предупреждал.

## [В предыдущих сериях](https://vas3k.ru/blog/go_to_berlin/#scroll10)

Коротко о том, что я за хер. Мне 28 лет, вырос в сибирской перди, питонист, ничем не выдающийся говнокодер с октябрьского района. Не сторчаться от спайсухи в падике уже было бы отличной целью в жизни, но на меня вдруг напал кругозор.

Спустя [четыре года](https://vas3k.ru/world/what_is_lithuania/) в Литве я как-то понял, что это не моё. Что «моё» я так и не понял, но точно не это. Собрал все нажитые хахаряги и двинул в Москву (в Сибирь чот пока не хотелось), попутно продавая машину и клянча донаты в блоге, чтобы на что-то кушать.

Начал думать.

Брата в Нью-Йорке у меня нет, жены с блюкардом тоже, евреев по материнской линии тем более. Даже родиться богатым и успешным всё никак не получалось. Тотальный фейл по всем фронтам, по возможности избегайте.

Пришлось делать как все неудачники — искать работу. Правда, это только в детстве казалось, что Москва — предел твоих мечтаний, а оффер из-за границы — как минимум подарок сраной судьбы. Могучая рука визового центра указала на тебя и теперь вся жизнь станет как в том сериале из 80-х про подростков и какаин. На границе сразу выдают пятнадцатый айфон, ключи от квартиры в центре и включают «Город под подошвой».

В жизни всё оказалось совсем не так. Мой опыт показывал, что переезд — это лишь начало. Даже не первый шаг, а первый вздох в сторону чего-то, что может превратиться в интересный опыт. Сейчас же ты здесь тупо гастарбайтер. Нет, это не про каких-то там молдован, укладывающих плитку около твоего падика. Теперь это ты сам, братишка. Приветик!

## [Ехать или оставаться?  
(правда непростой вопрос)](https://vas3k.ru/blog/go_to_berlin/#scroll20)

Москва оказалась по-прежнему охуительна. Зарплаты программистов тут опять плюс-минус сравнялись с европейскими (после налогов), однако зарабатывать условные 100 золотых монет там, где в среднем люди зарабатывают 10, намного приятнее, чем получать 150, где все получают 100. Сразу становится так легко выебываться и делиться секретами успеха — а ведь именно это главное в жизни, все мы знаем.

Потому был вариант остаться, устроиться в очередной корпорат с плюшко-печеньками, через пару лет вписаться в сомнительный стартап с ребятами с пресни, увидеть первые чемоданы долларов, хату в замоскворечье, шубохранилище, омон в дверях, адвокат, суд, жена с детьми в Лондоне, пять лет, УДО, книга, фильм, блог на ютюбе... в общем, эта ветвь истории мне была примерно понятна.

Был и второй вариант — снова куда-то ехать и начинать там с нуля, пока твои ровесники тимлидами по яндексам уже давно сидят. Единственным вариантом для переезда был Берлин, потому что это самое интересное место на планете для жизни на данный момент (на мой взгляд). Тут дохера айти, но при этом всё еще дешево жить. Главное — тут есть какой-то собственный внутренний бит — ритм, которого мне всегда не хватает по жизни.

Вопрос был лишь стоит ли вообще игра свеч. Я ведь не отношусь к той категории людей, которые читают СталинГулага, обожают поныть про «рашку» на кухне и вообще легко идут по жизни. В молодости тоже был такой период, но потом мне повезло с друзьями и интеллектом, от чего мир перестал быть черно-белым и таким простым.

Решающим же аргументом для меня было то, что пожив немного за границей я понял насколько сильно был ограничен в мышлении, находясь внутри МКАДа. Что отнюдь не плохо, внутри МКАДа весьма охуенно, но мой интерес уже разыгрался и его было не остановить. Мне надо было понять как живут и работают люди, у которых нет необходимости превозмогать каждый день. Зачем они вообще что-то делают? Что ими движет?

Конечно, можно легко всё раскидать на расистских мемах про «пиндосов» и «азиатов», но это я и называю той самой ограниченностью. Когда перестаёшь быть дурачком из твиттера, мир оказывается куда сложнее.

Вот, например, как много вы знаете людей, кто могли бы без пафоса и стереотипов про «грязных папуасов» рассуждать о различиях в айти Индии и Сингапура, например?

То-то и оно. А в то же время те «грязные папуасы» запускают компании с капитализацией выше всех Яндексов и Мейл.ру вместе взятых.

Получается, для них наоборот мы — грязные папуасы. Вот это поворот.

Короче, я решил, что на данном этапе жизни мне важно всё это понять. Пусть лучше я обосрусь с этим опытом, чем буду жить без него.

# [Глава 1. Пишем невсратое резюме](https://vas3k.ru/blog/go_to_berlin/#scroll30)

Внимание детей индиго в чате! _«Я не знаю как писать резюме и не помню когда делал это в последний раз»_ — не ваш уникальный и исключительный случай, а обычное состояние любого здорового человека. Да, представьте себе, резюме надо писать максимум пару раз за жизнь и переезд в другую страну — один из них. Время выключить режим «я у мамы самый лучший» и пойти, наконец, изучить матчасть.

О составлении резюме написана тонна книг и сайтов. Большинство из них как обычно говно, но бывают и полезные. Мне вот помог [resume.io](https://resume.io) — там я стырил общий подход и нарисовал своё кастомное резюме в Google Docs.

Однако ни одна книжка почему-то не рассказывает, что вид резюме и процесс поиска работы вообще-то сильно зависят от страны. Книга от американского автора будет наполовину неприменима в Европе. Да, в Штатах свои культурные особенности и больные места. Помню, они там рекомендуют не прикладывать фото чтобы избежать угнетений, харрасмента и по возможности быть черной трансгендерной женщиной-лесбиянкой, что для Европы абсолютно нерелевантно — здесь другой культурный подтекст.

Да и вообще говорить «в Европе» тоже неправильно, тут как бы куча стран со своим культурным фоном, но я уже начал навешивать ярлыки и меня не остановить.

К счастью, резюме в России и Европе работают похожим образом. Запретных тем в них практически нет. Хорошее резюме я представляю как путеводитель по городу. То есть представьте, вы едете в новый город и впервые смотрите на его карту. Что вам важно понять там с первого взгляда? Вряд ли это будет длина центральной улицы или количество лавочек на набережной. Скорее всего вам важно быстро увидеть очертания города, основные магистрали и места типа вокзалов-аэропортов, чтобы понять что вообще здесь к чему.

Составители карт чаще всего их и выделяют. Представьте карту Москвы без садового кольца, ТТК и МКАДа — быстро ли вы сориентируетесь? Тут даже коренные затупят. Сравните:

Думаю, разница налицо.

Настолько налицо, что сейчас лишь единицы догадались, что это была карта Минска.

Вот Москва:

Так же смотрит на ваше резюме любой HR. Ему насрать с какими версиями Java и Python вы работали, он видит вас впервые и хочет скорее отобрать вас в список для тимлида или отсеять, да побежать на обед.

Тимлиду же наоборот надо призумить карту чтобы понять ваш технический бекграунд, оценить опыт на похожих позициях и просто покекать над тем, что вы в 2019 всё еще упоминаете jQuery или пошутить про «хадуп из семи залуп» на потеху команде. Рассмотреть все детали вашего города, короче.

Правда, открою секрет — никто понятия не имеет какие именно. Я всегда думал это чисто моя ошибка выжившего, но нет — все, за кем я наблюдал, просто открывали pdf'ку и штырили: _ага, пять лет говнокодил на джанге, потом два в стартапе, знает Go, ок, наверное не говноед, пообщаемся._ Крупный корпорат типа Гугла и Амазона вообще забил на отборы и тупо собеседуют всех подряд в режиме _«у тебя 18 секунд чтобы реализовать трехсвязный список... извините, вы нам не подходите»_.

Каждый раз, когда вы видите очередную статью о том, каким цветом разукрашивать заголовки и вставлять ли графику в резюме — вспоминайте о заёбанном сеньоре на том конце экрана, которому вывалили разгребать стопку вашего говна. Вот сидит он в своём душном опенспейсе и думает насколько душнее тут станет с вами или всё-таки будет о чём попиздеть.

Как только вы четко и ясно представите себя на его месте, все вопросы «а надо ли это?» отпадут сами собой.

## [Мой подход к составлению резюме](https://vas3k.ru/blog/go_to_berlin/#scroll40)

Три страницы. На первой — общая информация, та самая карта города или скиллсет вашего персонажа. Как в RPG — стамина на максимуме, такое-то оружие использую, такие-то перки имею. Оформление может быть абсолютно любым, мне чисто по вкусу пришелся подход с правым сайдбаром, но это исключительно субъективно. В следующий раз отформатирую по-другому, суть от этого не изменится. Вот примерная схема (в конце я положу весь файл, не беспокойтесь):

Вторая страница — история моего персонажа. В моем случае — где работал и где учился. В том соотношении, в котором вам важнее это показать. Например, мне не было смысла красочно расписывать, что я закончил НГТУ, потому что никто понятия не имеет что это. Однако у меня была крутая тема диплома — анализ текста для поисковых машин, потому я отдельным пунктом это упомянул. А что? Никто же не запрещает так делать.

С историей моих работ тоже было сложно. Я долго работал в одной команде, которая запустила несколько проектов. Если просто выписать их подряд, то может показаться как будто я скакал по компаниям раз в год-два, что весьма говяный знак, который замечают абсолютно все. Если же упомянуть всё как один большой проект — не понятно чем я там занимался вообще. Всем?

Способа это красиво показать я не нашел, потому решил выделить крупные проекты, а потом на интервью пояснять. Нормально, не страшно.

Третья страница — опциональная. Я называю её «доской почёта» или «проверкой на софт-скиллз». Штука, которую редко кто делает в России, но я часто встречаю в американских и европейских резюме. Сюда в свободной форме идут те вещи, которыми вы гордитесь. Публикации в популярных журналах, репозитории на гитхабе, участие в опенсорс-проектах, хоть личный блог. Да, я вставил ссылку прямо на vas3k.ru и .com, потому что нет никаких правил что надо показывать, а что нет.

Все ссылки в резюме, кстати, кликабельны прямо из PDF. Потому что в подавляющем большинстве случаев его смотрят в электронном виде. Печатают только в крайних типа он-сайт интервью (когда вас привозят прям в офис).

Ниже я положил ссылку на скачивание моего резюме, как и обещал:

**upd:** как можно заметить, резюме тут больше нет. Мне стали поступать жалобы от тимлидов и HR'ов, что им начали приносить копии этого резюме пачками после выхода поста. О последствиях, плюсах и минусах такого расклада мне думать лень, потому я просто удалил его.

# [Глава 2. Врываемся на рынок труда](https://vas3k.ru/blog/go_to_berlin/#scroll50)

В России айтишники разбалованные и привыкшие, что рекрутеры сами приползают к ним с дарами и офферами по 350К за одну лишь строченьку их живительного говнокода. Дефицит на рынке, ничего с этим не поделаешь, наслаждайтесь привилегиями.

Хорошая новость — в Европе всё почти так же. Стоило мне сменить место жительства в линкедине на Берлин — каждую неделю по одному-два рекрутера в личке даже при том, что у меня явно отмечено «НЕ ищу работу».

Плохая новость — это не работает, когда ты только переезжаешь. Даже в такой генетической мясорубке как Берлин, кодобоярам «снаружи» видно лишь 5% вакансий и, естественно, на каждую очередь со всей восточной Европы. Пассивно сидеть и ждать офферов — это как прийти в поликлинику и ждать в коридоре когда же мимо пройдёт доктор и вас полечит.

Цифра 5% — чисто личное ощущение, никаких доказательств ей не будет. Сравниваю то, что мне было видно из интернета в Москве, и что вижу сейчас. Многие местные стартапы даже не размещают вакансии на публичных сайтах. Я видел бумажку «ищем программистов на Go» тупо на окне офиса на первом этаже. Через неделю её уже не было. Думаю, масштаб конкуренции понятен.

Плюс, хорошо быть человеком, которому насрать где работать, лишь бы был поток дойчмарок на карту. Я же так не могу. Мне почему-то важно заниматься чем-то осмысленным, а таким придирчивым всегда сложнее, особенно в айти. Пришлось искать чтобы и галера повеселее, и весло давали выбрать, да еще и стабильность была. Мало же кому хочется через полгода снова искать работу с горящей жопой потому что фаундера твоего блокчейн-стартапа принял ОМОН на границе Чехословакии (тру-стори).

## [Где и как искал работу?](https://vas3k.ru/blog/go_to_berlin/#scroll60)

Любой дурак бы сразу просто загуглился на всех языках, что я и сделал. Как выяснилось, только одна из ста статей о переезде написана не сумасшедшим психопатом, потому важно понять общую картину и не поехать кукухой самому. Но даже это не самое страшное. Вот что нужно всегда помнить:

> Никогда и ни за какие деньги не читайте форумы и группы мигрантов. Они наносят необратимые повреждения головного мозга.

Если коротко, то в каждой стране есть такие места, куда эйчары приносят свежую еду. Места эти разнятся не только по странам, но и по направлениям. В России, например, модный стартап не понесёт вакансию рокстар-фронтендера в газету «Аргументы и Факты», он скорее запостит её на МойКруг. В прибалтике, помню, было тотальное господство LinkedIn — абсолютно все, кто старше 20, сидели в нём, активно нетворкались и даже писали друг другу отзывы. Добавить друг друга на LinkedIn было традиционным финалом любого знакомства.

Ниже приведу топ-три места для Германии.

### [1 место. Агрегаторы:](https://vas3k.ru/blog/go_to_berlin/#scroll70) [GlassDoor](https://www.glassdoor.com/), [RelocateMe](https://relocateme.eu), [BerlinStartupJobs](https://berlinstartupjobs.com) и.т.д.

Самый рабочий и популярный вариант. Там не надо заводить никаких страничек, просто выбираешь в фильтрах нужные баззворды и раскидываешь резюмешки через формочку напрямую.

**Плюсы:** огромная база вакансий, возможность подписаться на ежедневные апдейты и пассивно мониторить, большинство вакансий именно с релокейтом (по крайней мере в Берлине).

**Минусы:** большая часть вакансий — средний и крупный корпорат. Стартапов либо просто мало, либо они тонут рядом с тем же Амазоном, пылесосящим рынок по 100 вакансий в день.

### [2 место. Сайты компаний](https://vas3k.ru/blog/go_to_berlin/#scroll80)

Плясать не от вакансий, а от компаний, оказалось даже вполне неплохим вариантом. Я нагуглил несколько самых модных хипстерских компаний в Берлине (например GoEuro, N26 и Soundcloud), отскроллил в самый низ главной страницы их сайтов в раздел «Jobs» и вуаля — смотри, кто нужен, и подавайся напрямую. Отвечают там практически всегда.

### [3 место. Социалки: LinkedIn, Xing, группы в Facebook](https://vas3k.ru/blog/go_to_berlin/#scroll90)

В LinkedIn есть один неприятный момент — там есть функция «ищу работу в...» чтобы, как задумывалось, появляться в выдаче рекрутерам из указанного города. Так вот она нихрена не работает. Нужно именно менять свой текущий город в профиле, только тогда вас найдут и заметят. Я этого не знал, из-за чего дико протупил.

Xing — это немецкий клон LinkedIn. Я так и не понял почему во всех гайдах по переезду в Германию рекомендуют завести там страницу, мне она вообше никак не помогла. За полгода существования моего профиля в личку написало два каких-то левых индуса с предложением переехать в Бангалор. Даже на LinkedIn за то же время были десятки релевантных предложений.

Facebook же оказался интересным лайфхаком во всей этой истории. В нём есть группы типа «IT Jobs in Berlin», где каждый день настоящие живые люди постят вакансии из своих и чужих компаний. Иногда даже раньше, чем они появляются на остальных сайтах, а иногда даже податься можно напрямую через чувака. Так они гонятся за реферальным бонусом. Ссылок давать не буду, сами найдёте в поиске.

## [Чит-коды на найм  
Рекомендации, митапы и HR-туризм](https://vas3k.ru/blog/go_to_berlin/#scroll100)

Три читерских варианта для самых хитрожопых.

**Первый — рекомендации.** Самый эффективный вариант, проверено неоднократно. Проще всего когда вас рекомендуют друзья в компанию где они работают. Обычно это в их же интересах — за хорошего приглашенного разраба им заплатят €2000-5000 бонуса в зависимости от компании (ловите лайфхак как заработать).

Если нет друзей, можно найти их на LinkedIn. Через профиль компании выходите на любого гребца и натурально пишете ему _«эй, видел у вас открыта вакансия, можешь меня порекомендовать?»_. Часто ему только в радость — один клик на «approve» может принести немало дойчмарок. За честностью рекомендаций всё равно никто не следит (ни разу не видел прецедентов).

> Рекомендации правда работают хотя бы потому что во многих компаниях HR'ы сортируют вас наверх списка в своих CRM'ках

**Второй лайфхак — митапы.** Умные ребятишки ездят в Европу не только за хамоном, но и чтобы сходить на митапчик по чем вы там занимаетесь и заобщаться. [Meetup.com](https://meetup.com) в помощь. Даже если не получится заобщаться, хотя бы пиццу нахаляву пожрёте.

Фишка митапов в том, что это самый лёгкий в мире способ залететь захайриться. Даже самый последний интроверт вряд ли уйдёт с митапа ни с кем не пообщавшись. Если же полезные связи не липнут к вам сами, воспользуйтесь советом из статьи «[Рефералочка](https://teletype.in/@your_soft_skillzz/BkpggTfJV)» — подойдите к любому гику и начните с:

> — О, ты работаешь в %companyname%, чем там занимаешься?

Дальнейший нетворкинг гарантирован.

**Третий — HR-туризм.** Тут скорее не про хайринг, а про поездить по странам бесплатно. Просто подаёте резюме в Facebook, Google, Amazon и другие мега-корпораты, и вас приглашают в офис где-нибудь в Лондоне или Цюрихе, оформляя всё — билеты, визы, проживание. Лайфхак. Дарю.

## [Авто-скрининг и другие городские легенды](https://vas3k.ru/blog/go_to_berlin/#scroll110)

Чем больше постов о переездах читаю — тем больше ржу как же там обожают обмазываться городскими легендами. Взять тот же «скрининг резюме». Якобы HR'ов в Европе не существует и отбором резюме занимаются роботы, которые парсят исключительно .doc-файлы, а ваш новомодный PDF они не поймут. Есть целые статьи, где авторы не рекомендуют брать текст в рамки и использовать исключительно Word 97.

Такое вот говно в головах появляется очень просто: кто-то однажды устраивался в гипер-всратый-мега-корпорат, коих в Германии навалом, попал на такой эксперимент, поныл об этом на форуме Винского, а двадцать копирайтеров перепечатало его в своих «улитимативных гайдах по переезду». Миллион человек прочитало — вуяла, куча обезьянок готово с пеной у рта доказывать, что _сами видели буквально вчера робот избил человека за цветную полоску в резюме_.

Хочется теперь самому запустить какую-нибудь такую дичь в интернет. Как-нибудь попробую.

Короче, ребят, никаких секретных тактик тут нет. Никаких роботов, нейросетей и рептилоидов, читающих ваше резюме. Есть лишь человеческая лень и глупость — и ваша задача делать всё возможное на каждом этапе, чтобы скучающему хомо-сапиенсику на том конце провода была максимально просто и удобно. Хотя бы чтобы он не искал ваш телефон в истории переписки и не вспоминал как вас зовут.

> Главная секретная тактика: не быть долбоебом

Смело её придерживайтесь.

## [Cover Letter. ШТО?](https://vas3k.ru/blog/go_to_berlin/#scroll120)

Тоже вызывает много вопросов, хотя по факту это просто текст, который пишешь в письме (или форме) когда посылаешь резюме. Может где-то и есть ГОСТы по этому поводу, но точно не в айти. Никогда не пытайтесь гуглить «как составить cover letter» — это серая зона интернета, свободная от здравого смысла.

Просто напишите абзац о себе, жопа не отвалится. Всё равно ведь надо что-то написать в теле письма. Только не надо продающих текстов «наймите меня прямо сейчас я увеличу вашу конверсию на 3% в следующем месяце». Будьте проще — _здравствуйте, меня зовут Олег Петрович, я пишу на Go последние 30 лет, раньше работал в Гугле. Меня заинтересовала ваша вакансия лид-го-девелопера, вот мое резюме и способы со мной связаться_.

Всё. Вопрос закрыт.

Через два-три дня, если нет ответа, пишите follow up чтобы напомнить о себе. Это нормальная практика, здесь так делают вообще все.

На самом деле всем насрать что там написано. Ваше письмо читает лишь первая линия HR'ов, после чего всё заносится во внутреннюю CRM'ку или Excel для дальнейшей обработки. Вы же сами пишете эти CRM'ки, так что прекрасно понимаете какая информация в письме облегчит бедному HR'у жизнь, а какая затруднит.

# [Глава 3. Собеседования](https://vas3k.ru/blog/go_to_berlin/#scroll130)

Дня через три после рассылки первых резюме начинают приходить ответы. Мне ответила примерно половина из тех, кому я отослал, так что популярный миф про _«1% везунчиков, которые пробиваются до живого человека»_ тут снова не сработал. Но я и подавался очень выборочно — всего на десять действительно интересных вакансий, откуда и ожидал получить примерно пять ответов. Знаю истории, когда люди рассылали сотню резюме наобум и получали те же самые пять ответов. Каждому своё.

Отказы пишут редко — чаще всего просто игнорируют, если сразу не подходишь или сами проебланили и не закрыли вакансию. Если же галера чем-то сильно вас штырит — смело пишите follow up.

## [Самая больная тема — английский язык](https://vas3k.ru/blog/go_to_berlin/#scroll140)

В России действительно очень-очень-очень сложно хорошо знать английский. По банальной причине — его абсолютно негде практиковать. Иностранцы не приезжают из-за жесткости с визами и повсеместного заблуждения, что тут опасно, а нам самим практиковать его не с кем — у нас же не Евросоюз, где хочешь не хочешь, а с детства растёшь билингвом чтобы хоть как-то общаться с соседями. Все наши соседние страны тоже говорят по-русски!

Такая же проблема была и у меня. Я учил английский в школе как все — то есть никак. Благодаря многолетнему просмотру сериалов, подкастов, стендаперов и Late Night Show мой уровень болтался около B2-С1, но даже сейчас, спустя всего полгода работы в среде, я понимаю насколько это был нелепый лет-ми-спик-фром-май-харт без знания простейших разговорных оборотов.

Выход здесь один — забить и не париться. Вспомнить, что официальный язык Европы — хуевый английский, и переть напролом к цели. Всё.

## [Пять этапов хорошего собеседования](https://vas3k.ru/blog/go_to_berlin/#scroll150)

То, чего стоит ожидать. Как я понимаю, сейчас это best practices найма в европейское айти и я, в принципе, их даже разделяю. Некоторые этапы могут отсутствовать, меняться или объединяться — но чаще от этого получается говно.

### [1️⃣ Знакомство (30 мин)](https://vas3k.ru/blog/go_to_berlin/#scroll160)

Проводится с HR'ом, а точнее с новомодной его версией под названием Talent Acquisition Specialist. Сейчас так называют тех, кто нанимает новых людей, пока сами HR'ы отвечают только за работников внутри компании. Но суть не поменялась — это человек, который ведёт вас по всему процессу найма и он хочет с вами познакомиться.

Первое интервью — неформальное и нетехническое. Весёлый мальчик или девочка рассказывает вам какая у них в компании _атмосфера стартапа_ (ага, в опенспейсе на 5000 человек), про бесплатное пиво по пятницам (ага, раньше-то было каждый день, но сейчас закрутили гайки), про _«интересные инженерные задачи»_ (border-left: 1px solid — для этого же нужен как минимум диплом магистра, у вас он есть?)

Здесь же впервые звучит фраза, вызывающая трепет у всех — **«Tell me about yourself»**. Прекрасный и универсальный вопрос, который даёт вам обоим повод начать обоюдно интересный разговор на любую тему. Но почему-то все от неё дико ссутся и обсуждают тредами по пятьсот комментов на хабре.

Тел-ми-эбаут-ёселф встречался мне абсолютно на всех собеседованиях, хоть и в разных его формах. Было ожидаемо, потому я заранее написал себе план ответа в заметках. Сначала хотел накатать и выучить текст целиком (ссыкатно, английские же), но потом понял, что у меня никогда не получалось запоминать тексты, а с планом было как-то проще и свободнее.

Моя универсальная схема ответа выглядит так:

Этот же план пригодится и на техническом интервью. Там надо будет больше наваливать о технологиях, но обычно это намного проще.

Завалить интервью-знакомство почти невозможно, но у меня однажды получилось и было смешно. Мы с тем HR'ом разговорились как старые друзья в баре, попрощались чуть ли не обнимаясь, а через час пришел ответ «извините, вы нам не подходите». Надо было видеть моё лицо тогда — смесь ШТО и АХАХ.

Цель этого цирка для компании — понять, что вы вообще живой человек, умеющий разговаривать и узнать чего вы хотите (зарплату, релокейт, дату выхода). Для вас — выяснить всё о вакансии, потому что крайне часто бывает, что в вакансии ищут «нинзя-сеньор-рокстар-девелопера», а команда на самом деле пилит сраную админку для внутреннего блога компании или подобную скучнейшую дичь.

### [2️⃣ Техническое интервью (1-2 часа)](https://vas3k.ru/blog/go_to_berlin/#scroll170)

В нормальных компаниях оно проводится с тимлидом (иногда еще и продакт-менеджером) команды. В таком случае всё легко — вы просто еще раз знакомитесь, трёте шутейки о прошлых технологиях, решаете пару задачек, с которыми недавно столкнулась команда — _«вот представь у тебя есть это, как бы ты реализовал то-то»_, получаете тестовое задание и расходитесь с хорошим настроением.

Такой вариант самый здоровый по всем параметрам, но мне он встретился всего лишь в 30% интервью. В основном встречаются два других.

**Первый: программист-за-пятьдесят.** Обычно такой же мигрант, как и ты (немец к его годам бы уже дослужился до директора). Он пришёл унижать тебя, как препод в универе. С порога заставляет вращать деревья и вспоминать наизусть алгоритмы сортировки. Ждёт когда ты запнёшься, чтобы ГЛУБОКО ПОВЗДЫХАТЬ. Наверняка у него еще и твиттер есть, где он тысячник и ноет про «молодежь уже не та».

Я уже рассказывал как мне попался русскоговорящий (!) дед, который начал спрашивать меня про разницу в компиляторах С++ только потому что я упомянул передачу данных по указателю. Нет, я не против пообсуждать undefined behaviour как в старые добрые, но это точно вакансия питон-разработчика? Это было моё первое интервью, когда я сам сказал, что передумал с вами работать, сорян, до свидания.

**Второй: всратый корпорат, который пылесосит рынок и собеседует всех подряд.** Обычно на техническое интервью выделяют самого крайнего мальчика-интроверта с ужаснейшим акцентом и дают ограничение по времени. Не уложился — до свидания. Причем не уложиться можешь не только ты, но и сам мальчик-интроверт.

Так я собеседовался в Amazon, где чувак стал давать мне решать задачки на время, что называется, «на доске», а потом сказал _«ой, чот я отвлёкся и не понял твоё решение, но у меня через минуту уже следующее интервью, у тебя ОСТАЛИСЬ КАКИЕ-ТО ЕЩЕ ВОПРОСЫ?»_. Ахаха. Остался, но только один! Догадаешься какой?

В остальном же именно техническое интервью — половина успеха. Валят чаще всего именно его. И чаще даже не по техническим скиллам, а из-за таких вот патологических несовместимостей с командой как в историях выше. Абсолютно нормальная история, я бы вот точно не хотел бы с такими работать.

### [3️⃣ Тестовое задание или лайв-кодинг (1-4 часа)](https://vas3k.ru/blog/go_to_berlin/#scroll180)

Проверка вашей способности программировать всегда присутствует всегда в том или ином виде. Мне встретилось три варианта реализации:

**Тесты, запиханный прям в интервью.** Самый унизительный вариант. По ходу разговора тебе дают задачки, которые ты должен решить в коде прямо сейчас. Унизительные они потому что интервьюер тупо прочитал их решение в книжке и сидит скучает, а ты должен рожать и отсекать свои тупые варианты прямо на ходу.

Высший пилотаж — использовать какой-нить ебучий сервис для лайв-кодинга в браузере, где нет ни подсветки, ни автокомплита, нихрена. Особенно весело выглядит программирование на питоне, ведь там надо считать как идиот пробелы в начале каждой строки :D

Такой метод используют все крупные конторы типа Амазона и Гугла, потому что им насрать кого собеседовать — хоть Линуса Торвальдса, хоть гуся. Им в общем-то на всё насрать — не расслышал задачу, которую араб с ужаснейшим английским пытался тебе зачитать сидя в шумном опенспейсе — идёшь нахуй, за тобой уже очередь.

**Тестовое задание.** Простенькая задачка, где надо часок попрограммировать самому и прислать результат. Вот реальный пример из одного собеседования в один поисковый агрегатор — реализовать [алгоритм flood fill](https://en.wikipedia.org/wiki/Flood_fill) на двумерном массиве двумя способами и объяснить почему выбрал именно такие. Офигенное, как мне кажется, задание. Двадцать строк кода максимум, зато сразу и код можно оценить и логику мыслей (какой алгоритм выбрал). Делал и отправлял такие не вставая утром с дивана, отказа по итогам ни разу не получил.

Считаю адекватные тестовые задания, которые можно накидать максимум за час-два на коленке — хорошей практикой при найме. Бывали даже моменты, когда тестовое давали еще до технического интервью, чтобы потом разобрать решение вместе. Тоже норм.

**Лайв-кодинг.** Я хоть и люблю тестовые задания, но сейчас в мире тренд наоборот на ненависть к ним. Программисты ведь не хотят тратить своё драгоценное время на какую-то фигню типа программирования, когда еще столько мемов в интернете не смотрено!

Хипстерские компании и стартапы стали придумывать альтернативы — предлагают либо заняться парным программированием и решить реальную задачу, либо взять таску из жиры и тоже вместе её разобрать.

Лично для меня это всё немного дичь — обмазываться чужими костылями, пытаясь там что-то разобрать за полчаса в проекте, который первый раз вижу, и не выглядеть при этом двоечником у доски.

Но в реальности всё зависит от интервьюера. Обычно всё проще, чем кажется.

### [4️⃣ Culture-fit интервью с кем-то из взрослых (20-30 мин)](https://vas3k.ru/blog/go_to_berlin/#scroll190)

Либо с Head of Department, либо Director of Engineering, либо вообще CTO, в зависимости от размера компании. Человек, кому непосредственно подчиняется тот тимлид из второго этапа. Попадание сюда автоматически означает, что вы получили пальцы вверх от HR и тимлида, ведь тратить время уважаемых людей на глупых новичков никто не будет.

Самое криповое интервью, ведь по сути его цель в том, чтобы не вас проверить, а убедиться, что тот самый тимлид не набрал идиотов в команду по своему вкусу. Умными словами это называют а-ля «соответствие корпоративному духу» или типа того.

Обычно здесь снова звучит наш любимый «tell me about yourself», но теперь уже в более возвышенном ключе — типа «tell me what inspires you in work and life». Иногда бывают и правда прикольные вопросы, над которыми хочется поразмышлять за бокалом вина, а иногда опять заставляют поджигать веревочки из книжки про гору Фудзи.

Завалить этот этап технически можно, но я ни разу не видел чтобы простые кодомрази его проваливали. Тут надо уметь хотя бы два слова связать, а большего от кодеров не ждут. Другое дело лиды, продакты и остальной менеджмент — вот их реально обсуждают и оценивают после этого. Но они и сами представляют как это происходит.

### [5️⃣ Заключительное интервью 🎉](https://vas3k.ru/blog/go_to_berlin/#scroll200)

Обычно вам звонит HR и зачитывает оффер. Поздравляю, вы великолепны. Обычно после этого дают две недели чтобы его принять и подписать контракт, либо отклонить и попрощаться. Говорят, в последнем случае часто прилетает контр-оффер с зарплатой и бонусами выше чем у конкурента, но для этого надо быть умненьким, а я не такой. Все остальные компании, в которые я собеседовался в тот момент, казались мне более всратыми.

Весь процесс от первого гугления до получения оффера занял месяц. Это в режиме «уделять этому минимум полдня в день» — как part-time job, короче.

# [Глава 4. Оффер, консульство и демо-версия бюрократии](https://vas3k.ru/blog/go_to_berlin/#scroll210)

Контракты все подписываются в электронном виде. Оказывается, у Adobe даже есть сервис для этого, выступающий посредником между сторонами и удаляющий файл если кто-то его не подписал. Некоторые даже им пользуются, но в моём случае хватило банальной подписи из Preview.app. Надеюсь, никому не надо объяснять как просканировать свою подпись в векторе и вставлять её в PDF в два клика?

Дополнительно мой контракт еще и прислали по почте в Москву _«с настоящей подписью чтобы у вас не было проблем в консульстве»_. DHL доставил его за два дня из Берлина, я даже не успел спросить «но зачем?»

Контракт дали, дальше крутись как хочешь. Не поможет даже предоставленное от компании Relocation Agency, они не хотят заморачиваться ни с чем за пределами Германии примерно никогда.

## [Сбор документов](https://vas3k.ru/blog/go_to_berlin/#scroll220)

С консульством на самом деле просто — есть четкий список документов, который легко гуглится на сайте консульства. В любой момент можно позвонить им по телефону (в часы приёма) и спросить любой глупый вопрос — они с удовольствием отвечают и помогают.

Главное, опять же, не читать разноебучие сайты и форумы в интернете. Еще и потому что правила оформления для Украины, Беларуси и России, например, абсолютно разные, из-за чего постоянно случается путаница.

Из самого сложного и дорогого — нотариально заверенный перевод дипломов. Тем более у меня их два, яж магистр. В Москве на это ушло 12 тысяч рублей. Плюс перевод свидетельства о браке с апостилем. Апостиль делается за пять минут по записи на Госуслугах, перевод в любом бюро за косарь, но везде надо побегать. Я не считал точно сколько ушло на двоих человек по баблу на подготовку документов, но примерно тысяч 20-25 рублей. Можно сохранить все чеки и потом вернуть из релокейшен-пакета, но я тогда еще не был настолько, как говорил Оксимирон, онемеченным, чтобы чеки собирать.

> Стопочка необходимых документов, чтобы завести трактор в Германию. Она же открытка всем, кому «диплом нинужин» [pic.twitter.com/IF9WDv5zlD](https://t.co/IF9WDv5zlD)
> 
> — Вастрики (@vas3k) [August 6, 2018](https://twitter.com/vas3k/status/1026492150777827330?ref_src=twsrc%5Etfw)

  

## [Консульство](https://vas3k.ru/blog/go_to_berlin/#scroll230)

Первое, что нужно сделать после получения оффера — не открыть шампанское, а пойти на сайт консульства и записаться на приём. В моем случае было лето, консульства все отдыхают, и ближайшая запись в Москве была только через ТРИ сраных месяца. Был конец июня, а запись на сентябрь — это даже позже, чем я должен бы был выйти на работу.

На самом деле это не страшно и немецкие компании прям без проблем ждут хоть полгода. Они так вообще привыкли. Но тогда-то я этого не знал и дико ссался.

Выход пришёл внезапно — в августе мне надо было ехать в Новосибирск на свадьбу лучшего друга, а там, хммм, там же тоже есть консульство Германии. По-моему единственное, которое там вообще есть. Открыл сайт новосибирского консульства и вуаля, есть окно на конец августа. Через два дня после свадьбы. Офигенно!

Так мы подавались в Новосибирске. Особенно странно было Лене, которая до этого была в Сибири лишь раз.

## [Виза](https://vas3k.ru/blog/go_to_berlin/#scroll240)

Вы когда-нибудь оформляли шенгенскую визу? Так вот получить национальную/блюкард даже проще, чем поехать в Испанию за хамоном по шенгену. В моём случае её сделали за ТРИ дня. Удивительная херня.

Новосибирское консульство настолько милое и по-провинциальному простое, что нам даже сказали «ну вы полчасика погуляйте, а потом еще разок зайдите, вдруг у консула будут вопросики, мы их сразу порешаем, но скорее всего нет, удачи».

Визу дали сразу на полгода. Ничем от шенгена не отличается, только категория другая.

Билет Новосибирск-Москва-Берлин был куплен незамедлительно.

# [Глава 5. Переезд и первые дни](https://vas3k.ru/blog/go_to_berlin/#scroll250)

Здесь все сразу присылают ссылку на знаменитый [ru-de faq](https://github.com/ru-de/faq) на гитхабе, но я вас умоляю, перестаньте это делать. Он поверхностный и устаревший настолько, что я думал это шутка такая. Не знаю для кого он годится — новичок не поймёт что делать, а проживший здесь хотя бы полгода всё это уже знает.

От себя рекомендую два FAQ'а на английском: [Awesome Berlin](https://marlonbernardes.github.io/awesome-berlin/en/#awesome-berlin) (я действовал по нему) и [All About Berlin](https://allaboutberlin.com/guides) (там чуть меньше для переезжающих, зато больше для живущих). Они должны ответить на все ваши вопросы, а я дальше не буду разбирать конкретные вопросы и расскажу только свой опыт.

> Главное — никогда не вступать в группы русских мигрантов на фейсбуке

Вступайте в общие, англоговорящие, какие угодно, но только не в эти.

Вообще, о подробностях переезда я достаточно много рассказывал в [Итогах Года 2018](https://vas3k.ru/blog/2018/) и в рассылках, тут не буду повторяться.

## [Да, вам нужна временная квартира](https://vas3k.ru/blog/go_to_berlin/#scroll260)

Самая первая и главная забота до переезда — найти квартиру, в которой вы проживёте первые 2-3 месяца пока не найдёте постоянную. Бывает и до полугода, кому как. Об этом тысячу раз написано, такой вот рынок, надо это принять. Иногда проблема решается корпоративной хатой или когда компания вообще оплачивает вам отель на пару месяцев, но мне так не повезло — мой корпорат не настолько еще корпоративный.

Моя контора предоставляла лишь Relocation Agency, работники которого просто спрашивали «сколько вас и каков ваш бюджет?» и присылали три верхних варианта из выдачи на популярном сайте поиска временного жилья ([HomeLike](https://www.thehomelike.com), [Wunderflats](https://wunderflats.com/en/), итд).

Варианты были все ужасными и дорогими.

Во-первых, в агентстве оказались те еще распиздяи, которые сначала месяц тянут вола за яйца, а потом пишут письма, мол, _ну вы же понимаете, не так много времени осталось, у вас нет выбора_ и льют другое душное говно тебе в уши.

Во-вторых, потому что в Германии все по-умолчанию уверены, что на двоих нужна квартира минимум 70-100 кв.м — на меньшей площади вдвоем уместиться физически невозможно! Убедить их в том, что для временной коробки нам хватит и 30-40, оказалось непросто.

Потому за неделю до вылета пришлось взять всё на себя и сначала просто кидать девочке собственные варианты, а потом сказать так, забей, я сам всё найду, только не лезь, вот ваши 300 евро за эту охуительную услугу, спасибо.

Временная хата может выглядеть как-то так (реальное фото, что мне скидывали)

А может и так, не сильно отличаясь по цене (в подобной мы и жили первые месяцы)

## [Перелёт и вещи](https://vas3k.ru/blog/go_to_berlin/#scroll270)

Я не диджитал номад, но фуру говна за собой тоже не вожу. Уезжая из Литвы мы выбросили примерно два контейнера вещей. Сейчас даже не вспомню что там было, а значит и правильно, что выбросил. Однако, мы оставили целый ящик стаффа у друзей, чтобы они выслали нам его в Германию по приезду. Помню как старательно отбирал туда только самое необходимое и даже заплатил €50 за пересылку.

Через полгода получил его, открыл и думаю — мде. Ну и нахрена мне всё это? Только проебал нервы и евры. Хотите так же — обязательно пакуйте всё, что кажется необходимым!

Весь мой гардероб обычно умещается в небольшой чемодан, а из гаджетов я вез с собой только ноутбук, камеру Nikon D750 с объективами, Apple TV и роутер — старенький AirPort Extreme.

Таков мой джентельменский набор для безусловного выживания в любом новом месте.

Ровно за вечер до вылета выяснилось, что за дополнительное место багажа Аэрофлот хочет аж 100 евро, по случаю чего была активирована SMEKALOCHKA. Буквально за ночь до вылета найден максимальных размеров чемодан у китайцев в интернет-магазине за 3000 рублей и БЕЗМЕН (дорогие москвичи, оказалось, не знают этого слова) еще за 250, чтобы упаковать и взвесить всё с точностью до ста грамм.

Курьер на моднейшей вишнёвой девяточке доставил чемодан прямо утром следующего дня, а Аэрофлот был технично послан нахуй, ведь по габаритам я проходил вплоть до сантиметра, а по весу до ста грамм погрешности. БЕЗМЕН ЗАРЕШАЛ.

## [Стартер-пак](https://vas3k.ru/blog/go_to_berlin/#scroll280)

Всё почти как на картинке выше. На самом деле твой стартер пак в Берлине — **симка, прописка, Tax ID, банковская карта и проездной**.

Проездной здесь есть почти у всех, ведь берлинская транспортная система одна из самых охуительных в мире. Кто-то даже травил мне байку, что современный «Московский Транспорт» во многом копировали именно с BVG. Очень уж много пересечений, вплоть до стиля SMM. Только в Берлине он уже 20 лет так работает, немцы не любят менять пока не сломано, то приезжающему московскому хипстеру он кажется всратым и отсталым.

Что Московский Транспорт не слизал — работу 24 часа в сутки и фичу, когда ты можешь провозить одного пьяного друга по своему проездному вечером или в выходные. Топовая тема.

Банк я выбрал N26 — это местный Рокетбанк, то есть говно для хипстеров. По интерфейсам и функциям в нём нет и десятой доли того, что есть в том же Тинькове, зато есть модная прозрачная карта и оформление полностью онлайн. А о безопасности позаботится законодательство и ЦБ.

Прописка — это не как в России, когда УФМС в жопу ебет. В Европе прописка это уведомление о своем месте жительства, чтобы госконторы знали куда тебе штрафы и счета присылать. Делается за пять минут в ближайшем ЖЭУ.

Из смешных плюшек прописки — иногда здесь устраивают дни бесплатных посещений музеев или поездок на транспорте для «местных жителей», что определяется именно по её наличию.

Примерно так выглядел мой список «первых и самых необходимых» дел после переезда. Когда первый раз видишь, всё это кажется диким пиздецом, но на деле всё это просто и делается лишь раз в жизни.

## [«Жена блюкардочника»](https://vas3k.ru/blog/go_to_berlin/#scroll290)

Через два-три месяца вам выдают кусок пластика — Блюкард на 4 года. Вашей жене идёт утешительный приз — наклейка в паспорт. По-началу кажется обидно, но потом выясняется, что у неё с этой наклейкой даже больше привилегий, чем у тебя самого. Так появился мем — жена блюкардочника.

*   Жена блюкардочника имеет право на бесплатные курсы немецкого (а ты нет).
*   Жена блюкардочника может работать без ограничений и заниматься чем угодно в Германии (а ты только по профессии).
*   У жены блюкардочника нет ограничений по сроку пребывания (он привязан к твоему и ты должен его продлевать).
*   Жена блюкардочника автоматом получает такую же крутую медстраховку, как у мужа и вообще наследует все его привилегии.

Короче, патриархат снова соснул.

  

# [Глава 6. Поиск жилья](https://vas3k.ru/blog/go_to_berlin/#scroll300)

Примерно спустя неделю-две, когда основные квесты решены и твоя жопа уже не так горит от _«надо сходить AMT получить BLATT»_, можно брать свой первый локальный эпик — поиски постоянной квартиры. Как сказал один из моих коллег:

> Найти жильё в Берлине примерно раз в десять сложнее, чем найти работу и переехать

Не буду здесь опять рассказывать о дисбалансе рынка, перевесе спроса и что 80% жилья здесь арендованное. Всё это сто раз описано в других статьях. Поиск квартиры в Берлине — это как посвящение. Только пройдя его можно стать Настоящим Берлинцем.

Хотя это всё равно проще, чем в том же Нью-Йорке или Лондоне.

Конечно, всегда есть несколько вариантов избежать этого ада. Они очень просты. Всего-лишь нужно:

1.  **Переехать пять лет назад.** Когда хаты в пренце по 500 были и ключи от них просто на улице валялись. Так говорят. Неужели что-то могло измениться?
2.  **Быть везунчиком, которому сразу упадёт хата в стиле «у меня как раз коллега съезжает».** Не забудьте после этого купить лотерейный билет и сходить в казино пока фартит. Рекомендую всегда быть везунчиком и потом удивляться, почему это остальным дурачкам так не повезло, кек.
3.  **Вообще не искать жилье и бичевать по совместным хатам** (их тут называют WG, есть даже сайт [wg-gesucht](https://www.wg-gesucht.de)). Обычно это многокомнатная квартира, в которой живут еще несколько таких же наркоманов. Подходит для двадцатилетних поцанов и девчонок, которым насрать на какие-то там условия и главное в жизни — айфон. Сам таким был. По комфорту этот вариант немного лучше хостела.
4.  **Найти квартиру в фантастических ебенях.** Примерно как ездить из Одинцово на работу в Москву. Плюсы-минусы понятны, кто-то даже может так жить. От себя в таком случае рекомендую искать квартиру по линии поездов с кодом RE (региональных) — это такие двухэтажные аэроэкспрессы, которые хотят по обычным маршрутам, но без большинства остановок. До центра могут долетать за 20 минут вместо обычного часа, что приятно.
5.  **Переплатить за мебеллированную хату.** Когда вам кто-то рассказывает как _«всего за неделю нашел нормальную хату»_, в 109% случаев это студия на 30 квадратов _(((всего)))_ за €1500. Проверено неоднократно. Несмотря на оверпрайс, плюс такого жилья — у вас сразу есть вся мебель, что даже имеет финансовый смысл, если вы планируете жить тут меньше, чем год-два. Та же кухня стоит минимум пару тыщ евро, так что хз.

К сожалению, ни один из вариантов нам не подходил. Мы не везунчики, не родились богатыми, и не хотели жить в коммуналке. Так и началось.

## [Как искали мы](https://vas3k.ru/blog/go_to_berlin/#scroll310)

Осмотрами квартир занималась Лена, потому что я в это время отчаянно пытался влиться в _новую корпоративную культуру_ и разобраться с документами-страховками-внж. Огромный ей за это респект, не представляю как бы я справился с этим один.

Каждое утро она скидывала мне пачку анкет, я распечатывал их на офисном принтере, подписывал, отдавал, она шла с ними на осмотры, присылала кучу видосов в телеграм, отдвала документы, а каждый вечер мы обсуждали что можно улучшить. Так продолжалось два долгих месяца.

Техническая сторона была понятна — идём на все два-три местных популярных сайта аренды и подаёмся на всё, что нравится. Примерно 10% отвечают и присылают анкету, которую вам надо заполнить на немецком (каждый раз разную, но в основном спрашивают где работаешь и сколько получаешь) и принести с другими необходимыми документами на осмотр когда вам скажут.

Утром обозначенного дня вы берете стаканчик свежего фильтр-кофе и приходите весь такой молодец на нужный адрес. Мотивация прямо сейчас получить ключи от новенькой квартирки бьет изо всех щелей, ведь мама всегда говорила, что я лучший и особенный, у меня точно всё будет не как у всех!

Около падика вы встречаете еще примерно 20 таких же молодцов со стаканчиками фильтр-кофе. Упс. Среди них есть и инженеры Airbus, и матери с пятерьмя детьми, и другие более привлекательные слои населения. На самом деле все они выглядят намного более привлекательно, чем вы.

У вас забирают анкету и забывают о вас навсегда.

Так было пять, десять, пятнадцать раз, пока мы не начали понимать, что тактика «я у мамы самый лучший» работает неочень. Надо быть менее гордым и более изобретательным.

Лена выучила пару фраз на немецком и стала разговаривать со шнырями-риелторами, что показывают квартиры. Даже простейший диалог на уровне «нам интересна ваша квартира, мы недавно переехали с мужем, вот наши документы» уже повышал конверсию в разы. Выяснилось, что все эти риелторы — супер-ленивые мрази, которым досталась самая простая работа в мире. Быть риелтором в Берлине — это когда ты можешь просто лежать на полу, а к тебе сами будут приползать люди и засовывать тебе деньги. Если не привлекать их внимание, они забывают всё ровно через 15 секунд. Как золотые рыбки.

Для привлечения внимания в ближайшем супермаркете по акции были накуплены цветные папочки, куда мы красиво складывали все наши документы. Рыбкам это нравилось.

Однажды я был на осмотре и заметил, что риелтор записывал на первом листе каждой пачки документов номер телефона и краткое описание типа «пара из россии, айтишники». Так был придуман супер-инновационный титульный лист где я напечатал наши фотографии, чтобы он мог вспомнить как мы выглядим, краткую биографию каждого (на немецком) и телефон крупно по центру. Рыбки тащились, но тут главное не переборщить.

Естественно, не одни мы были такими хитрожопыми. Видел целые индийские семьи, которые притаскивали с собой фотоальбомы своих пяти детей и бабушек, чтобы доказать серьезность своих намерений.

Положительных решений, однако, мы всё равно не получали, пока однажды Лена не придумала дублировать все документы вечером по e-mail. Многие риелторы и сами об этом просили, а один даже наотрез отказался брать нашу папку с документами, потому что ТАМ ЖИ ЛИЧНЫЕ ДАННЫЕ, ему НЕ РАЗРЕШЕНО.

Мы начали дублировать документы на почту вообще всем. А каждые два-пять-десять дней без ответа, задалбывать их follow up'ами, не забывая при этом учитывать и дни недели — в пятницу, выходые и понедельник смысла писать нет.

Наш метод экслуатировал главную уязвимость, что в случае отказа не отвечают. Теперь мы имели полное право забрасывать всех follow up'ами каждую неделю, этически будучи полностью чистыми.

Всё это, естественно, на немецком, переведённом через гуглтранслейт с английского (так получалось точнее, чем с русского). Вот настолько нам пришлось охуеть.

Однажды, в начале третьего месяца поисков, после очередного follow up'а нам внезапно ответили типа «ой, у нас как раз отвалился потенциальный жилец, хотите подписать контракт?»

Причём это было на квартиру, которую мы смотрели еще месяц назад. Подписали, внесли предоплату прям тут же с телефона, получил ключи, живём. Норм квест.

## [Советы от бати](https://vas3k.ru/blog/go_to_berlin/#scroll320)

Или что надо помнить, когда ищешь квартиру в Берлине:

*   Всё написанное выше — не план к действию, а лишь моя история о том, какими путями можно пробовать позти к цели. У каждого свой путь.
*   Совет, который помог мне больше всего — **относиться к процессу с юмором, иначе сойдешь с ума нахрен**. Ни одного ответа за два месяца — это норма. Всё это просто такая игра, но однажды каждому приходит письмо «поздравляю, вас выбрали».
*   Большинство арендных квартир здесь принадлежат компаниям. Немец лучше сдаст знакомым или наймёт ту же компанию. С одной стороны плюс, с другой же компания не выселит вас потому что у неё _«сын вернулся из штатов и ему надо где-то жить»_, компания не будет проверять как вы протираете пыль и не впарит сраный сервант на передержку. Все ваши отношения строго прописаны в контракте. Переводи деньги на счёт и живи там хоть до пенсии.
*   Весь процесс хоть и кажется адом, но даже Мюнхене или Лондоне всё намного хуже, а люди всё равно там успешно снимают. Берлин всё еще легкий режим в этой хардкорной игре.
*   Премиум-аккаунт на [immobilienscout24.de](https://www.immobilienscout24.de) действительно пригодится, не скупитесь :)
*   Если вы переезжаете один — вам жопа. Классическая схема переезда айтишника в Берлин — вдвоём. Не представляю как бы я справился один, наверное уже бы спился и двинулся. Вам реально пригодится нормальная жена.
*   Когда ваши релок-агенства начнут тупить или вы просто почувствуете грусть — приходите к нам на [howtoberlin.de](http://howtoberlin.de). Мы уже отработали кучу процессов и всегда подбодрим лайфхаками — от глупых вопросов типа где постричься до регистрации собственного бизнеса.

# [Глава 7. Стерильные квартиры, кухня из икеи](https://vas3k.ru/blog/go_to_berlin/#scroll330)

Квартиры с мебелью в Германии — редкость и оверпрайс. Обычные хаты сдают пустые и абсолютно стерильного вида. Белые стены, два провода с потолка, стандартный ламинат или паркет на полу. Проще перечислить то, что есть — туалет, раковина, выключатели, розетки, домофон.

Однако, часто прошлые хозяева пытаются продать вам уже установленную кухню за полцены, чтобы самим её не демонтировать и не вывозить. Обычно звучат цены типа €1000, что звучит как дофига за пару шкафчиков, но потом ты смотришь сколько стоит новая кухня (даже в икее) и это уже выглядит как отличное предложение. Если кухня выглядит новой, приятной и юзабельной — давите жабу и соглашайтесь, это сэкономит вам несколько недель мозгоёбли.

Так выглядит твой фотопоток когда только что переехал

## [Можно делать любой ремонт, только потом верни как было](https://vas3k.ru/blog/go_to_berlin/#scroll340)

Плюсы переезда стерильную квартиру — в ней нечего ломать и портить, а значит ты не попадёшь на «химчистку матраса» за €700, как случалось у нас в Литве с завидной регулярностью.

Второй плюс — можно делать любой ремонт, при условии вернуть всё обратно. Обычно такой откат решается ведром белой краски, да и случится он совсем нескоро — минимум несколько лет ты тут точно проживёшь.

Минусы, очевидно, время и деньги. Когда начинаешь жизнь с нуля, понимаешь, что в есть примерно миллион идиотских мелочей, о которых ты никогда не думаешь, но без которых прям ТЯЖЕЛО — типа ёршика для унитаза или зеркала. Тут сильно спасал Амазон и с подключенным триалом Прайма на месяц, он привозил любой товар прямо на следующий день бесплатно.

Четь менее очевидный минус — все квартиры в Германии одинаково скучные и всратые. Не такие всратые как коробки в Люблино, но всё же. Никто здесь не заморачивается даже с покраской стен, не говоря уже о каком-то декоре. Нет больше того разнообразия двухэтажных лофтов, как было у нас в Литве. Это грустно.

Гостиная. Необычная форма хаты была одним из селлинг поинтов для меня

Место для кухни. Итого в комнате 12 углов и два из них непрямые

Чтобы хоть как-то разнообразить существование, было решено покрасить пару стен в серый, потому что я мёртв внутри. В качестве ламп первое время висели тупо цоколи из ОБИ по €1 за штуку по акции, и конечно же _умные лампочки_ из икеи, ведь [Дом-Дурачок 2.0](https://vas3k.ru/blog/homesillyhome/) же!

Всё это поначалу даже весело и приятно, пока на сцену не выходит ОНА. Кухня.

## [Кухня. Её нет](https://vas3k.ru/blog/go_to_berlin/#scroll350)

Конечно, хотел бы я сейчас побыть собой пять лет назад и раскукарекаться про «кухня дома нинужна» и «ужинать надо в ресторане», но это всё работало только когда ты в Новосибирске или подобной ему жопе, но долларовой зарплатой. При переезде же всегда сначала сильно падаешь по уровню жизни и относительному баблу (хоть и абсолютная цифра з/п растёт), чтобы потом вырасти еще выше. Но не сразу.

Короче, кухня нужна. Хотя бы минимальная.

Германия — родина самых охуенных производителей кухонь ([LEICHT](https://www.leicht.com/de/)), которые заказывают миллионеры по всему миру. Их проблема в том, что даже если вы найдёте что-то дешевле €10,000, то срок изготовления и доставки вам озвучат в примерно 6-8... ммм... месяцев. Без шуток. Особенности жизни в европейской стабильности :)

Хочешь не хочешь, а IKEA твой единственный выбор. Но даже в ней запись на планирование кухни в магазине расписана на месяц вперед.

Дарю лайфхак. Если собрать кухню самому в конструкторе у них на сайте и прийти с присвоенным ей кодом на стойку «экспресс-заказа», всё сделают без очереди. Причём на стойке будет точно такой же мальчик-специалист, который посмотрит что вы там насобирали и как её можно улучшить. Например, мы не хотели стандартный угловой элемент с крутилкой для кастрюль, который предлагает конструктор, потому попросили мальчика впиндюрить туда раковину. Сработало.

Где-то через неделю, в выбранное вами время всё это говно доставляют прямо в квартиру. К этому времени лучше запастись пивом и друзьями. Вместе мы управились со сборкой всего за три полных вечера. ~75 человекочасов. Зато получилось норм, я доволен.

Начинаем красить стены в странные цвета

Собирать кухню одному строго запрещено

Ремонт в разгаре. Икеевский стол оказался светлее необходимого, потому был покрашен

Скотч на стене — инженерный подхож к выбору размера и расположения телевизора

## [Шпермюль и фриганство  
Миллениалы изобрели бомжевание](https://vas3k.ru/blog/go_to_berlin/#scroll360)

После уплаты всех первичных депозитов денег обычно остаётся лишь на доширак. Можно подождать зарплаты, а можно начать обживаться почти бесплатно.

Спасибо потоку студентов и хипстеров. Группы типа «[Free Your Stuff Berlin](https://www.facebook.com/groups/freeyourstuff/)» на фейсбуке насчитывают по 200 тысяч человек каждая, а если их объединить с «[Sell Your Stuff Berlin](https://www.facebook.com/groups/sysberlin/)», то получится вообще треть города.

Раздают или продают за копейки там абсолютно всё — от сломанных кофеварок до MacPro и уличных пивных киосков.

Главная цель — урвать первым. Самым уважаемым уровнем хардкора считается когда ты обставил новую квартиру, используя только бесплатные вещи. Для этого нужна куча свободного времени, но мы решили его не тратить. Бесплатно нам достались две кофеварки (гейзерная и капсульная), набор специй для кухни и евро-палеты, из которых я сделал кровать.

Доволен.

Рынок б/ушечки оказался знатным. Просто посчитайте сколько бабла нужно чтобы купить всю бытовую технику в доме — телевизор, стиралку, холодильник, посудомойку, плиту, микроволновку, утюг, фен, итд. Выложить такую сумму за раз тяжеловато, особенно когда только что отдал три тысячи евро залога за хату.

Так за пару кликов мышкой были найдены:

*   Холодильник Siemens за €350 с доставкой, при цене нового в €900. Какой-то крутой и с охуительными бесполезными функциями, но не новый.
*   Посудомойка Bosch за €200, вместо €450 за новую. Вообще не вижу в них разницы, главное, что влезла в икеевскую кухню.
*   Стиралка Bosch за €180 вместо €400 за новую. Чисто по бошу угараю, да.
*   Микроволновка Samsung за €70 вместо €150. Новая, еще в упаковке.
*   Другие приятные мелочи типа колонок.

Нормально сэкономил, брат жив. За некоторые штуки заплатил PayPal'ом, на который капают копеечки с патреона — теперь всерьез могу утверждать, что купил холодос на донаты!

Так выглядит кресло, которое можно забрать себе домой

А вот доска объявлений в падике. Нет бы, там, ДРОВА-УГОЛЬ

Из всей бытовой техники разве что телевизор был новый, и тот по распродаже на Амазоне. Потому что 65"" — важная цифра в жизни каждого мужчины!

Кстати, каждому понаехавшему сразу рекомендую читать книжку «[Берлин: веселая столица, или от рейхстага до кебаба](https://www.google.com/search?client=safari&rls=en&q=%D0%B1%D0%B5%D1%80%D0%BB%D0%B8%D0%BD+%D0%B2%D0%B5%D1%81%D0%B5%D0%BB%D0%B0%D1%8F+%D1%81%D1%82%D0%BE%D0%BB%D0%B8%D1%86%D0%B0+%D0%B8%D0%BB%D0%B8+%D0%BE%D1%82+%D1%80%D0%B5%D0%B9%D1%85%D1%81%D1%82%D0%B0%D0%B3%D0%B0+%D0%B4%D0%BE+%D0%BA%D0%B5%D0%B1%D0%B0%D0%B1%D0%B0&ie=UTF-8&oe=UTF-8)». Она как README на гитхабе — отвечает на все глупые вопросы новичков, оставляя после себя еще больше вопросов (но уже менее глупых).

Ремонт нельзя закончить, его можно лишь прекратить

Как-то так пишутся сейчас эти строки, абсолютный минимум

Радиорубка для подкастинга (не моя, жены)

Открытый гардероб оказался отличной бич-идеей для маленькой комнаты

Для связи → [\[email protected\]](https://vas3k.ru/cdn-cgi/l/email-protection#ddb0b89dabbcaeeeb6f3afa8) [Телеграм-бот](https://t.me/to_vas3k_bot) [Твиттер](https://twitter.com/vas3k)

Пожалуйста, ставьте ссылку на vas3k.ru при использовании материалов и цитировании. Перепечатка постов возможна, но с разрешения. Пишите на почту.",null,undefined
2020-06-13T12:53:29.000Z,https://freedomcry.livejournal.com/792670.html,false,[],article,"Да, ваш ребенок рисует лучше Малевича и Кандинского",null,pocket,null,"# Да, ваш ребенок рисует лучше Малевича и Кандинского

[freedomcry.livejournal.com](http://freedomcry.livejournal.com)

Не ждали? Я тоже себя тут не ждал. Оказывается, есть у меня еще кнопки, которые нажимаются.

  
[https://shakko-kitsune.livejournal.com/1102342.html](https://shakko-kitsune.livejournal.com/1102342.html)

Искусство — это сверхремесло, а не недорелигия. Когда из искусства делают недорелигию, оно просто становится недоремеслом. Ну и обрастает кабалой святош, понятное дело.

Автор поста — историк искусства, что в наш век означает «можно не читать». Как можно не читать объяснения духовных лиц, почему святая вода святая, а вот заряженная Чумаком не считается. Или объяснения гомеопата, почему нельзя просто потрясти бутылку «Фанты» и получить средство от изжоги. Но мы читать будем.

Все-таки эти люди слишком самонадеянны, когда перестают сыпать жаргоном и пытаются быть доходчивыми. Что любой ребенок может рисовать лучше Малевича — это-то разумеется, но тут еще и некоторые дети смогли бы лучше подменять понятия и манипулировать.

А людям нравится верить во все, что звучит многомудро. Нравится встраиваться в фантомные иерархии «что-то понимающих». А вот мне не нравится. И фантомностью, и иерархичностью.

Современное искусство делается — и идейно обслуживается — людьми, которые, да, честно набираются образования и кругозора, но потом все это используют для того, чтобы страдать фигней. А на все вопросы закатывать глаза и говорить «ну что за плебеи, а». Немного напрягся вначале — и становишься на всю жизнь человеком, которому настолько верят на слово, что можно откровенно изгаляться.

Очень понятная и нехорошая статусная игра, которая идет уже давно. И этот пост принципы неприкосновенного страдания фигней излагает бесстыднее, чем обычно. Но и безыскуснее.

Вначале автор стращает. Вы, мол, как тот персонаж из «Места встречи», который про этюд Шопена, вы ж понимаете, сказал «это и я так могу» и затребовал у Шарапова «Мурку». Всегда забавляет, когда люди апеллируют к вымышленным и изрядно карикатурным олицетворениям «некультурности», в упор не понимая, что если они чего и образец, то классовой хамоватости их создателей. Хорошо хоть Полиграфычу никто этюдов не наигрывал. Но суть не в этом.

Суть в том, что для обоснованного сравнения с Малевичем и Кандинским Шарапов должен был не Шопена сыграть. А как минимум Шёнберга — ну а по хорошему-то погонять туда-сюда арпеджио, или взять одну ноту и полминуты держать, а через полминуты тишины взять вторую ноту. Такая авангардная музыка тоже есть.

И всю эту яичницу Кыльтырные Льыди примешивают к божьему дару со вполне четкой целью, даже если сами не осознают. Все статусное и территориальное в нас инстинктивно и находит очень хитрые пути. «Авангардный» и «современный» мусор нужен затем, чтобы экспертным знаниям в искусстве придать некой иллюзорной оккультности.

Когда человек безусловно разбирается в нормальном вменяемом искусстве (которое можно понимать или не понимать, любить или не любить, но в котором _есть о чем говорить_), а затем на одном дыхании начинает всерьез обсуждать несусветную хрень вроде «Черного квадрата», это сразу его превращает из простого эксперта в некоего Посвященного, которому сомневающийся в себе человек будет готов поверить на слово.

Ну или не «Черного квадрата», а вот такого, например, которое в том же посте приводится.

Что это? Это узор для клеенчатой скатерти на кухонный стол. Можно обсуждать, к каким он пойдет шкафчикам, занавескам и обоям. Но нет, остановись, кричат мне, — это ж, мать твою, Мондриан. Что да, некоторым образом меняет восприятие — примерно в ту сторону, как если бы это оказался фрагмент кухонной скатерти какого-нибудь новейшего святого чудотворца. Скатерть, соответственно, тоже кого-то там чудотворно излечила. Современное искусство — это индустрия мощей и плащаниц открыла для себя новый рынок.

И базовый прием тот же, если послушать богослова или проповедника, какого-нибудь продвинутого, как Кураев. Он будет знать жизнь, трезво судить о вещах, рассказывать что-нибудь интересное и действительно расширяющее кругозор — а потом плавно так свернет на грехопадение, ад и грядущий конец света. А потом обратно вырулит так же плавно.

И начинаешь невольно думать: должно же быть нечто такое, что для человека помещает эти вещи на один уровень. Ведь не может же он вот так вот мягко осциллировать между здравым смыслом и чем-то не очень похожим на здравый смысл.

Может. Именно это он и делает. И делает именно для того, чтобы вы поверили в его недостижимую просветленность и посвященность, которую непросветленные и непосвященные могут только принять на веру.

Это человек, живущий в симбиозе со смысловым паразитом. Он паразиту — воспроизведение и распространение, а паразит ему — статус, с которым просто так не сравняешься, и некую территорию мысли, на которую просто так, со свиным рылом здравого смысла, не вторгнешься.

Мотивации тех, кто современное искусство создает, достаточно просты. Приятно, когда делаешь какую-то фигню, а она сходит о-го-го за что. А вот мотивации тех, кто современное искусство всерьез обсуждает и отгоняет от него здравый смысл — они вот такие клерикальные. И как религия всегда в той или иной мере стремится к контролю над обществом — то есть к клерикальной власти — так и искусствоведы, истинноверующие в Малевича и Кандинского, стремятся сделать свою более узкую площадку действительно своей. Чтобы туда мог попасть не просто изучивший все то же самое, но еще и опосредованно, через Малевича и Кандинского, их когорте присягнувший на верность.

Они не мошенники; как большинство религиозных деятелей, они и впрямь истинно веруют. Это легко, когда от своей веры чувствуешь инстинктивные статусные плюшки. Но все-таки это требуется как-то рационализировать; и пост историка искусства нам показывает, как.

> _— Но как это абстрактное искусство может иметь какую-то ценность и смысл?! Я вот сяду и такое за десять минут нарисую!_
> 
> Неа, такое не нарисуете.
> 
> Потому что вот второй аспект:  
> **У всего на свете есть бэкграунд.**

Да что вы говорите.

Вот у этого нет бэкграунда. «Пещера Альтамира, Испания, возраст от 15 до 35 тысяч лет» — это не бэкграунд. Это еще меньше, чем подпись маминым почерком «Коля, 5 л.» в углу детского рисунка. И все-таки никто не будет спорить, что это искусство. Некий тест Тьюринга на художественный замысел — а не размазывание краски полунаугад — это проходит сразу, даже если вообще ничего не знать.

И не потому, собственно, что здесь «что-то» изображено. А потому, что взаимосвязи элементов создают, _в пределах самого произведения,_ смысл, запредельно превосходящий осмысленность каждого отдельного элемента.

Поищите его здесь.

Это не скатерть, да. Это претенциозное избегание какой-либо содержательности при настойчивом «спроси меня, что это». «Решительный розовый» — одно из тех названий, которые даются, «чтоб стало еще эзотеричнее». Оно принципиально не должно слишком соответствовать чему-либо изображенному, как все изображенное не должно слишком между собой образовывать связи, кроме формальных («вот та фигня вот там повторяется»).

Ровненько, в интересной цветовой гамме, с оглядкой на принципы композиции исполненная зарисовка мусора в голове. Причем мусора, который появляется в голове только тогда, когда хочешь зарисовать мусор в голове. Будете вы мне рассказывать, из чего делаются эти сосиски. В мои биполярные 14–15 лет я все тетради чем-то таким искалякал. Конечно, гораздо менее твердой рукой, ну да кто ж спорит, что Кандинский рисовать умел, просто не хотел. Зачем, когда можно сойти за таинственного и передового.

А года в три-четыре я нечаянно превзошел Магритта. По замыслу, опять же, а не технике. Я нарисовал картину, которую можно было бы назвать «Просто красная машина с лестницей, не пожарная». И очень громко настаивал, что это _непожарная_ машина. А тут взрослый дядька, блин, открыл Америку, что в слой масла на холсте не набьешь табак.

Был такой детский кукольный спектакль — «Поросенок Чок», и там волк был настолько тупой, что портрет оного поросенка принял за него самого и пытался съесть. По прошествии лет даже там видится больше художественной глубины, чем в сесинпазюнпипе. Кукла пытается съесть портрет. Это же поэзия.

А все ваше современное искусство ничего, кроме самых примитивных вещей, выразить не может. Потому что художественный словарь примитивный. И все это добавочно путается со своей противоположностью — Дали, например, тоже «сложный», но елки-палки, там как раз чем меньше «бэкграунда», тем лучше. Настоящее искусство содержится в себе и сообщает прежде всего о себе.

Ну вот как донести эту разницу? Я верю, что воображаемая вселенная, в которой находится эта сцена, содержит в себе все объяснения того, почему это здесь стоит. Останавливаться на пороге поиска этих объяснений, удержать их в уме несхлопнутым волновым пакетом, — это для меня и есть переживание искусства.

Тут, конечно, явится искусствовед и скажет, что самое-самое важное тут — это отсылка к [другой картине](https://en.wikipedia.org/wiki/The_Angelus_(painting)#/media/File:JEAN-FRAN%C3%87OIS_MILLET_-_El_%C3%81ngelus_(Museo_de_Orsay,_1857-1859._%C3%93leo_sobre_lienzo,_55.5_x_66_cm).jpg). Конечно, для него это самое важное, потому что именно это здесь его делает осведомленнее среднего зрителя. Можно принять к сведению, что та картина имеет некое существование в пределах этой художественной вселенной. Принципиально это ничего не меняет.

Ну, Кандинский тоже бывает где-то приличный. Например вот «Зеленая Звезда Смерти, маскирующаяся под сиську». Пардон, «Круги в круге».

Если серьезно, то — ну да, ну да, какие-то бедняцки-поучительные идеи выковыриваются отсюда просто за неимением чего-то еще. Общий круг как тюрьма для разноцветных и одновременно их некое sine qua non, случайные парейдолические глаза, какбыговорящие нам о зыбкости границы живого и неживого, и прочая скука. Если нейросеть с рандома наляпает кругов, там тоже что-нибудь такое отыщется. А на самом деле опять ясно, что художник просто старательно избегал что-либо иметь в виду. Троллил, если хотите.

Впрочем, можно послушать людей более сведущих.

> Например, Василий Кандинский считал, что каждый цвет равноценен какому-либо звуку, и пытался в своих картинах отразить музыку.
> 
> «Синий — типично небесный цвет. При сильном его углублении развивается элемент покоя. <…> Голубой цвет, представленный музыкально, похож на флейту, синий — на виолончель и, делаясь все темнее, на чудесные звуки контрабаса; в глубокой, торжественной форме звучание синего можно сравнить с низкими нотами органа».
> 
> Поэтому, при взгляде на картины Кандинского, наш глаз действительно испытывает некую бодрость (или раздражение), а не тоску или грусть, пускай никакого веселого сюжета на полотне и не разглядеть. Он так нарочно делал, смешивал цвета по своим рецептам, как салат.

Вопрос на засыпку: чего такого здесь не мог бы сделать любой ребенок? Понятное дело, менее твердой рукой. Это всё какие-то колбасные обрезки вроде попыток доказать, что тот или иной религиозный текст содержал неизвестные для своего времени научные истины, надо только понимать шире. Написано-то все равно что земля блин, а небо колпак.

Несовременное, нормальное искусство не требует апологетики. Даже когда оно плохое, оно ясно отличимо от «рисовать получается, картины — нет». Да, отличимо в конечном счете неким вложенным в него ремесленным трудом, в противоположность ремесленному, извините, онанизму.

> В общем, по-любому, чтобы насладиться по-настоящему любой картиной, надо про нее что-то знать.
> 
> Если картина реалистичная, то надо знать простую вещь — сюжет или символику (даже в натюрморте могут скрываться неведомые глубины сюжета и символики).  
> Если же картина нереалистичная, то надо знать вещь сложную — какая идея за этим скрывается.

Две большие разницы: наслаждаться картиной и наслаждаться собой об картину. Для второго, конечно, лучше как можно больше знать и чувствовать себя умнее всяких заказывателей «Мурки».

Сюда же — «символика». Символы вообще антихудожественная вещь, урезание возможностей образа и противоестественное для зрительского ума обращение с абстракциями. Но, несомненно, фансервис для тех, кому важно быть самыми умными. Эксклюзив, без SMS и регистрации, вот этот огурец символизирует не то, что вы подумали, а надежду, ибо зеленый. (Можно же и человеку, ничего, кроме Набокова, не читавшему, иногда отсылошничать.)

Что касается «сложных» вещей, которые надо знать — но зачем? Зачем их знать? Вся эта дрянь висит в галереях только потому, что подобные люди настаивают на ее важности и ценности. А важность и ценность, получается, в том и есть, что о них требуется спрашивать этих людей. И бояться перед ними опозориться.

Я, пожалуй, не буду про «Черный квадрат» и поминание всуе Джойса как «тоже сложного», а то еще начну матом ругаться. И вообще устал, и у меня кусок блистательной прозы вторую неделю дописаться не может. В общем, твиттером июньский пост принесло, и вот я снова в ЖЖ. Посмотрим, что дальше.

Нет ничего «сложного» в современном искусстве. Оно примитивное, скучное и в наш век однозначно архаичное. Вся «сложность» тут — из разряда «сложно, конечно, оставить жизнь в грехе и принять наше божество без SMS и регистрации, но ведь потом в ад попадете — не жалуйтесь».

Интересная будет когда-нибудь, лет через сто, глава в истории массовых затупов человечества. В когнитивной кузнице нет какого-то в общем-то нехитрого гвоздя, и вокруг этого вырастает такой забористый бред, что потом кажется, люди тогда были на скамейке запасных, а вместо них были инопланетные роботы-доппельгангеры. Справедливости ради, это довольно безвредный затуп на фоне предыдущих, вроде охоты на ведьм. Но надоел до ужаса.",null,undefined
2019-11-13T22:05:08.000Z,https://vc.ru/life/83056-dmitriy-mackevich-dbrain-o-predprinimatelstve-kak-psihicheskom-otklonenii-ii-i-emocionalnoy-bezopasnosti,false,"[""best""]",article,"Дмитрий Мацкевич, Dbrain : о предпринимательстве как психическом отклонении, ИИ и эмоциональной безопасности — Личный опыт на vc.ru",null,pocket,null,"# Дмитрий Мацкевич, Dbrain : о предпринимательстве как психическом отклонении, ИИ и эмоциональной безопасности — Личный опыт на vc.ru

by [Alex Ivanov](https://www.facebook.com/SMMrussia/), [vc.ru](http://vc.ru)  
September 13, 2019 04:18 PM

_Первая часть моего интервью с [Дмитрием Мацкевичем](https://teleg.one/Matskevich), основателем и CEO ИИ-стартапа [Dbrain](https://dbrain.io/) и популяризатором нейронауки. Это очередное в [серии интервью](https://teleg.one/ponchiknews) с топовыми специалистами в своих областях про продуктовый подход, предпринимательство, психологию и изменение поведения._

**Тебя сложно поймать. Ощущение, что ты живешь между Россией, Китаем и Калифорнией. Где ты сейчас?**

Где-то между Россией. (Смеется). Сейчас я в Москве. В основном перемещения были связаны с тем, что у нас много клиентов в Шанхае, Дубае и Америке. В России у нас разработка. Но я смотрю постоянно, как мне лучше фокусироваться, оптимизирую. Через какое-то количество перелетов я понял, что перемещаться так много — скорее net negative для меня. На переключение между часовыми поясами уходит много времени, ты вроде постоянно чем-то занят, но очень часто не в фокусе. Стараюсь сейчас оптимизировать нахождение в одном месте.

**Что ты делаешь, чтобы оставаться в форме с таким количеством перелетов и часовых поясов?**

Иногда за один месяц у меня бывает четыре перелета вроде СФ-Москва-Шанхай. Научился оптимизировать джетлаги. У меня появился базовый список, что делать. Я отношусь к нему как к продукту, постоянно обновляю.

**1\. Сон.** Раньше я работал во время перелета, и потом приходилось 2-3 дня приходить в себя. Сейчас я сплю в самолете, причем специально больше, чем дома. Сон — крутейший эволюционный механизм восстановления организма. Его не заменишь БАДами и присыпками.

**2\. Тайминг.** Хотя бы один рукав перелета должен быть долгим, и в точке назначения во время вылета должен быть вечер. В самолете сразу ложусь спать и прошу разбудить в 10 утра по времени прилета. По ощущению, не тратится время на переключение часовых поясов.

**3\. Принадлежности**. Маска на глаза, блокирующая все лицо, чтобы никакого света. Силиконовые затычки. Шумоподавляющие наушники поверх затычек. Подушка, которая минимизирует вибрацию от самолета. За час-два до вылета начинаю носить оранжевые очки, как у Тайлера Дердена. Они блокируют синие лучи, которые подавляют выработку мелатонина, оптимизирующего циркадные ритмы… Забавно, должно быть, выглядит со стороны: чувак в черном худи, черной футболке, черных штанах и оранжевых очках.

**4\. Добавки.** Пью перед вылетом мелатонин и аминокислоты L-глицин, GABA. Они говорят организму: сейчас будет сон.

**5\. Еда.** Пищеварение сильно завязано на циркадные ритмы, поэтому я перестаю есть за 3-4 часа до вылета, и естественно не ем в самолете. Минимизирую инсулин в крови. Никакого алкоголя, он мешает сну и сгущает кровь.

**6\. Место в самолете.** Помогает апгрейдиться до бизнес-класса, мне обычно хватает миль или ваучеров. Если не получается проапгрейдиться, беру место у крыла, вытягиваю ноги, сплю. У меня есть специальная надувная подушка для ног, стюардессы часто спрашивают, где я ее взял. Очень полезная штука, чтобы вытянуться и уснуть.

В общем, главное — это выспаться, причем чуть больше, чем нужно. Это важно для энергии и тонуса.

**Тебя узнают в самолетах?**

Бывает, встречаю знакомых стюардесс. Они меня запоминают со всеми этими гаджетами.

**У тебя крутой послужной список: закончил Физтех и РЭШ, построил карьеру в онлайн-ритейле, продал за $20 млн свою компанию. Теперь ты делаешь стартап про машинное обучение. Чем ты сам больше всего гордишься?**

Сложный вопрос. В советском прошлом родители прививали черту ничем не гордиться, молча херачить. Достиг — хорошо, но может просто повезло, работаем дальше. Так что про гордость за проекты говорить непросто.

Я горжусь тем, какого достиг понимания себя. Каждый бизнес, удача или неудача достает кучу проблем изнутри. Ты что-то прорабатываешь, что-то узнаешь о себе, это делает тебя чуть более свободным.

Например, была склонность не верить в успех. Понял, откуда это, какие эмоции вызывает, где это ощущается в теле. Нашел, достал, проработал. Стал свободнее. Это как в игре. Level up, следующий уровень.

**Как у Пелевина в «Принце Госплана»?**

Да. Важно то, что независимо от внешних успехов, есть внутренний результат. Смотришь на себя пять лет назад — и такой: вау, совсем не понимал себя, не получал удовольствия от жизни. Теперь очень хорошо разбираюсь, что мне нравится, где я вхожу в состояние потока.

Я как многомерная фигурка, а мир — как тетрис, нужно себя как-то размещать, помогать людям вокруг размещаться в этом пространстве. И с каждым уровнем я как будто лучше понимаю, как это делать.

Гордиться рано. Поток движения такой, что ты постепенно понимаешь, какой сложный и непонятный на самом деле мир. Но ты учишься реальность вокруг себя подготавливать лучше, создавать себе и другим ощущение потока, получать удовольствие.

**Твой проект [Dbrain](http://dbrain.io) собрал все самые горячие идеи в один продукт: тут и машинное обучение, и gig economy, и аннотация ИИ. Как так получилось?**

Скорее это баг, чем фича. Когда ты только начинаешь новый проект, на тебя влияют, конечно, все текущие хайпы и тренды. Надо быть крайне осознанным, чтобы не поддаться этому. Поэтому, часто, начинаешь широко, а дальше по ходу движения разбираешься и гигантским усилием воли и дисциплиной фокусируешься там где получается. Идти конечно лучше от проблемы, а не от технологии или даже решения. Но в реальной жизни у меня никогда так по-книжному не было. Ты все знаешь как правильно, можешь читать об этом лекции, но на практике у тебя много всего происходит чего невозможно было знать заранее, а ты лишь успеваешь подруливать.

Сейчас Dbrain сфокусирован на том, чтобы освободить большие компании от любой работы с документами и связанного с этим анализа данных. Оказалось, несмотря на такой хайп вокруг ИИ, обычные проблемы по классификации и доставания данных из документов до сих пор полностью не решены. Тут мы использовали свои две основные компетенции - это распределение мелких задач в реальном времени среди сотен тысяч людей для обучения ИИ и создании решений в компьютерном зрении. В итоге мы научились полностью забирать на себя все задачи по работе с документами благодаря объединению возможностей 100-ен тысяч людей и ML алгоритмов в реальном времени. Так мы получаем лучшее и от ИИ, и от человеческих возможностей. ИИ занимается частыми понятными задачами, а люди решают кейсы, которых мы раньше не встречали или были плохо обучены. И даже когда мы спим наш ИИ работает и становится умнее и умнее, перенимая знания у этих людей, которые его постоянно дообучают своим примером.

**Ты много говоришь про работу мозга. Название Dbrain — не случайное?**

В Dbrain мы видим много ситуаций, для решения которых нужно много параллельной работы ИИ и людей, его обучающих. Dbrain — это distributed brain. ИИ позволяет перенимать и масштабировать то, на что его тренируют люди.

**Как ты видишь будущее людей с искусственным интеллектом?**

На пару десятков лет легко предсказать. Дальше сложно, даже эксперты не могут договориться.

Сейчас мы видим, что будут развиваться индустриальные кейсы — узкий ИИ (narrow intelligence). Это когда область узкая, задача хорошо описана, много примеров данных. Раньше задачу решали люди, теперь переходим на ИИ. Например, в каждой большой организации есть сотрудники, задача которых брать документы, анализировать, и куда-то вносить результаты этого анализа. Исторически это не могли автоматизировать, т.к. была вариативность в принятии решений. ИИ эту задачу решает. Это так же может быть что угодно — от проверки качества мяса на конвейере до распознавания опухолей на снимках. Все эти узкие задачи будут полностью автоматизированы

Тут важно рассказать, чем ИИ отличается от предыдущих способов автоматизации, основанных на так называемых эвристических алгоритмах, когда у тебя много условий вида if-then. Этих конструкций и их сочетаний может быть очень много, поэтому автоматизировать их было невыгодно. ИИ помогает решить это за счет того, что алгоритм обучают люди на большой выборке. Например, на 10 тысячах примеров показывают, где котик, а где собачка. Дальше алгоритм может отличить котика от собачки сам.

Про общий ИИ (_general intelligence_) сложно что-то сказать. Если читать специалистов из [OpenAI](http://openai.com) или известного эксперта Макса Тегмарка, то становится понятно, что никакого консенсуса по этому поводу нет. На эту тему советую книжку Тегмарка «Жизнь 3.0», он там хорошо делает ревью предсказаний и барьеров к будущему ИИ.

Если честно, мне лично нравится делать что-то возможное не через 20 лет, а здесь и сейчас.

**Как приземлять себя в здесь и сейчас?**

Работа с эго. Быть более скромным. Больше слушать. Больше общаться с клиентами и пользователями, выяснять, что им надо сейчас. Делать мелкие шаги, решать насущные проблемы. Постепенно решая мелкие вещи, начинаешь делать что-то большое и важное.

Еще круто иметь короткие петли обратной связи. Каждый раз проверять, создаешь ли ты ценность. Это тоже источник энергии, который я нашел внутри себя. Я не могу двигаться двадцатилетним видением, мне нужна мотивация здесь и сейчас, иначе я начинаю депрессовать. Наверно, кому-то наоборот нужен future vision, мотивация из будущего их питает.

**Задам совершенно другой вопрос. Есть люди, которые считают, что ты один из лучших в России специалист по финансовому моделированию. Откуда этот интерес?**

Стараюсь от этого лейбла избавиться и больше этим не заниматься. Считаю, что это не очень полезная для меня деятельность. Я увлекающаяся личность, и когда-то закопался в финмодели. Я старался понять математически, как бизнес работает. Помогал людям и компаниям делать модели и рейзить средства.

Оглядываясь назад, я понимаю, что бизнес — это не про финансовые модели. Сейчас я думаю, это больше про психологию. Когда я это переосмыслил, то переключился на совсем другие вещи — как работает человеческий мозг, как меняется поведение.

**Что тебя больше всего вдохновляет в создании технологических продуктов?**

Если быть совсем честным, меня слабо мотивируют долгосрочные цели. Я это понял путем проб и ошибок. Есть у каждого свой «портфель энергии». В контексте продуктов у меня в этом портфеле три «актива»:

**1\. Делать полезное клиентам.** Ты показываешь людям магию, даешь им крутой продукт или процесс, меняешь их эффективность, получаешь быструю обратную связь.

**2\. Новаторство.** Это решение ранее нерешенных задач. Что именно делаешь — уже второстепенно. Главное, чтобы это было синхронизировано с моральным кодексом.

**3\. Ощущать себя частью классной команды**. Мне нравится быть с классными людьми, которые вместе что-то делают. Есть такая эволюционная потребность в служении группе. С семьей то же самое — когда люди зарабатывают, чтобы прокормить семью, это их заряжает. Эта потребность дает иммунитет от кризиса видения. Приведу пример: было у тебя огромное видение вокруг важности шоколада, ты открыл конфетный бизнес, всего себя в него вложил, а потом понял, что сахар — это зло, и разочаровался. Но у тебя уже построен весь процесс, все партнерства и производство вокруг этих конфет, просто так все это не поменяешь. Если же источник энергии — это твоя команда, то можно пивотнустья и двинуться дальше.

**Интересно, что ты все говоришь про сахар, а не табак.**

Да, табак заезжен. Но суть в том, что должен быть какой-то полезный бизнес, чтобы переносить лучше кризисы. Если делаешь полезное для Вселенной, кармически это вернется.

**Что ты узнал о построении классных команд?**

Я дилетант и понимаю, что ничего не понимаю про команды, только самые базовые вещи. Вот что я вижу и что работает у меня в компаниях:

**1\. Эмоциональная безопасность.** Это я подсмотрел у Егора Руди, CEO [Profi.ru](http://profi.ru/). Это ощущение, что в команде безопасно выражать свое мнение, показаться некомпетентным, спороть фигню, ошибиться, предложить глупую идею. Это все на невербальном уровне ощущается. Уважение друг к другу. Понимание, что когда ты накосячишь, этим не воспользуются. Не просто эту эмоциональную безопасность достигать - она все время куда-то пропадает. Когда команда там, ты это сразу понимаешь: у тебя лучшие брейнштормы, хочется просыпаясь быстрее вернуться к своим делам, получаешь от взаимодействия друг с другом много энергии. Когда в тебя верят и доверяют, ты становишься супер версией себя - про это есть уже много исследований.

**2\. Ощущение автономии у каждого члена команды.** У меня есть убеждение что очень плохо замыкать на себя лидерство. Кажется что лучше быть таким инженером со стороны улучшая все время среду которая помогает людям брать больше ответственности, быть самоходными, быть в потоке и двигаться вместе оптимальным способом. Но, опять же, когда только стартуешь очень часто просто не хочется повторять свои дорогие ошибки предыдущих проектов и срезаешь углы. В первичном поиске продукт и общении с клиентами ты должен быть много и без посредников.

В связи с этим важно очень тщательно отбирать людей. Вот на что я смотрю:

**1\. Эмоциональный и культурный фит.** Является ли человек зрелым в эмоциональном плане, хорошо ли понимает себя, умеет слушать и вдохновлять других, широкое ЭГО и тд. Для нас это важнее функциональных знаний. Это на первом месте.

**2\. Внутренний заряд энергии в направлении, куда идет компания.** Умение увлекаться, глубоко погружаться задачи и жить продуктом. Горит ли человек тем, что делает, будет ли он зажигать других?

**3\. Общий интеллект.** Всему конкретному лучше учится уже в процессе с позиции первых принципов без старых шаблонов.

Если получается создавать такие условия, и находить таких людей, то все это начинает работать вместе с десятикратным эффектом. Кстати, я с тобой уже обсуждал: мне сейчас это оч интересно как понимать, про что люди, как подобрать для них занятие/роль в которой они будут в максимуме своих возможностей. Как поставить фигурки в нужные места…

**Тогда получается самоорганизация, о которой пишет Кевин Келли, или что-то вроде холакратии?**

Никогда не получалось и не было желания сделать полную самоорганизацию. Мне супер близка автономия, она меня заряжает самого и это была основная причина почему я решил заниматься предпринимательством. Раз я так кайфую от автономии, хочется ее давать и другим, но лидерство очень важно все равно. Полезно и жизненно необходимо быть вовлеченным самому на 140% во многие роли с процессами и примером показывать. Тут тонкая тонкая грань, чтобы это не было навязчиво. По ходу движения круто когда получается роль за ролью с себя снимать, передавая ее человеку который хорошо умеет.

Понятно, что человек может научиться чему угодно. Но кто-то от одной роли будет заряжаться, а кто-то только тратить энергию. Люди редко про себя это понимают. Ко мне мало кто приходит и говорит: я хороший стратег, но фиговый исполнитель, я буду формулировать высокоуровневые вещи, и нужно найти кого-то, кто поможет мне их реализовать. Поэтому хорошо бы уметь такое распознать и подсказать, как найти место своей максимальной эффективности.

**Мы заговорили про команды. Как быть интровертом и взаимодействовать с большим количеством людей каждый день?**

Нет единого определния, что такое интроверсия. Мне очень не нравится разговаривать на поверхностные темы, поэтому я не экстраверт в этом понимании. Но меня заряжает в маленькой тусовке или один на один поговорить о чем-то значимом. К примеру, когда я увлекся нейробиологией, у меня появилось много новых знакомств.

Но я, например, больше не выступаю на больших конференциях. Мне теперь нравятся маленькие группы людей, которые уже что-то знают и хотят лучше разобраться. Это гораздо лучше совмещается с моей интроверсией.

Что касается процессов внутри компании, я стараюсь дополнять себя другими людьми, когда могу. Я фокусируюсь на взаимодействии один-на-один, дальше нахожу людей, которые могут и хотят делать то, в чем я не силен.

**Поговорим о спорте. Как-то раз ты сказал, что каждому мужчине нужно на его пути позаниматься хотя бы какое-то время боксом. Учитывая, как много мы говорим про важность и хрупкость мозга, странно, что ты назвал этот брутальный для головы спорт...**

Не думаю, что бокс — это лучший выбор. Особенно спарринги, это очень травматичная штука. Последние исследования показывают, что сотрясения со временем накапливаются, начинают негативно влиять на здоровье. Даже тренировки с тяжелой грушей могут быть вредны.

Но при этом я действительно считаю, что мужчине нужно заниматься боевыми искусствами. Что-то с сильной боевой энергетикой. Это важно для прокачки маскулинности и духа воина.

Кстати, я прочитал на Бали книжку «Железный Ганс», которую ты посоветовал. Это про этап мужской инициации в разных культурах. Очень полезно, дает понимание важности инициации для парней.

Может быть что-то другое кроме бокса, например единоборства восточные. Они же интегрируют спиритуальность в себя. Не зря же они были придуманы тысячи лет назад. Они сопровождают тебя от тинейджерства до зрелого и пожилого возраста. Они начинают в юном возрасте со спаррингов, потом постепенно фокусируются на внутреннем мире, медитации.

Драться нужно в безопасной среде, не на улице, где тебя могут убить, а в рамках ринга с правилами. Важна энергия от вступления в поединок, когда чувствуешь, что можешь за себя постоять, когда танцуешь боевой танец. Так ты постепенно понимаешь, что сила, независимость и агрессия — это нормально.

**Менторы важны для предпринимателя?**

У меня тут так же как с психотерапевтами — получилось так, что менторами являются мои близкие друзья.

Основная польза ментора — это не функциональные знания. Их можно получить от специалистов. Вряд ли ментор лучше тебя знает твой продукт. Но ментор полезен в личностных вещах и человеческих наыках – в фундаментальных вещах, не меняющихся веками.

Ментор круче терапевта тем, что у него чуть больше эмпатии к твоей ситуации. Можно рассказывать терапевту, как тебе тяжело и как хочется послать все к черту, но он не строил компании, и как бы он ни хотел, он может не понимать уровень тревоги и ответственности.

Ментор же проходил через ямы и взлеты. Банкротил компании. Входил в личностные кризисы. Ты к нему приходишь, говоришь с ним открыто, он не твой инвестор, не вынет сразу деньги из компании. Еще классно, если у тебя кофаундер, с которым можно так же, как с ментором поговорить.

Пример: ты проснулся, у тебя все везде горит, ситуация — полный отстой. Ты не можешь это сказать коллегам. Иногда можешь рассказать кофаундеру. А ментор может тебе сказать: старик, я такое проходил 30 раз, все будет ок, посиди сегодня дома, это такой момент, он пройдет. Короче, важен вот этот житейский опыт.

Еще важно полное доверие. Эмоциональные вещи происходят постоянно… Например, тебе надо уволить 50 человек. Как это сделать, вообще? Ментор может в этом как-то эмоционально помочь, быть рядом, пока ты через это проходишь.

Я не верю в идею ментора с функциональными навыками — это скорее про эдвайзинг.

Вспомнил пример… Общается как-то раз с чуваком-предпринимателем, он рассказывает, что все в компании классно, рост, перспективы. На следующий день выходит статья, что его компания банкрот. Предпринимателям же нельзя такое говорить в тусовках, или своим инвесторам. Коллеги же уволятся к черту. Не так много людей, с которыми можно поделиться такими вещами. Так что менторство — это полезно.

**Кого ты считаешь своими авторитетами?**

У меня такой подход, что нет авторитетов. Я понимаю, насколько я при своем интеллекте ничего не знаю. Люди с обложкой авторитета хотят что-то продать. Я тоже стараюсь продать некоторый способ мышления, в котором ты замечаешь возможности и позитивные стороны, однако сохраняешь скепсис.

Пример в области ИИ. Бывает, спрашиваешь эксперта с десятилетним стажем какой-то вопрос… Он говорит, что невозможно такую штуку сделать. Через полгода оказывается, что это возможно. У экспертов есть свои biases, они слишком уверены в своей правоте, в своем авторитете..

Мы в Dbrain делаем соревнования среди data scientists. Даем нерешенные задачи в области машинного обучения. Часто видим на первом месте людей без регалий. Пришел человек с beginner mindset, и победил чуваков с десятилетним опытом. Это не системно происходит, но такое очень вероятно.

Полезно прислушиваться ко мнениям умных людей, но у проблем часто меняются контексты, другие вводные, другая предметная область. Все меняется, поэтому интегрируешь это все в свои головы с командой. Дальше классно быть в моменте скромным, новичком, осознавать, что чего-то можешь не знать и смотреть на проблемы взглядом путешественника, разбирая через первые принципы, обучая свою интуицию.

**Имеет ли смысл стартапу из СНГ пробовать попасть в YCombinator или 500 Startups?**

Я не большой спец в плане выхода за границу.

Есть такое мнение, что нехер запускаться в СНГ, надо сразу на большой рынок идти. Знаю истории, когда люди сжигали мосты, продавали квартиру в Москве, переезжали в LA или SF, что-то начинали. Знаю истории, когда построен успешный бизнес в СНГ, основатель переезжает в ЛА и делает бизнес в Америке. Второй способ более удобный. Уже есть валидация, кэшфлоу. Есть мнение, что это невозможно, что ты сильно ограничен контекстом СНГ, но я видел много случаев, когда это работает. Короче, бывает разное.

Акселераторы, наверно, полезны. Особенно если у тебя нет связей, уверенности, продаж на новом рынке. Хороший акселератор дает три вещи:

**1\. Валидация, что ты не пустышка.** Ведь даже если у тебя были экзиты, ты обычно доказываешь в новой стране, что ты не полный профан. Акселераторы дают сигнал рынку, что ты что-то стоишь. Начинают открываться двери. Это экономит энергию, снимает трение.

**2\. Быстрые связи.** Топовые акселераторы настроены давать знакомства и сигналы рынку, которые помогают даже нетворк и сигналы, дает возможность закрыть раунд быстро. Если нет валидированных америк. продаж, получить деньги стартапу не так просто.

**3\. Круг поддержки.** Вокруг тебя люди, которые проходят что-то похожее. У тебя есть менторы, доступ к эдвайзером.

В плане знаний я скептичен. Ты можешь все эти знания найти через лекции в интернете. Не думаю, что знания создают здесь какую-то ценность.

**Ты несколько раз говорил про предпринимательскую тусовку. Зачем нужно строить комьюнити вокруг себя?**

Для меня сообщество, в первую очередь, заменят терапию и менторов. Есть близкие друзья, конечно, но есть и некоторый средний круг, мое сообщество. Это люди, близкие по ценностям, мышлению, фильтру восприятия. Они дают энергию, могут дать пример, они проходили что-то похожее.

Предпринимателю очень важно иметь комьюнити. Большой вклад в успех — это те вещи, которым нигде не учат. Это не функциональные навыки, это личностный рост, развитие психологических навыков.

Предприниматели живут в постоянном стрессе. У большинства — биполярка. Ты маниакально фигачишь, потом неделю не можешь работать. Тебе помогает понимание, что все через это проходят, что ты не один. Уже какое-то принятие: есть такая стадия, это ок, становится проживать. «Всякое бывало». Съел мороженое mochi, посмотрел сериальчик, тебе полегчало — фигачишь дальше.

**Есть предприниматели вроде Маска и Джобса, которыми все восхищаются. Судя по биографиям и рассказам коллег, работать с ними было нереально сложно. Такое ощущение, что у многих успешных предпринимателей психологические особенности, граничащие с расстройством личности. Есть такое?**

Любой предприниматель — это человек с ярко выраженной психологической акцентуацией. Он не такой, как все, и часто социально не очень приятный человек. Тут хочется сказать три вещи.

*   Я часто замечал у знакомых предпринимателей **биполярные стадии.** Либо они были изначально, либо появлялись в процессе. Благодаря этим стадиям ты ввязываешься в проекты, в которые нормальные люди не сунутся. В маниакальной стадии, считая себя богом, ты затеваешь что-то такое, что, потом понимаешь, лучше не начинал бы. Ну, по ходу движения разгребаешь. Это у меня часто бывает. У предпринимателя должна быть высокая терпимость к риску, к непредсказуемости. Не дано путать это со склонностью к риску. Игромания — это про склонность к риску, которая убьет тебя финансово рано или поздно. А предпринимательство — это про терпимость к риску. Не всегда тебе это комфортно, но со временем становится лучше.
*   У моего круга часто встречается **любовь к людям, эмпатия.** Тебе надо чтобы хотя бы у одного из кофаундеров были навыки понимания людей, мотивации, социальной интеграции. Когда у тебя конфетный завод с конвейером, ты можешь дрючить всех по KPI, но если в твоем деле для успеха люди должны разбираться, болеть работой, изобретать и вдохновляться, то обязательно должна быть эмпатия. Это важно и для понимания клиентов, пользователей, коллег, и для создания эмоциональной безопасности в команде.
*   **Создание смыслов.** Когда ты предприниматель, ты в самом начале провайдер смыслов. Все мы в процессе эволюционной адаптации научились очень круто объединяться вместе вокруг историй, чтобы достигать больших целей. В итоге это стало очень важным эволюционным преимуществом и конечно вознаграждается мощным удовольствием. Круто уметь эти смыслы создавать и в них влюбляться. Я недавно смотрел документалку про Ошо Wild Wild Country, он там говорит следующую вещь. В обычной корпорации человек работает работает как пустой сосуд, его ничего не наполняет. Но человек не может быть пустым сосудом, у него должно быть содержание, внутренняя наполненность чем-то. Люди постоянно берут смысл откуда-то: религия та же, семья, работа. Хороший предприниматель помогает его создать.
    

Это такой проверенный «эволюционный интерфейс»: мы склонны объединяться в группы, чтобы куда-то идти. Если смысла нет, ты начинаешь искать его — бегать марафоны, ездить на Iron Man, заводить хобби, ходить по дорогим ресторанам, бесконечно путешествовать. Это дает локальный смысл, у тебя появляется краткосрочная цель. Я уверен, что ни одна успешная компания не может случиться без основателей которые умеют смысла создавать, находить, влюбляться в эти смыслы и своим примером влюблять других. В Shadow Work есть архетип царя (king), который как раз про это. У предпринимателей он обычно акцентирован.

**В последнее время участились разговоры про предпринимательство и ментальное здоровье. Согласно исследованию [Майкла Фримана из UCSF,](https://vc.ru/hr/65474-investoram-i-predprinimatelyam-pora-nachat-reshat-problemu-psihicheskogo-zdorovya-v-startapah) черты характера, свойственные предпринимателям: креативность, экстраверсия, открытость, склонность к риску, — также связаны с биполярной, депрессией, ADHD и злоупотреблением веществами. Что ты можешь сказать на этот счет?**

Предпринимательство — это духовный рост на стероидах. Постоянно себя прересобираешь, куча личностных кризисов. По сути, ты все время тренируешь умение сосуд удержать и не расплескать, не сжечь себя. Многие по дороге срываются. Это как пойти в спортзал и сразу взять большой вес — надорвешься.

Классно, когда есть круг поддержки, как я уже говорил. Для интенсивного пути это очень важно: у тебя бомбит дофамин, ты можешь свалиться в злоупотребление веществами. А когда рядом люди, которые такое проходили, они могут поддержать, сказать: «Начни медитировать, это нормально». Или: «Старайся спать минимум 9 часов, это все фигня, что нужно дохрена работать в ущерб сна. Это не спринт, это марафон». Это все увеличивает выживаемость, и это постепенно тренирует устойчивость твое ментальное кунг-фу.

**Такая группа взаимной поддержки?**

Ага, «Анонимные предприниматели». Главное, чтобы там не оказались одни неудачники — иначе переймешь неправильные подходы. Я шучу: неудач гораздо больше, чем удач, надо научиться по-философски к этому относиться.

Наверно, есть люди, которые генетически предрасположены к предпринимательству. Или родители им заложили толерантность к неизвестности, мышление изобилия, веру в себя. Такие прирожденные предприниматели. Но гораздо больше тех, кто проходит через страдания, адаптируется и меняется.

**Можно ли развить терпимость к риску?**

Тяжело сказать. У меня терпимость к риску была всегда. Терпимость к риску — это комфортное ощущение себя в неопределенности.

Слушал недавно подкаст с каким-то крутым предпринимателем. Его спросили, каких навыков он бы пожелал своим детям. Тот сказал, что в отличие от ста лет назад, человеческая психика сегодня не адаптивна к скорости изменений. Поэтому он бы хотел, чтобы у детей был навык эмоционально не выгорать в условиях неопределенности. Для предпринимателя это ключевой навык.

**Три навыка, которые бы ты пожелал своим детям?**

**1\. Натренированная на непредсказуемость психика.** Все очень быстро меняется, слишком быстро. Мозг эмоционально не готов к такому уровню неизвестности. Любая новая штука вызывает выброс кортизола, стресс. Я бы хотел, чтобы мои дети обладали такой предпринимательской чертой, чтобы продолжали существовать, даже когда прилетает от Вселенной.

**2\. Мышление изобилия.** Это про то, чтобы видеть возможности, излучать уверенность, быть ресурсоемким, получать удовольствие от своего дела, чем бы ни решил заняться.

**3\. Мыслить от первого принципа.** Это про научный подход, когда мыслишь не шаблонами и похожестями. Маск, по-моему, много про это говорил. Не путать с системным подходом, когда учитываешь взаимосвязи между явлениями. Мыслить от первого принципа означает освободиться от всех шаблонов и подойти к проблеме с нуля. Например, начал ты изобретать автомобиль. Начни с нуля. Пойми, что проблема про то, как переместить что-то из точки А в точку Б. Так ты придешь к большому варианту тех решений, у которых нет багажа предыдущего опыта. Когда-то, когда все не так стремительно менялось, ты мог родиться сыном сапожника, узнать у бати про сапоги, и дальше просто применять эти шаблоны всю жизнь с небольшими модификациями. Сейчас так уже не получится, нужно мыслить по-другому.

Еще я бы еще добавил четвертый: научиться **глубоко увлекаться и влюбляться в то что ты делаешь**, в разные идеи и занятия, получать там свой дофаминовый коридор. Наверно, это стоит даже нулевым пунктом поставить .

_Во второй части мы поговорим с Дмитрием о развитии внутренней свободы, курьезах нейробиологии, сочетании интеллекта с интуицией и эмоциями, долгосрочном изменении привычек и гигиене внимания._

_На канале [Ponchik News](https://teleg.one/ponchiknews) выходят не только интервью, но и статьи о продуктовом мышлении, когнитивной психологии и изменении поведения._

**Материал опубликован пользователем.**  
Нажмите кнопку «Написать», чтобы поделиться мнением или рассказать о своём проекте.

[Написать](https://vc.ru/writing)",null,undefined
2014-10-28T22:46:23.000Z,http://lifehacker.ru/2014/10/14/genius/,false,"[""best""]",article,Еще раз перечитал и еще раз твитну. Мужик из категории МЕГА Исповедь гения ,null,pocket,null,"# Исповедь гения эффективности

by [Михаил Притула](http://www.facebook.com/Lifehacker.ru), [lifehacker.ru](http://lifehacker.ru)  
October 14, 2014 07:00 AM

Читайте эксклюзивное интервью Лайфхакера с топ-менеджером «Альфа-Банка» Олегом Брагинским — о том, почему он счастливый человек и как профессионально решает сложные и невозможные бизнес-задачи.

Интервью с топ-менеджером «Альфа-Банка» Олегом Брагинским. Олег о себе:

> Я счастливый человек — моя работа совпадает с хобби! Профессионально решаю сложные и невозможные бизнес-задачи.

[Профайл](https://www.linkedin.com/in/olegbraginsky/ru) впечатляет:

*   Проекты в разных областях и странах, инновации и искусственный интеллект, Big Data и моделирование, программы лояльности и поведенческое прогнозирование.
*   Автор учебников, патентов и изобретений, спикер передовых конференций, владеет несколькими языками, имеет учёные степени и научные звания.

Если полностью прочитать профайл Олега, в голове возникает только одна ассоциация — _гений_.

## Здоровье. Что делаете? Какие инструменты и техники применяете? Какие выводы для себя сделали?

Признаю отжимания, циклические упражнения, плавание. 100 отжиманий на кулаках за 60 секунд делаю на двух первых костяшках, чтобы поддерживать удар в память «общажных» 90-х. Несколько раз делаю «ещё одно отжимание», чтобы мозг не жалел организм. Завершаю отжимания прогибом в поясе, чтобы растянуть спину — много сижу.

Циклическими упражнениями «обнуляю» голову, плаванием очищаю городские лёгкие. 10 бассейнов начинаю и завершаю проныром туда и обратно. Кроме фридайверов, мало кто может повторить. Односторонне соревнуюсь с быстрыми пловцами, даже если уже завершаю цикл, а те только прыгнули в бассейн. Сложно бывает с пловцами в ластах. :(

> Не успокаиваюсь, пока не достигаю превосходства.

Чищу зубы дважды в день, не полощу рот водой, держу пастовую жижу во рту минуту — тренирую задержку дыхания и укрепляю эмаль. В это же время стою поочерёдно на одной ноге в полуприседе. Раз в год посещаю стоматолога для профессиональной чистки и полировки. Пломб нет, все зубы на месте.

Соль и сахар не использую и в доме не держу. В рестораны хожу к поварам, которых знаю, заказываю не по меню, а по рекомендациям: шеф знает происхождение и свежесть продуктов, сочетаемость блюд и таланты смены на кухне. Проверяю срок годности и состав продуктов при покупках.

Не пью, не курю.

Воспринимаю лифт как личного врага.

## Планирование. Как управляете своим временем и планируете его?

Календарь ведёт помощник, который знает основные правила и играет первую скрипку. Со мной не нужно договариваться о встрече — за них отвечает профессионал, который поставит события в план, сгруппирует территориальность, позаботится о такси, гостинице, билетах. Вижу и исполняю готовый календарь. Как и все, прошу назначить встречу с клиентами, время на совещания и даже личные дела. Получаю сообщения по [WhatsApp](https://lifehacker.ru/2014/09/17/10-ulovok-whatsapp/ ""10 полезных советов для пользователей WhatsApp""): марка и номер машины, имя и телефон водителя, конечная точка и цель поездки.

Выучился контраварийному вождению, избегаю нахождения за рулём. На заднем сидении можно работать и отдыхать.

Максимум встреч провожу в кабинете. Повесил проектор, экран, доску. Использую четыре видеокамеры разных систем удалённого общения. Работаю в многопользовательском режиме с электронными документами. Печатаю другим — сам бумагу не использую. На рабочем месте широколистные растения.

**Быстро читаю и набираю на клавиатуре вслепую.** Знаю QWERTY, чтобы работать на стандартных клавиатурах со скоростью от 450 символов в минуту, и раскладку Дворака для работы до 550 ударов за 60 секунд. Дома сам перебираю клавиатуры компьютеров и ноутбуков в «Двораков».

Набирать учился на «Соло 3.0», коллегам рекомендую [Stamina](https://lifehacker.ru/2007/12/20/stamina-25-uchimsya-nabirat-vslepuyu/ ""Stamina 2.5 — учимся набирать “вслепую”"") — ошибок при наборе будет чуть больше, и научиться можно не за две недели, а за одну. Чтению учился на [ICE Book Reader](https://lifehacker.ru/2013/04/16/firefox-to-ice-book-reader/ ""Как добавить статьи из Firefox в читалку Ice Book Reader"").

Оба навыка позволяют молниеносно отвечать на почту, не напрягаться при написании писем, докладов и презентаций. На письма отвечаю быстро. Часть переношу в папки «Сохранить», «Сделать позже», «Помощь друга». Настроил правила автоматической сортировки по множеству почтовых папок.

Технику использую парами: ноутбуки — сверхлёгкий и сверхмощный — носить и считать, мониторы 30” — не переключаться между окнами, данные в рабочем компьютере на «зеркалах», файлы на флешках разных типов. К iPad ношу переходники VGA и HDMI, чтобы у клиентов подключаться к проекторам.

> Не смотрю телевизор, не читаю прессу, не слушаю радио и музыку.

Фильмы смотрю с 200-процентным ускорением по рекомендации друзей, они же мне помогают понять фразы из сериалов, разъясняют, что «дядька крутой, потому что…». Для привыкания к ускоренному просмотру месяц использовал VLC при ежедневном инкременте в 3%. Стало скучно в кинотеатрах, стараюсь ходить на 3D.

Вечерами читаю по полкниги. У «Альфа-Банка» прекрасная деловая библиотека для гаджетов и подписка на [GetAbstract](http://www.getabstract.com/ru/). Читаю по рекомендации и подряд — в переговорах и беседах пригождаются знания из разных областей. С гуглом тягаться сложно, но в бане, в дайверской лодке легко блеснуть эрудицией.

Откликаюсь на просьбу провести обучение или выступить перед аудиторией. От меня не убудет, а ответы на вопросы прекрасно организуют мысли и держат реакцию в тонусе.

Докладами на конференциях и саммитах экономлю время. Так ходил и собирал бы визитки с городскими телефонами, гоняясь за нужными людьми. А тут выступил и при сходе со сцены собрал визитки с мобильными телефонами за минуту. Со второго приглашения на ежегодные мероприятия соглашаюсь быть первым-вторым спикером дня начала или находиться в президиуме. Вижу зал, доступен микрофон, аудитория запоминает лучше.

Приходя к клиентам, слышу: «Я вас слышал / видел / читал там-то, вы эксперт № 1 в лояльности / процессах / безопасности / big data / инновациях / технологиях / HR». Встреча проходит быстрее, продуктивнее и доброжелательнее благодаря методичной работе над собственным брендом.

> Стремлюсь быть лучшим. Не в Банке, не в индустрии, не в стране, а… в мире.

Некоторые проекты и публикации заношу в **LinkedIn**. Хотите обо мне узнать — гуглите или читайте профиль. Сам поступаю так же. Удивляюсь, когда вижу профиль из 50 слов с формальным последним местом работы и вузом. Зачем заводить пустой профиль, уж лучше тогда совсем без него.

Владею скорописью. Преимущество не только в скорости — записи почти не прочесть, поэтому пишу то, что думаю. Формирую себе поручения, чтобы не держать в голове, вычёркиваю сделанное. Что не успел, переношу на следующий лист с пометкой 1, то есть день отсрочки задача пережила спокойно. Если переносов [больше трёх](https://lifehacker.ru/2013/10/09/pravilo-1-3-5-spisok-del/ ""Правило 1-3-5 для списка дел: как сделать больше?""), то не записываю задачу на следующий день — вероятно, вообще можно не делать.

**Презентации** делаю сам, при этом соблюдаю правила:

1.  Презентация — как ребёнок, сделал и далее она живёт самостоятельной жизнью, поэтому мне должно быть не стыдно при «встрече с ребёнком» через пару лет.
2.  Минимальное количество шрифтов, стилей и выравнивание элементов в два знака после запятой. Если попадётся большой экран, при перелистывании слайдов не должно быть видно небрежности.
3.  Если выступление бесплатное, не социальное и не благотворительное, не оставляю организаторам мероприятия презентацию и готовлюсь значительно сильнее, чтобы потом делегаты требовали мои материалы, а организаторы искали со мной встречи, от чего можно получить преференции.

Слежу, где и какие слайды показывал — это позволяет выступать чаще и готовиться реже, повторно используя до 40% страниц несколько раз. Прогоняю доклады вслух дважды: вечером перед сном и как проснусь. Готовлю презентации с темпом 20 секунд на слайд, написанный текст перефразирую — при такой скорости и двух сюжетных линиях аудитория слушает на едином вдохе.

Дотошно использую знаки препинания, презираю двойные пробелы, огорчаюсь избеганию «ё». Стараюсь не использовать скобки, ведь в них заключается второстепенный текст, значит, можно обойтись.

**Письмо, документ, фрагмент, абзац читаю трижды.** Первый — проверяю, понятно ли написал; второй — упрощаю фразы и удаляю лишние слова; третий — проверяю, тактичен ли. Использую частицу «бы»: «просил бы» вместо «прошу» и «хотел бы» вместо «хочу». Когда уместно, говорю и пишу «спасибо».

В ответственных текстах использую частотный анализ, «плечи» и проверку на банальность. Частотным анализом выявляю избыточные слова — заставляет перефразировать, использовать синонимы. Не допускаю «плеч» — расстояние в словах между понятием в тексте — длиннее пяти. Банальность — собственная формула, основанная на встречаемости слов абзаца. Если показатель близок к единице — написал уникальными словами, превышает тройку — абзац следует удалять, смысл текста не изменится.

Использую систему именования файлов: _Тип\_Заказчик\_Исполнитель\_Проект\_Дата в японском формате\_Время с округлением в будущее к 15 минутам_. В документах легко разберётся помощник и команда. Резервные копии делаю ежечасно и при каждом «подходе» к файлу. Храню в WinRar с паролем и информацией для восстановления. Спасало не раз.

Устраняю из речи и текста слова-паразиты, **принципиально не матерюсь**, избегаю слов: «но», «это», «значит», «каждый», «всякий», «любой», «очень», «только» и других, выражающих личное впечатление или категоричность. Использую «Орфо» в дополнение к проверкам Word, слежу за показателями удобочитаемости.

## Финансы. Как управляете ими? Три главных ваших правила в финансах?

Держу деньги в долларах, за 20 лет ни разу не пожалел.

Не пользуюсь кредитами и не даю в долг.

Если что-то нужно, стараюсь найти профессиональное, стильное, крутое. Торгуюсь.

Плачу за каждую услугу, чтобы не быть должным и иметь моральное право ожидать такого же отношения от других.

Веду «казначейство» в Excel, зарплату трачу на семью, доходы — на роскошь и отдых.

Коллекционирую скидочные карты максимальных номиналов.

Проверяю чеки в магазинах и ресторанах.

## Отношения. Ваши секреты общения со второй половиной?

Мужчины борются за будущее, женщины — за сегодня. С готовностью проигрываю «конфликты на месте и в моменте». Прихожу мириться первым: какая разница, кто виноват, если мыслить десятилетиями. Раз в квартал способен выдержать шопинговый марафон.

## Воспитание ребёнка. Ваши личные лайфхаки?

Разведу [костёр](https://lifehacker.ru/2014/09/09/10-sposobov-razzhech-ogon/ ""10 необычных способов разжечь огонь"") под дождём без спичек, проведу по большинству карт, шнурки завяжу рифовым бантом, чтобы не развязывались, или 100 разных узлов за 60 секунд, накормлю в автономном походе без рюкзаков, знаю сотни мифов, сказок и анекдотов, но… не являюсь показательным отцом.

## Карьера. Что вам помогает быть успешным?

Стремлюсь быть лучшим. Не в Банке, не в индустрии, не в стране, а… в мире.

Например, в LinkedIn соревнуюсь за поисковые просмотры с людьми из Forbes, Most Connected; автоматически наиболее просматриваем в своей организации.

Общаюсь с владельцами, первыми лицами, владельцами бюджетов. Не использую манипулятивные приёмы типа отзеркаливания: собеседники читают те же книги.

Предпочитаю костюмы-тройки, не поддерживаю «джинс дей». Провожу встречи и совещания без гаджетов, время планирования делю на 30-минутные слоты.

Помню о виражах корпоративной жизни: сегодня с кем-то не поздоровался, а завтра этот человек решает мой вопрос. Помогаю вне зависимости от грейда. Применяю бартер — оказываю услуги за бюджет или ресурс.

> Стараюсь не очаровываться людьми, чтобы потом не разочаровываться в них.

Берусь за безнадёжные, невозможные, просроченные задачи и проекты. Конкуренции нет, если сделал — заслуги никто не оспаривает. Еженедельно делаю несколько слайдов презентаций, чтобы от проектов оставались следы.

Отслеживаю среднюю длительность просмотра роликов с моими выступлениями и лекциями в Интернете. Стараюсь понять, почему люди теряют интерес через четыре минуты просмотра. Виртуально соревнуюсь с «Камеди» — их ролики смотрят в среднем минут пять.

Сделать карьеру проще, если на работу ездить с водителем или ходить пешком, чтобы не тратить время на дорогу. **При каждой возможности ем или сплю.** В рабочее время стараюсь не обедать один.

Сторонник горизонтальной карьеры — сменил несколько стран, поработал в 13 подразделениях Банка.

Личные вопросы имеют приоритет над рабочими, решаю их сразу. Пока думаешь о семье, сложно искренне заботиться о клиентах.

## Отдых. Что интересного делаете при организации, планировании и проведении отдыха?

Проектами и отдыхом хочу гордиться, важна причина: сеноты фильма «Санктум», пещера «Бэтмена», места съёмки «Джеймса Бонда», пляж с наиболее белым / розовым / чёрным песком, старейшая гостиница на планете, точка минимальных температур, эндемичные бабочки.

Около 20 лет отдых мне организует одна и та же фирма, всем её рекомендую. Использую консьерж-сервис «Квинтесеншиал». Зачем думать о билетах или номерах. Специалисты возьмут на себя задержки или отмены рейсов, замену номеров и машин — еду тратить, а не экономить.

## Дом. Что интересного можете рассказать о нём?

Покупал под ключ: заплатил утром, а вечером после работы приехал жить. Не готов тратить время на ремонт, торговлю, проверку качества работ, переделки. Дизайн индивидуальный, победитель номинаций.

## Развитие. Как вы развиваетесь? Откуда и как берёте новую информацию? Где вдохновение?

Стремлюсь выучить по сотне полезных фраз на разных языках. Ежедневно учу несколько английских слов в LinguaLeo. Шлифую знания этикета и национальных традиций. Идеи черпаю в смежных областях. Услышал слово. Поймал мысль. Заметил поведение. Наблюдал поступок.

> Вдохновение черпаю из предвкушения побед.

Люблю удивлять, стремлюсь делать волшебство.

## Философия. Ваши жизненные принципы. Во что верите? Какие жизненные законы используете?

Хочу делать значимые вещи. Верю, что нужно менять мир. Доверяю. Влияю. Учусь.

## Дерзкие цели до конца жизни?

Посетить все страны. Многие объездил, но последние лет десять сплошные повторы. Пронырял цветные моря, побывал на топовых пляжах, островах, в гостиницах. Был на большинстве широт и меридианов.

Посетить горы-восмитысячники. Пока пять, и не выше 5 километров.

Пообщаться с владельцами 10+ миллиардов. Пока одиннадцать, и идёт туго.

Получить Нобелевскую премию.

Основать университет.",null,undefined
2018-12-09T16:32:58.000Z,https://vc.ru/life/20628-how-to-recharge,false,"[""productivity"",""best""]",article,Как не прокрастинировать и вовремя перезаряжаться с точки зрения физиологии,null,pocket,null,"# Как не прокрастинировать и вовремя перезаряжаться с точки зрения физиологии

by [Konstantin Panphilov](https://www.facebook.com/SMMrussia/), [vc.ru](http://vc.ru)  
December 12, 2016 06:47 AM

Коммерческий писатель Тимур Зарудный опубликовал в своём блоге [заметку](http://www.niceandeasy.me/daily/prefrontal-cortex) о том, как стоит отвлекаться от работы, чтобы одолеть прокрастинацию и восстановить энергию. Редакция vc.ru публикует материал с разрешения автора.

Редактор Сергей Король [написал](http://sergeykorol.ru/blog/work-and-life-balance/) о своем способе борьбы с прокрастинацией, а я считаю, что читать соцсети в телефоне — такая же ерунда, как читать их на компьютере. Объясню.

В отличие от хронического неумения сосредоточиться на важном, регулярно отвлекаться от интересной работы на хрень — это нормально, потому что уставшей префронтальной коре нужен отдых. Вопрос в том, как перезаряжаться.

## Что за кора

Префронтальная кора — передняя часть лобных долей коры больших полушарий головного мозга. Она обрабатывает абстрактные понятия, ставит цели, ищет варианты поведения и подавляет автоматические реакции лимбической системы, которая про «бей или беги».

Это благодаря ей мы не бежим за подхватившим наши чемоданы таксистом, потому что надо скорее, а тормозим его и спрашиваем цену. Благодаря ей же не бьем обидчика сразу в лицо, а держим себя в руках и дискутируем.

У префронтальной коры есть ресурс и он ограничен. Он истощается, когда мы слишком много решаем и сильно концентрируемся на чем-то одном. Чем больше решений: что съесть на обед, что надеть на вечерний прием, как именно [разделать](http://maximilyahov.ru/blog/all/tinkoff-bootcamp-4/) тушу реальности в этот раз — тем сложнее контролировать свои реакции.

Если ситуация экстренная и уровень мотивации зашкаливает: пожар, заказчик брызжет слюной, уходит поезд — это другая история: концентрация сильнее, но и откат бьет не слабо. Но об этом в другой раз.

## Как работает в обычной жизни

В привычном режиме мозгу тяжело концентрировать внимание на одной задаче без перерывов — ресурс истощается за 30–40 минут. А истощился — начинаем тупить и саботировать работу: отвлекаемся на соцсети и веселуху. За этим есть всплеск дофамина, потому что соцсети и видосы — это приятно. Но хоть дофамин и подпитывает нейроны префронтальной коры, это как заправлять BMW седьмой серии 76 бензином — продержишься, но недолго.

Отвлечение на соцсети — плохой отдых, потому что мозг толком не расслабляется — ты все так же сидишь за столом и нагружаешь те же отделы мозга. А выброс дофамина сбивает работу системы вознаграждения: с каждым разом концентрироваться становится сложнее, хочется чаще отвлекаться.

Отвлечься на соцсети в телефоне и правда сложнее, чем переключить вкладку, но это желание — всего лишь сигнал об усталости, странно с ним бороться — лучше отдохнуть и перезарядиться.

## Как перезаряжаться

**1\. Чередовать отдых с работой по контрасту.** Артем Горбунов называет это [принципом динамизации](http://artgorbunov.ru/bb/soviet/20160411/), Серёга Шабалин — принципом маятника, даосы — великим пределом.

Озарение часто приходит в неожиданно и не на работе, потому что мы перестаем давить на уставший мозг.

Чем еще заняться в пятиминутках, чтобы разгрузить мозг и не смущать соседей по офису:

*   принесите теннисный мячик и кидайте его в стену;
*   или три — жонглируйте;
*   пересядьте в кресло, включите плеер, закройте глаза;
*   смотрите в окно, фокусируйтесь в начале на ближних объектах, потом на дальних — это хорошая гимнастика для глаз;
*   походите по офису, побегайте по лестничным пролетам;
*   считайте вдохи и выдохи;
*   если смелый — вкрутите турник и подтягивайтесь;
*   делайте [самомассаж](https://www.youtube.com/watch?v=Osxq00ZMBqE);
*   [заваривайте](http://www.furfur.me/furfur/culture/culture/161476-chaynyy-pyanitsa-putevoditel-po-dahunpao) листовой чай по китайской науке;
*   в длительных перерывах гуляйте, выстраивая маршрут по самому тихому направлению: где тише всего, туда и идите.

Напишите на [timo@niceandeasy.me](mailto:timo@niceandeasy.me), как отдыхаете в перерывах.

**2\. Работать по режиму,** потому что поддерживать ритм проще, чем жить в хаосе — всё во вселенной подчинено ритму. О режиме хорошо [написал](http://shabalinsergey.ru/all/rezhim-dnya/) Серёга Шабалин, не буду повторяться.

**3\. Менять окружение и тип задач.** Префронтальная кора остается в тонусе, если добавлять в рабочий процесс новизну. На новое мозг реагирует всегда, потому что это важно для выживания: не успел сориентироваться — пока. Меняйте обстановку и тип задач — это стимулирует активность нейронов префронтальной коры.

Новизна в обстановке:

*   работал лицом к стене → передвинься лицом к окну;
*   работал сидя → поработай стоя;
*   до обеда работал дома → после — в офисе.

Новизна по типу задач:

*   писал черновик → исправляй ошибки, правь заголовки;
*   исправил ошибки и заголовки → ищи иллюстрации;
*   искал иллюстрации → собирай скелет статьи.

Как часто — точно не знаю, исследований не нашел, по моим наблюдениям — раз в 2–3 часа. Это завязано на психологическое состояние, лунную фазу, интересность и важность задачи и еще тысячу параметров. Поэтому совет такой: устал — отдохни, не прет после отдыха — смени тип задачи.

## Для ленивых

*   Отдыхай контрастно работе, работай контрастно отдыху.
*   Выстрой рабочий режим.
*   Каждые три часа меняй обстановку и тип задач.

[#золотойфонд](https://vc.ru/tag/%D0%B7%D0%BE%D0%BB%D0%BE%D1%82%D0%BE%D0%B9%D1%84%D0%BE%D0%BD%D0%B4) [#офлайн](https://vc.ru/tag/%D0%BE%D1%84%D0%BB%D0%B0%D0%B9%D0%BD)",null,undefined
2016-02-19T09:53:48.000Z,http://blog.mann-ivanov-ferber.ru/2016/02/18/kak-rasstavlyat-prioritety-i-spravlyatsya-so-vsemi-delami-vovremya,false,"[""best""]",article,Как определять приоритеты и справляться со всеми делами вовремя,null,pocket,null,"# Как определять приоритеты и справляться со всеми делами вовремя

[blog.mann-ivanov-ferber.ru](http://blog.mann-ivanov-ferber.ru)

Автор книги [«На пределе»](http://www.mann-ivanov-ferber.ru/books/na-predele/) Эрик Бертран Ларссен рассказывает, как правильно распределять время — 24 часа в день, 168 часов в неделю и 8736 часов в год, — чтобы извлекать из него максимум пользы.

## Недостатки или привычки?

Часто люди называют в числе худших своих черт такие особенности, как неспособность довести начатое дело до конца, лечь спать пораньше, выделить время на важные дела, вовремя прийти на встречу, организовать свой рабочий день.

*   Я такой рассеянный.
*   Я такой забывчивый.
*   Я вечно опаздываю.
*   Я такой неаккуратный.
*   Мне трудно правильно расставлять приоритеты.
*   Я неисправимый тупица.
*   У меня слишком много дел.
*   Я ничего не могу контролировать.
*   Я не знаю, с чего начать.

Это весьма распространенные проблемы — что довольно грустно. Еще более грустно, что многие считают, будто это врожденные свойства, некоторая предопределенность, с которой ничего нельзя поделать. Люди думают, что они должны жить со своими недостатками. Конечно, все совсем не так. И тайм-менеджмент в первую очередь призван работать с тем, о чем вы уже хорошо знаете, — с привычками.

## Что такое тайм-менеджмент?

Есть люди, которые посвящают свое время созданию промышленных империй, достижению высот в спорте, обустройству дома или помощи другим. А есть те, кто тратит его на поиск оправданий. На самом деле любой человек способен лучше распределять свое время при помощи незамысловатых принципов и рутинных действий.

С чисто технической и практической точки зрения тайм-менеджмент не слишком сложная штука. Но он требует перемен в поведении. Загвоздка в том, чтобы начать действовать. Создать новую привычку. Трудности управления временем связаны не с планированием насыщенного дня. Трудности — у вас в голове.

## Как взять себя в руки

Давайте примем за отправную точку тот факт, что вы чувствуете, как рабочие задачи смыкаются вокруг вас плотным кольцом. У вас столько дел в самых разных областях, что вы в них теряетесь. Вы не знаете, что именно должны сделать, когда начать, как закончить и сколько времени все это займет. Если вы испытываете стресс, это практически всегда связано с отсутствием ясной картины перед глазами.

[Источник](http://blog.mann-ivanov-ferber.ru/2016/02/18/kak-rasstavlyat-prioritety-i-spravlyatsya-so-vsemi-delami-vovremya/cherkasy-city.com/fullnews/198566)

Большинство людей просто смиряются с подобным положением вещей. А что нужно сделать? Остановитесь! Физически прекратите делать то, что делали. Перестаньте читать, писать электронное письмо и так далее. Если продолжать тащиться по той же дороге, последствия будут разрушительными. Обратите внимание на трудности здесь и сейчас.

> Представьте, как во время прогулки вы чувствуете, что на пятке образуется мозоль. Всегда имеет смысл заняться этой проблемой немедленно. Вам придется перестать двигаться вперед, снять и снова надеть рюкзак, найти где присесть, пошарить в сумке, потом повозиться с пластырем. Это так утомительно. Но в долгосрочной перспективе вам предстоит насладиться прогулкой, лишенной боли, — и вы сможете идти быстрее.

Сядьте и оцените ситуацию. Успокоившись и посмотрев на происходящее со стороны, вы поймете: достичь поставленных задач куда легче, чем вам казалось. Достаньте листок бумаги, запишите все, что должны, что хотите и что можете сделать. Прямо сейчас! Большие дела и мизерные. В ближайшем будущем и в отдаленном. Все они без исключения должны оказаться на бумаге. Уже сам этот процесс поможет вам расслабиться. Закончив, откройте календарь и распределите задачи по дням.

## Главные цели

Расставлять приоритеты, определять, что и когда делать, концентрироваться и составлять содержательный план легче, если знаешь, куда идешь. Вот почему цели так важны. Руководствуясь четкими целями, вы упрощаете процесс принятия решений и планирования времени, делая его более прозрачным и вдохновляющим.

Включите в план на год все поворотные моменты, значимые задачи и цели. Запишите те виды деятельности, которые уже у вас под контролем. Зафиксируйте даты, важные для вас и в личном, и в профессиональном плане. Подумайте о своих ценностях и решите, что еще стоит запланировать: встречи с друзьями, длинные выходные с детьми, праздники, сюрприз для любимого человека в виде путешествия в Париж.

> Всегда держите в уме свои мечты, ценности и ви´дение будущего — распланируйте год так, чтобы они проявились максимально ярко. В план на год стоит заглядывать минимум раз в месяц — дополнять его, вносить изменения и вспоминать, к чему вы стремитесь в этом году.

## Задачи на день

Каждый день составляйте список задач и выделяйте пять самых важных. В первую очередь закончите эти дела, так как после этого остаток дня проходит гораздо легче. Людям, конечно, свойственно делать все наоборот: откладывать самое трудное на потом, чтобы весь день оно висело дамокловым мечом над головой. Оставляя такие дела на последний момент, вы включаете защитные механизмы, а взамен обретаете чувство беспокойства.

Записывайте время, в течение которого должны заниматься той или иной задачей. Если это телефонные звонки, выделите период, например с двенадцати до двух, чтобы обзвонить всех, кого нужно. Время вышло — со звонками покончено. То же касается и электронной почты. 

Если вы не успеваете закончить дело сегодня, зафиксируйте его в списке и учтите при составлении плана на следующий день. С некоторыми задачами вы справитесь сегодня, другие распределите в течение недели или месяца. 

Выполняйте одну задачу за раз. Фокусируйтесь. В наше время часто говорят о многозадачности, то есть о том, чтобы одновременно заниматься несколькими делами. Но невозможно думать о двух вещах сразу. Человеку свойственно концентрироваться только на одном деле. Тот, кто определяет, на чем ему стоит сосредоточиться в течение ближайшего часа, лучше справляется с делами, чем тот, кто совмещает их с электронной почтой, звонками и другими отвлекающими факторами.

По материалам книги [«На пределе»](http://www.mann-ivanov-ferber.ru/books/na-predele/).

_P.S.: Подписывайтесь на нашу __[рассылку](http://mann-ivanov-ferber.us1.list-manage.com/subscribe?u=b61fa5e90ab395b473bda3d20&id=742d878a0b)__. Раз в две недели будем присылать 10 самых интересных и полезных материалов из блога МИФ._",null,undefined
2015-09-14T14:25:31.000Z,https://coffeemap.ru/,false,"[""best""]",article,http://coffeemap.ru,null,pocket,null,"# Кофейная карта Москвы

[coffeemap.ru](http://coffeemap.ru)

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

[Команда +1  
представляет](http://teamplusone.ru)

**Кофейная карта Москвы** – это удобный гид по лучшим спешелти-кофейням города. В столице работает более 2500 кофеен, но знаете ли вы, где рядом с вами готовят действительно хороший кофе? На сайте и в приложении для iOS «Кофейная карта» собраны те, кто отвечает нашим критериям и протестирован нами лично. Приложение для Android находится  в разработке, а пока можно использовать мобильную версию сайта [coffeemap.ru](http://coffeemap.ru).

#### Наши критерии:

*   Кофейное зерно класса спешелти, обжаренное в России.
*   Профессиональные бариста.
*   Современное кофейное оборудование и/или альтернативные методы заваривания.
*   Система водоочистки воды.
*   Оценка вкуса напитков: эспрессо, молочный напиток (капучино или флэт уайт), альтернатива. Все кофейни мы посещаем и тестируем лично. 

Кофейная карта Москвы появилась осенью 2015 года и стала первым независимым кофейным гидом столицы. Тогда мы протестировали, описали и нанесли на карту сорок одну точку, в которых вы гарантированно могли получить вкусный кофе. Обновление гида мы готовили более двух лет — в результате перманентной кофейной революции количество резидентов нашей карты уже превысило четыре сотни.

Авторы текстов

Владимир Раевский, Мария Касицына, Вика Конюхова и Денис Каргаев

Дизайн

Иван Корниенко

Арт-директор онлайн-версии

Лев Эйдинов

Разработчик приложения для iOS

Рустам Мотыгулин

Дизайнер приложения для iOS

Дамир Тимербаев

Кураторы проекта

Вика Конюхова и Мария Касицына

Авторы идеи

Денис Каргаев, Юрий Ляндау и Месроп Довтян

Вы работаете на обжаренном в России зерне, у вас профессиональное оборудование, классные бариста, а вашей кофейни нет на нашей карте? Скорее заполните [анкету для новых кофеен](https://forms.gle/5GFGajRPYmup7Nem8).

Связаться с нами: [feedback@coffeemap.ru](mailto:feedback@coffeemap.ru)

Facebook: [Кофейная карта Москвы](https://www.facebook.com/coffeemap.ru/)

Instagram: [@coffeemapmoscow](https://www.instagram.com/coffeemapmoscow/)

[Карта](https://coffeemap.ru/#)",null,undefined
2015-07-05T10:03:23.000Z,http://fit4brain.com/8826,false,"[""best""]",article,http://fit4brain.com/8826,null,pocket,null,"# Лайфхак столетия: как вставить одеяло в пододеяльник за 60 секунд

[fit4brain.com](http://fit4brain.com) | June 10, 2015 02:13 PM

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

Вот гениальный способ беспроблемно и быстро вставить одеяло в пододеяльник. Оказывается, я всю жизнь делал это неправильно!",null,undefined
2016-01-14T18:06:11.000Z,https://antilamer.livejournal.com/424332.html,false,"[""best""]",article,Ликбез о гомосексуальности: antilamer,null,pocket,null,"# Ликбез о гомосексуальности

[antilamer.livejournal.com](http://antilamer.livejournal.com) | June 8, 2010

Копипаста из моих интернет-баталий в нескольких местах этих ваших интернетов.  
Прошу перепоста у тех, кто считает, что сей пост распространяет достоверную информацию, и что неплохо бы, чтобы бОльше людей были с ней знакомы.

**Ты чё, педик?**  
Нет, я женат. Но даже если бы и был, это бы никак не повлияло на истинность исследований, на которые я ссылаюсь. Именно поэтому я в основном ссылаюсь на исследования, а не апеллирую к эмоциям - чтобы поставить в равное положение предвзятых людей с обоих сторон (каждый в какую-нибудь сторону да предвзят). Если с исследованиями что-то не в порядке - сформулируйте, обсудим.

**А чё тогда педиков защищаешь?**  
Ненависть к людям нетрадиционной ориентации - один из немногих оставшихся случаев немотивированной ненависти к каким-либо социальным группам в нашем обществе. Ненависть к людям другого цвета кожи более или менее победили, ненависть к евреям тоже, попытки перевоспитать левшей тоже, осталось теперь победить ненависть к людям нетрадиционной ориентации. Я хочу жить в обществе, где людей судят только по тем их поступкам, которые влияют на других, а не по тому, какой рукой они едят суп или какого пола человек, в которого они влюблены. Это мой вклад в создание такого общества.

**Да этих гомосексуалистов 0.1%, кому они нужны! - Нет, гораздо больше - несколько процентов**  
Например, в Америке около 3.5%. Где-то меньше (но вроде бы нигде менее 1%), где-то больше (в Сан-Франциско, например, 15%). Это ОЧЕНЬ много - например, в России примерно столько же чиновников или студентов.  
[http://www.cdc.gov/nchs/data/nhsr/nhsr036.pdf](http://www.cdc.gov/nchs/data/nhsr/nhsr036.pdf) — документ от минздрава США. Тут подробнейшим образом описана методика опросов, конкретные заданные вопросы и результаты.  
На странице 28 сводная таблица по опрошенным лицам 18-44 лет.  
На странице 2 описана методика набора респондентов; я не буду сюда перепечатывать. Кратко — отбирали случайные штаты (сначала крупные), там случайные города, случайные адреса; по адресу приходил интервьюер, выбирал одного любого человека соответствующего возраста, и интервьюировал его. Так набрали около 13тыс.чел.  
Совсем уж неприлично подробное описание методики опросов есть в документе [http://www.cdc.gov/nchs/data/series/sr\_01/sr01\_048.pdf](http://www.cdc.gov/nchs/data/series/sr_01/sr01_048.pdf) .

**Гомосексуальность это психическое заболевание! - Нет, специалисты по психическим заболеваниям считают, что это вариант нормы**  
Письмо американской психологической ассоциации в верховный суд штата Калифорния. [http://www.courts.ca.gov/documents/Amer\_Psychological\_Assn\_Amicus\_Curiae\_Brief.pdf](http://www.courts.ca.gov/documents/Amer_Psychological_Assn_Amicus_Curiae_Brief.pdf) — там есть ""история вопроса"" — от 1952 года, когда АПА включила гомосексуальность в список болезней, до 1975, когда исключила, так и не найдя за 20 лет убедительных доказательств ""болезненности"", а найдя лишь опровержения этого. Есть ссылки на первоисточники — исследования, разбиравшие те или иные аспекты жизни гомосексуалистов, и не нашедшие никаких психологических различий между людьми разной ориентации, кроме самой ориентации.

**В результате пропаганды гомосексуалистами станут гораздо больше людей! - 1) ну и что? 2) нет, не станут**  
Во-первых, ""вы так говорите, как будто это что-то плохое"". Даже если бы это было правдой, см. выше - это не плохое, а нормальное. Также см.ниже, рождаемости все равно ничто не угрожает.

Во-вторых, нельзя стать гомосексуалистом в результате чьей-то пропаганды - человек не выбирает себе ориентацию. [http://www.apa.org/about/offices/ogc/amicus/pool.pdf](http://www.apa.org/about/offices/ogc/amicus/pool.pdf) — еще один документ на ту же тему, искать по слову ""homosexual"". Тут также разбираются 1) социальные и психологические отличия гомо от гетеро (их нету, кроме ориентации) 2) механизм формирования ориентации (формируется от раннего детства до ранней юности, в основном задолго ДО первых сексуальных контактов, практически никогда не является сознательным выбором).

**Кем вырастут дети в однополых семьях? - Тем же, кем и в двуполых**  
[http://answers.google.com/answers/threadview/id/281279.html](http://answers.google.com/answers/threadview/id/281279.html) (полная версия, огромный PDF с аннотированной библиографией: [http://www.apa.org/pi/lgbt/resources/parenting-full.pdf](http://www.apa.org/pi/lgbt/resources/parenting-full.pdf) )  
[http://www.reddit.com/r/AskReddit/comments/d8jmk/do\_we\_have\_adult\_redditors\_who\_were\_raised\_by\_a/](http://www.reddit.com/r/AskReddit/comments/d8jmk/do_we_have_adult_redditors_who_were_raised_by_a/)  
[http://www.aacap.org/cs/root/facts\_for\_families/children\_with\_lesbian\_gay\_bisexual\_and\_transgender\_parents](http://www.aacap.org/cs/root/facts_for_families/children_with_lesbian_gay_bisexual_and_transgender_parents)

См. также [http://antilamer.livejournal.com/443190.html](http://antilamer.livejournal.com/443190.html) - пост с коллекцией ссылок на ""интервью"" детей однополых пар.

**Если легализовать однополые браки, то упадет рождаемость! - Нет, не упадёт**  
[http://en.wikipedia.org/wiki/Demographics\_of\_the\_Netherlands](http://en.wikipedia.org/wiki/Demographics_of_the_Netherlands) - см. Birth rate; рождаемость неуклонно снижается, однако никакого видимого эффекта от легализации однополых браков нету.  
То же самое у Швейцарии в 2007 [http://en.wikipedia.org/wiki/Demographics\_of\_Switzerland#Vital\_statistics\_since\_1900](http://en.wikipedia.org/wiki/Demographics_of_Switzerland#Vital_statistics_since_1900)  
То же самое у Норвегии в 2009 [http://www.indexmundi.com/g/g.aspx?c=no&v=25](http://www.indexmundi.com/g/g.aspx?c=no&v=25)  
Бельгия, 2003 - РОСТ рождаемости [http://www.indexmundi.com/g/g.aspx?c=be&v=25](http://www.indexmundi.com/g/g.aspx?c=be&v=25)  
Канада, 2001 - никакого эффекта [http://www.indexmundi.com/g/g.aspx?c=ca&v=25](http://www.indexmundi.com/g/g.aspx?c=ca&v=25)  
Испания, 2005 - никакого эффекта, затем рост [http://www.indexmundi.com/g/g.aspx?c=sp&v=25](http://www.indexmundi.com/g/g.aspx?c=sp&v=25)

Кстати, в большинстве этих стран рождаемость больше, чем в России. В целом, в Европе даже корреляции между разрешённостью однополых браков и рождаемостью практически нет.

**Если легализовать однополые браки, то падут общественные устои, а люди начнут жениться на хомяках! - Нет, не падут, нет, не начнут**  
Опыт стран, легализовавших однополые браки, показывает, что эти опасения не подтверждаются.  
[http://www.reddit.com/r/atheism/comments/pw2se/same\_sex\_marriage\_destroys\_the\_economy\_waitwut/c3ss6z7](http://www.reddit.com/r/atheism/comments/pw2se/same_sex_marriage_destroys_the_economy_waitwut/c3ss6z7) - насчёт Массачусетса, например

**Из-за гомосексуалистов в мире эпидемия СПИДа!**  
1) Гомосексуалисты действительно входят в группу риска по СПИДу, т.к. испытывают меньшую необходимость в контрацепции. В цивилизованных странах это признают и проводят просветительскую работу в тоне ""если вы гомосексуалист, то соблюдайте такие-то и такие-то предосторожности, т.к. СПИД очень страшная болезнь и вы в группе риска"".  
2) Эпидемия СПИДа почти на 100% состоит из африканских стран, в которых гомосексуализм вообще уголовно наказуем, вплоть до смертной казни. Смертность от СПИДа там буквально в сотни-тысячи раз выше, чем в таких странах, как Нидерланды или Норвегия. СПИДом там болеют потому, что ничего не знают о контрацепции. См. [http://www.worldlifeexpectancy.com/cause-of-death/hiv-aids/by-country/](http://www.worldlifeexpectancy.com/cause-of-death/hiv-aids/by-country/) , [http://en.wikipedia.org/wiki/LGBT\_rights\_in\_Africa](http://en.wikipedia.org/wiki/LGBT_rights_in_Africa) - почти все страны в топе списка это Африка, и почти во всех из них гомосексуализм вне закона.

**Гомосексуальность ведёт к педофилии! - Нет, педофилия это отдельная, третья ориентация, слабо пересекающаяся с другими двумя.**  
[http://psychology.ucdavis.edu/rainbow/html/facts\_molestation.html](http://psychology.ucdavis.edu/rainbow/html/facts_molestation.html) - тут поясняется, что огромная часть педофилов имеют в качестве сексуальной ориентации не мужчин или женщин, а детей любого пола, т.е. ориентируются не на пол, а на возраст. И приводится статистика:

Using the fixated-regressed distinction, Groth and Birnbaum (1978) studied 175 adult males who were convicted in Massachusetts of sexual assault against a child. None of the men had an exclusively homosexual adult sexual orientation. 83 (47%) were classified as ""fixated;"" 70 others (40%) were classified as regressed adult heterosexuals; the remaining 22 (13%) were classified as regressed adult bisexuals. Of the last group, Groth and Birnbaum observed that ""in their adult relationships they engaged in sex on occasion with men as well as with women. However, in no case did this attraction to men exceed their preference for women....There were no men who were primarily sexually attracted to other adult males..."" (p.180).

Перевожу: из 175 обвиненных в растлении малолетних в Массачусетсе не оказалось НИ ОДНОГО гомосексуалиста - 47% людей, ориентированных именно на детей независимо от пола, 40% гетеросексуалов, и 13% бисексуалов с предпочтением в сторону гетеросексуальности.

Еще:  
Dr. Carole Jenny and her colleagues reviewed 352 medical charts, representing all of the sexually abused children seen in the emergency room or child abuse clinic of a Denver children's hospital during a one-year period (from July 1, 1991 to June 30, 1992). The molester was a gay or lesbian adult in fewer than 1% in which an adult molester could be identified – only 2 of the 269 cases (Jenny et al., 1994).

Поэтому совершенно некорректно говорить, что если мужчине нравятся мужчины, то он с большой вероятностью окажется педофилом. Это противоречит исследованиям.

Есть еще статья ""Pedophilia and Heterosexuality vs. Homosexuality"".  
Вот цитата из нее.

“The observed difference between the proportion of offenders against boys among offenders against children, and the proportion of androphiles \[homosexual in adult orientation\] among males who erotically prefer physically mature partners, is so large that it should not be overlooked. ...\*\*\*Androphiles actually responded significantly less to the male children.\*\*\*”

Это означает, что гомосексуалисты - мужчины, предпочитающие взрослых мужчин - оказывались педофилами РЕЖЕ, чем мужчины, предпочитающие взрослых женщин.

**Да никто их не ненавидит, пусть сидят тихо, никто их ненавидеть не будет! - Нет, еще как ненавидят**  
Опрос Левада-Центра, 2010.

[](http://www.levada.ru/06-08-2010/gomoseksualnost-v-rossiiskom-obshchestvennom-mnenii)  
Лишь четверть респондентов (25%) считают, что к гомосексуалам не следует применять каких-то особых мер, а надо лишь дать им жить так, как хочется. 24% предлагают оказывать им психологическую помощь. 39% считают, чтоих надо принудительно лечить или иначе изолировать от общества. 4% высказываютмнение о том, что лиц с нетрадиционной сексуальной ориентацией необходимо ликвидировать.

Опрос ВЦИОМ, 2005-2007.

[http://wciom.ru/index.php?id=268&uid=4049](http://wciom.ru/index.php?id=268&uid=4049)

В 2007г. 57% россиян считали, что гомосексуализм относится к аморальным поступкам, которые ""никогда не могут быть оправданы"" - больше, чем воровство и супружеская измена. 20% считали, что за гомосексуализм должно быть уголовное наказание, еще 12% штраф, еще 18% общественное порицание.

  
**И теперь пара философских или просто странных аргументов**

**Пусть любят кого хотят, главное чтобы на улицу не высовывались - этим они нарушают мои права**  
Такова же была аргументация противников прав чернокожих, женщин и т.п., и недостатки такой аргументации хорошо известны.

**Но ведь их парады - это сплошной разврат!**  
1) Многие парады гетеросексуалов это тоже сплошной разврат. На параде люди развлекаются и иногда наряжаются в яркие или провокационные костюмы, а иногда вообще раздеваются. Если вам не нравится это - боритесь с этим, но к сексуальной ориентации это никакого отношения не имеет.  
2) Скорее всего, вы судите по фото из тех СМИ, которые читаете. Разумно предположить, что многие СМИ показывают ровно то, что интересно показать. А вот настоящие фотки с их парадов: например, [http://vk.com/album-497578\_98815546](http://vk.com/album-497578_98815546) - совершенно ничего особенного, просто флаги радужные.  
3) Не все митинги гомосексуалистов - это парады. Вроде как (прошу подтверждения или опровержения - сам не посещал), большинство из них мало чем отличается от митингов против Охта-Центра или против застройки Химкинского леса. Приходят люди с плакатами, стоят, разговаривают. Всё.

**Это не норма потому, что если бы все стали геями, то мир бы вымер**  
У нормы может быть несколько вариантов, гармонично существующих в одном обществе. Например, у фактора ""пол"" есть два нормальных варианта - муж, жен. Аналогично у фактора ""сексуальная ориентация"". Почему гомо-ориентация является нормальной - см. в начале поста.

**Но ведь очевидно же, что чем больше геев, тем меньше рождаемость!**  
1) Само собой. Но этот эффект очень мал - количество геев в подавляющем большинстве стран не превышает нескольких процентов, а из них количество тех, кто МОГ БЫ быть гетеросексуален - и вовсе крайне мало. Это ничто по сравнению с естественными колебаниями рождаемости и, тем более, по сравнению с действием других факторов, таких как колебания стоимости жилья.  
2) Зато чем больше мы унижаем геев, тем больше смертность и количество психических заболеваний у них: [http://ajph.aphapublications.org/doi/abs/10.2105/AJPH.2009.168815](http://ajph.aphapublications.org/doi/abs/10.2105/AJPH.2009.168815)

Psychiatric disorders defined by the Diagnostic and Statistical Manual of Mental Disorders, Fourth Edition, increased significantly between waves 1 and 2 among LGB respondents living in states that banned gay marriage for the following outcomes: any mood disorder (36.6% increase), generalized anxiety disorder (248.2% increase), any alcohol use disorder (41.9% increase), and psychiatric comorbidity (36.3% increase). These psychiatric disorders did not increase significantly among LGB respondents living in states without constitutional amendments. Additionally, we found no evidence for increases of the same magnitude among heterosexuals living in states with constitutional amendments.

См. тж. [http://en.wikipedia.org/wiki/Suicide\_among\_LGBT\_youth](http://en.wikipedia.org/wiki/Suicide_among_LGBT_youth)

Попробуйте прикинуть, на сколько процентов можно повысить рождаемость за счёт геев, которые под давлением ненависти общества сломают себе психику и создадут ""нормальную"" семью, и готовы ли вы этого крохотного увеличения достичь ценой их депрессий и самоубийств - и сопутствующего падения производительности труда.

Если вам уж ОЧЕНЬ хочется повысить рождаемость - последуйте примеру Ирана и запретите женщинам получать хорошее образование и запретите квалифицированные должности. Они именно заботой о рождаемости объясняют свои запреты на эту тему (и совершенно правы: менее образованные женщины в среднем имеют гораздо больше детей; впрочем, мужчины тоже). Запретите контрацепцию, снизьте возраст вступления в брак.  
Не хочется? А почему? Выходит, жертвовать личным счастьем женщин ради рождаемости нельзя, хотя эффект огромен - а личным счастьем людей нетрадиционной ориентации - можно, хотя эффект крошечный?

**Это не естественно! - 1) ну и что? 2) вообще-то, естественно**  
Естественность имеет мало отношения к благоприятности в современном человеческом обществе; нетрудно найти ""естественные"" процессы из животного мира, которые для людей уже несколько тысяч лет как совершенно неприемлемы. Ну не знаю; нюхание гениталий потенциального партнёра, например.  
Но если вас таки волнует естественность, то - гомосексуальное поведение [встречается](http://en.wikipedia.org/wiki/Homosexual_behavior_in_animals) практически у всех известных видов [млекопитающих](http://en.wikipedia.org/wiki/List_of_mammals_displaying_homosexual_behavior), и не только их; у некоторых чаще, чем у людей.

**Но это не соответствует эволюции! - ну и что?**  
Механизм эволюции и естественного отбора - просто научный факт, а не моральный ориентир. Говорить ""гомосексуалы противоречат эволюции"" - так же глупо, как говорить ""толстяки противоречат гравитации"".

Если вас всё же снедает любопытство, как же эволюция ""допустила"" существование разных ориентаций - на этот счёт есть [несколько теорий](http://en.wikipedia.org/wiki/Biology_and_sexual_orientation#Sexual_orientation_and_evolution).

**Это не традиционно! - ну и что?**  
Да, для российского общества и ряда других обществ ""это"" не традиционно.  
Однако традиционность это, как и ""эволюционость"", исторический факт, а не моральный ориентир. Некоторые ""традиционные"" элементы общественного устройства сейчас кажутся дикостью - например, рабство. Некоторые современные элементы общественного устройства казались бы дикостью 100 лет назад - например, равноправие женщин и мужчин.

Да, большинство общественных норм - такие, как ""убивать плохо"", сформировались потому, что общества, которые их не соблюдали, были менее эффективны. Поэтому перед тем, как выбрасывать какую-то норму, стоит вспомнить, откуда она взялась, и актуальна ли до сих пор.

Некоторые нормы сформировались в совершенно других условиях, нежели нынешние, и больше не применимы. Например, норма ""секс только после брака"" сформировалась в условиях, когда её нарушение, в силу отсутствия контрацепции и венерологии, грозило эпидемией венерических болезней. Норма ""женщина должна повиноваться мужчине, варить борщ и рожать детей"" сформировалась в условиях, когда не существовало никакого труда, кроме физического; не существовало детсадов, школ и нянек, и т.п. Не только нормально отклоняться от этих норм, но и НЕОБХОДИМО бороться с теми, кто пытается их по-прежнему навязывать другим.

Норма ""любить только человека противоположного пола"" - я не знаю, откуда взялась, и было ли у неё когда-либо рациональное обоснование вообще. Возможно, это просто экстраполяция склонности церквей контролировать всё, что касается секса, т.к. это очень важная часть жизни большинства людей, и возможность привить куче людей чувство вины и собственной греховности - офигенно эффективный способ их контролировать. Как бы там ни было, рациональных оснований считать эту ""норму"" моральным ориентиром и по сей день - мне не известно; часть из неработающих оснований рассмотрены в этом посте.

**Это не норма потому, что нормальная семья должна рожать детей**  
Государство нормально относится к семьям, неспособным рожать детей, например к престарелым семьям.  
Кроме того, в человеческом обществе детей можно не только рожать, но и усыновлять, или рожать с помощью суррогатной матери или отца. Поэтому отсутствие физиологической возможности зачать ребёнка не является препятствием для продолжения рода.  
Кроме того, физиологическая возможность зачать ребёнка почти у всех людей нетрадиционной ориентации имеется - все нужные органы у них работают как надо.  
Кроме того, в человеческом обществе у семьи есть много других ролей, кроме продолжения рода - например, совместное ведение хозяйства и делание членов семьи более счастливыми и более ответственными.

Кстати, как насчёт разрешить заключение брака и получение всех соответствующих прав (например, на право придти к любимому человеку в реанимацию, право на наследство, право не свидетельствовать против человека в суде, право приехать вместе с человеком в другую страну по рабочей визе, и пр.) только после рождения ребёнка?

**Но ведь у геев уже и так есть такие же права - любой гей может жениться на человеке противоположного пола**  
Такова же могла быть аргументация противников межрасовых браков во времена, когда они были запрещены - любой человек может жениться на человеке той же расы. Недостатки такой аргументации хорошо известны.

**Если бы к моему сыну-школьнику подошёл гей, я бы ему врезал по морде!**  
И что это доказывает?

**Если бы мой сын стал геем, я бы огорчился!**  
И что это доказывает?

**80% россиян не любят геев!**  
И что это доказывает?

**В библии написано, что быть геем плохо**  
Хорошо; в таком случае, если вы православный гей, то у вас проблемы. Если вы православный, но не гей, то ок, можете противиться включению геев в лоно вашей религии.

**Но ведь мой здравый смысл подсказывает мне, что это все-таки плохо!**  
Здравый смысл - это лишь механизм приближенного поиска истины в условиях, когда для полного анализа не хватает данных или времени. Он часто ошибается (здравый смысл еще пару веков назад подсказывал, что человек не может летать); кроме того, он у нормального человека формируется под воздействием внешних факторов. Воспримите этот пост как источник исходных данных и подкорректируйте свой здравый смысл.  
Либо признайте, что это не здравый смысл, а просто эмоции.

**Ну не нравятся они мне!**  
На здоровье, а мне левши не нравятся. Главное - осознавайте, что это ваше личное мнение, ничем не подкреплённое, кроме эмоций; на основе него нельзя мешать кому-то жить, пропагандируя ненависть (активно или пассивно) или отказывая в тех или иных правах. Не все мнения одинаково ценны.

**Все эти исследования лоббированы геями, наука не примет тех, кто с ней не согласен!**  
История знает множество примеров революций в научном понимании того или иного явления. Уж кого-кого, а научное сообщество трудно упрекнуть в догматизме и антинаучном отношении к фактам.  
Кроме того, большая часть приведённых исследований сделана в Америке, которая в целом особой толерантностью не отличается - только 8 (вроде) штатов разрешают однополые браки (причём Калифорния ухитрилась их разрешить, а затем запретить - правда, решение о запрете было затем признано антиконституционным, сейчас продолжается судебный процесс), а полстраны это крайне религиозные люди, отрицательно относящиеся к геям.

И - да, исследования действительно лоббированы.  
Так же как лоббирована сотнями миллионов долларов и пропаганда ненависти к геям сотнями соответствующих организаций в США. В этом смысле всё честно.  
Лоббирование исследований само по себе не означает их ложности. Но так уж получается, что проплаченные исследования профессиональных психологов, показывающие, что с геями всё в порядке, многократно повторены другими психологами - а проплаченные исследования религиозных гомофобов многократно опровергнуты. Погуглите про Family Research Center.",null,undefined
2018-07-17T07:55:02.000Z,http://dom-expert.by/mikrodom-na-chetveryh-za-3300/,false,"[""best""]",article,"Микродом на четверых за 3300$, или как перестать платить за съемное жилье и обрести свободу",null,pocket,null,"# Микродом на четверых за 3300$, или как перестать платить за съемное жилье и обрести свободу

[dom-expert.by](http://dom-expert.by) | March 29, 2017 02:40 AM

**Ежемесячно отдавать внушительную сумму за возможность пожить в чужой квартире? Так поступают многие, но мало кому это нравится. Герою нашей статьи надоело выкидывать деньги на ветер, и он принял жесткое, но экономически обоснованное решение: построил под Минском кубический микродом, и переехал туда с женой и сыном. Все — для того, чтобы пустить сэкономленные средства на строительство особняка. Как прошел первый год жизни в «кубике» и оправдался ли расчет? Читайте в нашем репортаже.**

**Участок земли Виктор Оскирко  приобрел несколько лет назад, когда еще жил на съемной квартире в Сухарево. Строительство дома начал сразу же, не откладывая, а, чтобы сэкономить — решил делать все своими руками, по возможности привлекая друзей и родственников. Из-за специфики работы (Виктор — режиссер и оператор) в городе доводилось бывать нечасто — 3-4 раза в месяц. При такой раскладке логистика передвижений обходилась «в копеечку»: более 100 км (к месту стройки и обратно) ежедневно, и, как результат, почти 150$ в месяц на бензин. Плюс — 350$ за аренду квартиры. Плюс — коммунальные платежи… Справедливо рассудив, что отдавать более 500$ в месяц невыгодно, Виктор решил сделать «ход конем», соорудив временное жилище на участке, прямо возле строящегося особняка. Это сулило порядка 6000$ годовой экономии. Удалось ли? Рассказывает хозяин дома.**

Проекта — в привычном понимании этого слова — у меня не было: весь дом строился буквально «на коленке». Но идею конструкции я подсмотрел в проекте одного немца, создавшего студенческий домик. Правда, у него был «кубик» со стороной 3х3х3 метра, а у меня — 4х4х4. Еще одно отличие: в проекте немца вход на второй уровень был сделан внутри дома, а это значит, пришлось сооружать дополнительную лестницу. Чтобы не загромождать внутреннее пространство, мы сделали подъем к первому уровню вне стен дома, оформив его в виде крыльца с верандой.

Это позволило оборудовать в доме еще и «нулевой» уровень, где располагается основное помещение («гостиная»), кладовка и прачечная.

Зато теперь в доме могли спокойно спать 4 человека: двое — на верхнем уровне/спальне, и двое — на раскладном диване, стоящем в «гостиной». Правда, жена с ребенком живут здесь 3-4 дня в неделю, а оставшееся время проводят у родителей, но с домом это никак не связано.

Душ совместили с туалетом. Поначалу мыться, сидя на унитазе — неудобно, но к этому очень быстро привыкаешь, немногим отличается от общественных бань. И, к слову, пространство не такое уж маленькое — в некоторых «хрущевках» туалеты еще меньше. Единственное неудобство — после душа нужно тряпочкой протирать плитку, чтобы следующему зашедшему не было мокро ногам.

Если имеется вся сумма в наличии (или все стройматериалы), такой дом можно построить за несколько недель. В четыре умелых руки — недели за три. Поскольку материалы я довозил постепенно, у нас процесс занял больше двух месяцев. Но если брать чистую работу — получатся как раз те самые три недели.

Мне этот дом обошелся в копейки, много материалов осталось от возведения особняка: досок, фанеры, плит минваты, и т.д. Но для удобства я все пересчитал по рыночным ценам. С той оговоркой, что искал материалы подешевле.

Фундамент — свайный, самодельный. Специальной лопатой выкопали 4 ямки размером 30х30х120 см. Залили их бетоном, вставили арматуру, сверху соорудили короба из плит OSB (опалубку), и тоже залили бетоном. На готовые сваи положили брус 150х150 мм (ростверк). На него уже монтировали стены дома. На материалы фундамента у меня ушло порядка 50$.

Возводить каркас начали не сразу, сперва занялись поиском окон. **Окна я делал сам**, они в доме — глухие. А вот стеклопакеты для них покупал, правда — за бесценок, обошлись мне в 25$ за 4 штуки.  Это были неразмерные стеклопакеты: их кто-то заказал — и не забрал в итоге. Я выкупил стеклопакеты за бесценок, запроектировал окна, а затем под размеры окон/дверей — «подогнал» все остальное.

Много позже сообразил, что можно было не делать окна/двери самому, а купить уже готовые в Интернете, тоже нестандартных размеров. Стоят такие на 60-70% дешевле, чем типовые в среднем по рынку. Одну готовую дверь с двойным стеклопакетом можно было взять за 100$! А окно-патио — за 170$. Сейчас бы делал только так. Ведь окна — это «глаза» любого строения, без красивых окон и дома красивого не будет. Таким образом, если покупать сейчас, возьмем 500$ на готовые окна и двери. И это будет даже с доставкой.

Вроде бы окон и немного, но в доме нет ощущения тесноты. Большие двери пропускают много света, а, если взять веранду и пространство балкона — взгляд простирается на 7 метров, что визуально расширяет объем помещения. Летом я планирую вместо основного окна в «гостиной» сделать окно-патио, оно придаст помещению еще больше «воздуха».

Пирог стен самый простой: обрешетка из досок + плиты минваты + OSB поверху + пленка. Вместо пароизоляции я использовал самую обыкновенную целлофановую пленку, суть от этого не сильно меняется.

На весь дом потребовалось около 6 м.куб. леса (вместе с фасадом, на который ушло 2 м.куб.). Кубометр в среднем стоит 100$. То есть все дерево для каркаса мне обошлось в 600$. Доску применял «разнокалиберную», но большая часть —10х50 мм. Из них я делал особую обрешетку «в перехлест», в которую закладывал утеплитель.

Тут стоит сделать важную оговорку: покупалась доска естественной влажности, сырая. И это **— еще один вариант сэкономить**. Люди обычно покупают на строительство каркасного дома доску техсушки или фугованную. А зачем она фугованная, если все это в итоге прячется? К тому же, у пиленой доски есть преимущество: «ворсистость», шероховатая поверхность, которая хорошо удерживает плиты минваты, те никогда проседать не будут.

«Сырая» доска (естественной влажности) — неизбежно будет сохнуть, ее будет крутить. Чтобы этого не произошло, нужно скручивать каркас из сырой доски **сразу же**, не дожидаясь высыхания. И когда она уже скручена в каркас — она сохнет в таком виде. И натягивается как струна. Представьте, что в доску вкручено 12 шурупов. Куда ее после такого поведет? Никуда. Получается идеальное натяжение — достаточно дать посохнуть каркасу в естественных условиях две недельки. Экономия с доской из техсушки — более чем в три раза! Согласитесь, есть разница — за всю доску на дом отдать 600$ или 2000$? Ну, и не будем забывать: положа руку на сердце, найти идеально ровную доску техсушки — та еще задача. Она все равно где-то чуть «играет» по плоскостям, ее обычно довыравнивают на этапе монтажа, «подтягивают».

Утеплял дом плитами минваты: на пол — 30 см, потолок — 40 см, стены — по 20 см. С минватой работать сложно: листы приходится укладывать ровно, если какая-то щелочка образовалась — нужно ее забивать, иначе нарушится тепловой контур. Плюс — всем этим дышать нельзя, необходимо в масках работать… Словом, если бы позволяли средства, и не было у меня остатков ваты — я бы задувал стены специальной пеной, это и экологичнее и быстрее, и слой нужен более тонкий. И пленок никаких не надо. Но, сделал, как сделал — традиционно. **Пеной утеплить** такой домик обойдется в 600$, минватой — чуть дороже, до 1000 у.е. (это максимум). Листов OSB нужно купить порядка 20 шт. (10 мм толщиной) на мой дом. Это еще плюс 150$.

Толщина стен получилась порядка 35 см, но сюда входит все; утепление, 5-см вентиляционный зазор (по периметру дома оборудован вентфасад) и облицовочная доска.

На крыше — «Алькорплан», современный, но не самый бюджетный материал. Зато он вообще ничего не боится: ни УФ-лучей, ни скачков температуры. Уклон крыши — всего 8 см, этого более чем достаточно для отвода осадков. В целях экономии на кровле можно использовать обычный рубероид, но понадобится два слоя (обязательно) и поверху уложить какими-нибудь камушками, для защиты от ультрафиолета. На 16 квадратных метров два слоя рубероида, плюс запас накинуть… пусть будет 40 кв. м. Разброс цен существенный, но тоже можно найти некондицию, по доллару (и даже дешевле) за 1 кв. м. В таком случае вся кровля обойдется в 50$.

Крыльцо и террасу я в стоимость не закладывал — их можно сделать из чего угодно, по желанию. У меня какое-то время крыльцо вообще из поддонов стояло.

На балкончике можно развесить белье для сушки, или выйти покурить, если вы курите.

**Важно знать:** Сразу рассчитывайте все материалы: лучше взять с небольшим запасом, чтобы затем не пришлось ничего довозить. Каждый привоз (чего угодно) стоит от 20$ в 20-километровой черте от города, и стоимость увеличивается с расстоянием.

Примерно 4 листа фанеры ушло на внутреннюю отделку: шкафчики, борта и т.д. Это еще 50$. Все остальные доски, которые я пустил на душевую кабину, лестницу, пол и другое внутри — 150$ максимум. Итого — пускай, 200$.

**Совет**: Фанеру лучше не покупать в магазинах, строительных гипермаркетах или на строй-рынках. Лучший вариант — найти фирму, отпускающую товар с оптовых баз или комбинатов. Только подъехать нужно будет смотреть в любом случае, потому что можно нарваться на распродажу застарелых остатков и качество будет не ахти. А так — нормальную фанеру можно купить на 30% дешевле, чем в магазине или гипермаркете. То же касается и доски, которую можно попробовать взять прямо с лесопилки.

Канализация в доме со всеми трубами обошлась мне в 100$, унитаз – 200$, умывальник 50$, смеситель с душем 50$… Словом, вся душевая комната/туалет с разводкой стоили не больше 400$.

Немецкий ламинат покупался в **магазине конфиската**, он стоил примерно на 50% дешевле, чем на рынке. Почему так дешево? Потому что человек его вез немного, на комнату или квартиру, столько и изъяли. Из-за ограниченного объема материала — купит его не всякий. А мне — как раз хватило на пол, обошелся весь ламинат в 150$.

250$ я отдал за ламинат на стенки-потолок. Покупали уже в другом магазине, как **некондицию**. У этого ламината был небольшой брак: мельчайшие выступы на стыках, и если укладывать такой на пол — нога цеплялась бы за эти выступы, ламинат быстро потерял товарный вид. А для стенок и потолка — это не препятствие. Почему выбрали ламинат? Он придает вид завершенности, вид идеальной шлифованной стены. И он прочный. Рассчитан на то, что по нему будут ходить, поэтому на стенах он будет сохранять свой товарный вид долгие годы. И его всегда можно помыть, простой шваброй, всю комнату, включая потолок. Единственный момент: всем, кто соберется построить микродом, я советую выбирать белый или очень светлый цвет — это зрительно увеличивает пространство.

В доме нет отопительных приборов, кроме кондиционера. Это особая модель, которая может работать при минус 25 градусах Цельсия. Датчик кондиционера запрограммирован на постоянную температуру внутри помещения в районе 22 градусов, как только температура падает — он включается и обогревает дом. В самый холодный месяц мы платили менее 40 рублей за всю электроэнергию. Это с телевизором, бойлером, стиральной машиной, плитой, холодильником, всем освещением и двумя мощными компьютерами. Копейки, согласитесь? В «теплые» месяцы платим еще меньше.

Заехали мы 28 мая 2016 года. Еще некоторое время не было воды, приходилось душ принимать на улице, затем «прокинули» водопровод и жить стало нормально. Дом окупился менее чем за год.

Если подытожить все вышеперечисленные расходы на материалы, получим цену в 3350$ (это уже с запасом). Это без техники и мебели. Можно поискать варианты с распродажами, что-то попробовать привезти из Польши — тогда получится уложиться в 5000$ и это будет состояние «под ключ». Только зубную щетку останется с собой прихватить и постельное белье. Но делать все придется своими руками. Привлечение сторонних работников увеличит стоимость дома в 2.5-3 раза.

Микродом останется отличным вложением даже после переселения в особняк. Приехали гости или родители? Есть гостевой домик. Захотелось поработать в уединении? Вышел из большого дома во «внешний офис» — ты никому не мешаешь, и тебе никто не мешает. Ребенку можно подарить этот домик вместо «штаба», или позволить ему встречаться в нем с друзьями. В конце концов, микродом можно куда-то транспортировать: снять краном с фундамента и перевезти с сопровождением ГАИ. Вряд ли вся конструкция весит более 3 тонн.

Я даже подумывал над постановкой микродомов «на поток». Чтобы наладить производство, нужен цех со сборочной линией, конвейер. И там уже по заготовленному «лекалу» штамповать эти дома. Просчитали примерно аренду, оборудование, мастеров, вышли на минимальную цену дома в 12 000$. И то, скорее всего, не учли еще ряд моментов, которые могут удорожить производство. С другой стороны это уже будет дом «под ключ», со всей внутренней отделкой, мебелью и необходимой техникой. Есть ли перспективы в нашей стране? Думаю, да. Но получить все разрешения и организовать сборочный процесс будет непросто.

Поэтому я сейчас думаю над другой идеей: строить небольшие поселки таких домов в живописных местах и сдавать их, развивать агротуризм. Или же — просто за городом, аналог мини-поселка, в котором люди будут платить такую же арендную плату, как и в городе, но — обходиться без соседей, жить на свежем воздухе, содержать в комфорте домашних животных и т.д. Преимущества загородной жизни [давно известны](http://dom-expert.by/zhenshhiny-protiv-muzhchin-10-plyusov-i-10-minusov-zhizni-v-zagorodnom-dome/).

Молодым специалистам, приехавшим покорять столицу, молодым семьям, людям, которые планируют когда-либо жить в частном доме — я рекомендую не ждать. Пока вы ждете — вы теряете время и деньги. Вложите их сразу в свое будущее: купите кусок земли, и постройте небольшой дом, а дальше — смотрите по обстоятельствам: живите по средствам или потихоньку вкладывайте в дом побольше. Но — не откладывайте «на потом». Чем быстрее вы начнете жить в своем доме — тем скорее вы начнете постигать эту жизнь. И у вас не будет пути назад — это очень важный психологический аспект, который тормозит многих на пути принятия решения. Не замахивайтесь сразу на большое, начните с малого, научитесь пользоваться этим, и у вас наверняка получится сделать следующий шаг…

Уже этим летом я планирую заселиться в собственный, большой дом. Сейчас в нем идет внутренняя отделка, фасад тоже не в «финишном» варианте, поэтому пока предлагаю посмотреть на рендеры.",null,undefined
2012-02-08T19:10:25.000Z,http://habrahabr.ru/blogs/books/77016/,false,"[""best""]",article,"Много книг, хороших и разных / Читальный зал / Хабрахабр",null,pocket,null,"# Много книг, хороших и разных

[habr.com](http://habr.com)

Мой список книг, которые мне хочется прочесть, изрядно вырос, спасибо топику “[запасаемся на зиму](http://habrahabr.ru/blogs/books/76714/)”. Под катом вы обнаружите список книг, составленный по комментариям в том топике.  
  
Я постарался составить подробный список книг. Не забывайте, я многое из всего этого не прочел. Поэтому сортировка по тематике носит приближенный характер. Кроме того, тут не все книги, упомянутые в комментариях, скорее всего в нем нет книг, упомянутых в последних комментариях.  
Число в скобках – это приблизительный рейтинг книги. Это число плюсов комментариев, в которых упомянута книга. По нему нельзя судить, хорошая книга или плохая. Я, например, буду его использовать только для того, чтобы определить порядок, в котором я буду читать эти книги. Если этого числа нет, то значит число плюсов. На некоторых книгах этого числа нет, это значит:  

*   рейтинг 0
*   я посчитал нужным его убрать
*   я его забыл :)

  
Описание книг – это текст комментариев. Я почти ничего не менял. Непосредственно, к этим описаниям я никакого отношения не имею.  

К сожалению, у меня не хватит психического здоровья, чтобы упомянуть всех авторов этих комментариев. Извиняйте.

Поехали!

#### Научно-популярное. О науке. О жизни. О работе.

  

*   **«Вы конечно шутите мистер Фейнман» Ричард Фейнман (36)**  
    Уверен, эта книга must read для всех с научным складом ума и профессии. Набор эссе (в виде мемуаров) самого веселого физика. Я знаю, биографии и мемуары это обычно скучно, но только не в этом случае. Если перельмановская «Занимательная физика» это прикладная физика для жизни, то эта книга — прикладная жизнь для физиков :) Просто поражаешься как интересно можно жить и работать, если подходить ко всему с научной (экспериментальной) точки зрения. Будет полезно как программистам, так и тестерам :) не говоря уже о любых научных работниках.  
    [lib.rus.ec/b/134631](http://lib.rus.ec/b/134631)
*   **«Краткая история времени» Стивен Хокинг (14)**  
    Достаточно известная книга, очень просто рассказывает про развитие представления о мире с физической точки зрения. В новом издании появились еще и красочные иллюстрации, кроме этого есть ссылки на многие другие физические работы для глубокого изучения.
*   **«Большое, малое и человеческий разум» Пенроуз Хокинг**  
    Немного повторяет «Краткую историю времени» в начале, но идет дальше и глубже в диспуты на темы современной физики.
*   **«Диалоги» Александр Гордон(6)**  
    Нет, не книга конечно, стенограммы ночных передач-диалогов телевизионной программы «Гордон». И, в отличие от Акунина, нельзя сказать, что легкое чтиво. :) Но как иногда не хватает вот таких вот интеллектуальных бесед, на бытовом языке, из которых узнаешь много нового и увлекательного. Диалоги обо всем: теология, космология, экономика, живые системы, физика, философия и т.п. Местами очень заумно, но каждый из них — два-три сплетенных эссе. Очень много пищи, очень насыщает. Не всё я пока осилил, но храню с мыслью прочесть с удовольствием. На необитаемый остров взял бы — это точно.
*   **«Теряя невинность» Ричард Брэнсон(7)**  
    Книга о том как создавалась и развивалась компания Virgin.  
    Компания начанала с продажи пластинок по почте, сейчас же они строят самолеты, способные выходить в открытый космос. Очень интересная книга для людей, которые начинают делать свой стартап и учатся зарабатывать деньги своим бизнесом.
*   **«Элегантная вселенная» Брайан Грин(10)**  
    Книга о теории струн, квантовой механике, теории относительности и вообще об устройстве вселенной, написанная ясным языком. Должна понравиться тем, кому нравятся книги С.Хоукинга.
*   **«Эгоистичный ген» Докинз (3)**  
    Хоть и про биологию, но очень интересно и подход айтишный у человека вполне.
*   **«Бог как иллюзия» Докинз**  
    Во вступлении автор обещает, что перевернув последнюю страницу вы станете атеистом. Очень интересное и познавательное чтение. Докинз шаг за шагом, аргумент за аргументом раскрывает свою точку зрения — почему он против любой религии.
*   **«Доказательство Бога. Аргументы ученого» Френсис Коллинз**  
    Книга нынешнего главы Национально Института Здоровья США и бывшего главы проекта Геном Человека, «Доказательство Бога. Аргументы ученого». Очень дельная и современная книга, показывающая как возможен синтез научной и религиозной картин мира.
*   **дискуссия между Коллинзом и Докинзом, организованная журналом «Time»(1)**  
    [www.ateismy.net/content/polemika/collins\_vs\_dawkins.html](http://www.ateismy.net/content/polemika/collins_vs_dawkins.html)
*   **«Ткань космоса. Пространство, время и текстура реальности» Брайан Грин(3)**
*   **«Новый ум короля.» Роджер Пенроуз (7)**  
    Отличная научно-популярная книга про современные представления о физическом мире. (с поправкой на дату издания 1990 г.)  
    Монография известного физика и математика Роджера Пенроуза посвящена изучению проблемы искусственного интеллекта на основе всестороннего анализа достижений современных наук. Возможно ли моделирование разума? Чтобы найти ответ на этот вопрос, Пенроуз обсуждает широчайший круг явлений: алгоритмизацию математического мышления, машины Тьюринга, теорию сложности, теорему Геделя, телепортацию материи, парадоксы квантовой физики, энтропию, рождение Вселенной, черные дыры, строение мозга и многое другое.
*   **«Криптономикон» Нил Стивенсон(9)**  
    О чём эта книга… наверное, о криптографии :), и о том, как она влияла на мир во время Второй мировой войны, и как влияет в наше время. Не смотря на то, что в книге почти 1000 страниц, читается очень легко.
*   **«Смотри в корень!» Пётр Маковецкий (7)**  
    Книга представляет собой сборник задач из различных областей науки (главным образом оптики, астрономии, космонавтики и др.). Отличительная черта задач – парадоксальность ответа или вопроса, что повышает интерес читателей к самостоятельному решению.  
    Смотрите в корень!
*   **«Схизматрица» Брюс Стерлинг**
*   **«iКона. Стив Джобс» Джеффри С. Янг, Вильям Л. Саймон**  
    Книга написана о человеке, стоящего внимания, о человеке, который изменил историю техники. Правдивая история его жизни от рождения и до достижения высот. В общем советую, после прочтения кардинально изменилось мнение об этом человеке.
*   **«Кандзявые эссе» А. Вурдов(2)**
*   **«Черный Лебедь» Нассим Николас Талеб.(5)**  
    Из главного еретика Уолл-стрит, который в одиночку выступил против легиона футурологов и аналитиков, Нассим Талеб превратился в фигуру, чье влияние распространяется далеко за пределы финансового мира.  
    Его «Черный лебедь» семнадцать недель держался всписке бестселлеров «New York Times» и переведен на 27 языков.
*   **«Занимательная Греция: Рассказы о древнегреческой культуре» (1996). Гаспаров М. Л. (1)**  
    Популярная книга о Древней Греции, очень хорошо написана, причем это вовсе не отдельные «рассказы», а вполне связный обзор с отступлениями.
*   **«Карл Великий. Через империю к Европе (1995?). » А. Левандовский.**  
    Отличная популярная книга о Карле Великом.
*   **«Коранические сказания» М.Б.Пиотровский (2)**  
    из аннотации: Изложение коранических легенд и преданий, анализ их истоков, их бытование в доисламской Аравии и странах арабо-мусульманской культуры.
*   **«Речные заводи» Ши Найань**  
    Несмотря, что издан давно (XV век) читается очень бодро.  
    Для всех, кому не интересен Восток и мифология(наверное, все таки имелось ввиду — «Для всех, кому интересен Восток и мифология»)
*   **«Человек, который принял жену за шляпу» Оливер Сакс**  
    Автор — врач-нейропсихолог и писатель, хорошо известен в штатах. Книга стала бестселлером и выдержал пять изданий, в которой О. Сакс рассказывает о своих клинических случаях, связанных с нарушениями мозга. Весьма познавательно и интересно; людей с некоторыми нарушениями можно наблюдать в обычной жизни. Порой приходилось задумываться: кто более нормальный — мы, обычные люди (как сами считаем), или его пациенты.
*   **«Физика невозможного» Мичио Каку**  
    Физик рассуждает о текущем состоянии физики. Рассматривает разные атрибуты фантастических рассказов (невидимость, антигравитация, телепортация, чтение мыслей) и пытается описать их реализацию с использованием известных законов физики. А так же делится информацией о текущих наработках в разных областях физики. Простой и понятный язык изложения, современная физика и постоянный возврат к фантастам делают чтение простым и увлекательным.  
    Книга доступна для чтения по ссылке [lib.rus.ec/b/146090](http://lib.rus.ec/b/146090)

  

#### Русская классика.

  

*   **«Анна Каренина» Лев Толстой**
*   **«Преступление и наказание» Федор Достоевский**
*   **«Братья Карамазовы» Федор Достоевский**
*   **«Отцы и дети» И.С. Тургенев**  
    Интересно наблюдать за поведением человека который не видит авторитетов(нигилист) и как он с этим в общем справляется, например когда влюбляется. Не очень веселая, но читается легко и заставляет задумываться местами.
*   **Стихи А.С. Пушкина**

  

#### Философия.

  

*   **«Кролики и удавы» Фазиль Искандер(6)**  
    Веселая и чуть-чуть грустная философия для взрослых в форме сказки для детей. Отношения жертвы и охотника, общества и индивидуума, зла и добра, науки и безграмотности. Всё это смешано с удавами и кроликами в этой юморной аллегории. Поднимает настроение и одновременно развивает аналогическое мышление.
*   **«Затворник и Шестипалый» Пелевина(6)**
*   **«Ника» Пелевин**
*   **«Хохот Шамана» Серкин(2)**  
    Своеобразный взгляд на мир, современного человека и природу. Периодически перечитываю.  
    Наверное, понравится любителям Кастанеды
*   **«Опыты» Мишель Монтень(6)**  
    Очень интересная книга 1580 года издания. Написана так, что создается впечатление будто читаешь современное произведение. Плюс в том, что каждая страница насыщена интерными рассуждениями дающими много пищи для вопросов.
*   **«Господь мой брокер» Кристофер Бакли(4)**  
    К сожалению, я не очень отзывы умею писать, но вот не могу удержаться от рекомендации этой книги! Это ироничный рассказ об отношении к деньгам, да много о чем еще, читайте — не пожалеете.
*   **«Записки о Кошачьем городе» Лао Шэ**
*   **«Письма Баламута» Клайв Льюис(6)**  
    По форме это письма, которые пишет старший бес своему мододому бесенку-подопечному, наставляя его в премудростях искушения людских душ и удержаниях их на пути в ад. По сути же это очень точное размышление о том, как люди думают и почему они в этом не правы. В наш век, когда хаотическое, клиповое мышление становится уже не только нормой, но для некоторых и предметом гордости, «Письма Баламута» может быть даже более актуальны, чем для современников Льюиса.
*   **«Маятник Фуко» Умберто Эко**  
    Must read! Блестящий пародийный анализ культурной сумятицы современного сознания. Роман остро полемизирует с современными эзотерическими учениями, с Каббалой, алхимией и теориями заговора. Там есть все: сатира, детектив, блестящие диалоги, интересные исторические выкладки, необычайная атмосфера, стремительный сюжет.  
    После этого романа любые фильмы, тексты и разговоры про тамплиеров, розенкрейцеров, масонов и всемирные заговоры будут вызывать у вас лишь снисходительную ухмылку. ;)  
    Я после прочтения Маятника окончательно влюбился в атмосферу Старого Света :)  
    Также рекомендую другие произведения Эко: короткие рассказики, его другой роман «Имя Розы», «Записки на полях Розы» (содержащие анализ творческого процесса, вдохновения, музы), а также политические обозрения и ремарки (можно найти на [www.inosmi.ru](http://www.inosmi.ru)).  
    В 2009 году вышла его новая книга «Vertigo» (а точнее исследовательская работа), каталогизирующая образы западной культуры, постараюсь ее достать и прочесть.
*   **«Сумма Технологий» Станислав Лем**  
    Философский трактат. О том, что такое техноэволюция и много о чем еще. [lib.ru/LEM/summa/summcont.htm](http://lib.ru/LEM/summa/summcont.htm)
*   **«Учение Дона Хуана» Карлос Кастанеда**
*   **«Хазарский словарь» Милорад Павич**
*   **«Сто лет одиночества» Габриель Гарсия Маркес(8)**  
    Мифический реализм. Произведение из разряда пятого курса филологического факультета. За это произведение автор получил нобелевскую премию.
*   **«Осень патриарха» Габриель Гарсия Маркес**  
    О деспотизме и природе мифотворчества народа.
*   **«Полковнику никто не пишет» Габриель Гарсия Маркес**  
    Небольшой рассказ в духе Маркеса. У Рок-группа Би-2 есть одноименная популярная песня. Видимо на них тоже повлиял Маркес свой философией мистики, мифологии.

  

#### Приключения. Научная фантастика.

  

*   **«Рассказы о пилоте Пирксе» Станислав Лем(14)**  
    Сборник рассказов. Хороший, романтическо-приключенческий, местами веселый и весьма научно-фантастический. Поразило как детально описываются лунные пейзажи, особенности лунной гравитации, построений и т.п. Сюжетами очень напомнила Стар Трек (в хорошем смысле). Фильм «Дознание пилота пиркса» снят на основе одного из рассказов сборника.  
    [lib.rus.ec/b/69882](http://lib.rus.ec/b/69882)
*   **«Солярис» Станислав Лем(2)**  
    Величайшее произведение Станислава Лема ставшее классикой мировой прозы XX века.
*   **«Эдем» Станислав Лем(2)**  
    Один из самых ярких романов Лема, сочетающий в себе черты жесткой и антиутопической НФ.
*   **«Дневники Ийона Тихого» Станислав Лем(2)**
*   **сборник «Сказки роботов» Станислав Лем(2)**
*   **«Дневник найденный в ванне» Станислав Лем(2)**
*   **Рассказы из цикла «3 закона роботехники» Айзек Азимов(22)**  
    Возможно вы уже читали, но если нет — прочтите. Очень интересно, с точки зрения программиста, искать вместе с автором изъяны казалось бы идеальной системы, построенной на 3х простых фундаментальных законах. Поразительно сколько сюжетов (исключений) можно выжать из набора простейших правил. Очень позитивно влияет на  
    архитектурные скилы :) Да и вообще: читается легко (как сказки в детстве), а извилины извиваются.  
    [lib.rus.ec/b/133610](http://lib.rus.ec/b/133610)
*   **«Зодиак» Нил Стивенсон(1)**  
    Про то, как один человек борется с корпорациями. Вроде бы ничего особенного, но написано очень захватывающе, читается на одном дыхании.
*   **«Дзен и искусство ухода за мотоциклом» Роберт М Пирсинг(Robert M Pirsig)(7)**  
    Размышления о жизни и всем таком в форме дневника путешествия.  
    Стоит прочитать, даже если для вас мотоцикл — просто транспортное средство.
*   **«И грянул гром»(«A Sound of Thunder») Рэй Брэдбери(22)**  
    Рассказ про машину времени и эффект бабочки.
*   **Будет ласковый дождь(«There Will Come Soft Rains») Рэй Брэдбери(22)**  
    В одночасье прошла катастрофа — весь город был сметён ядерным смерчем, никого не оставившим в живых. Но в одном единственном чудом уцелевшем доме продолжается размеренный и устоявшийся распорядок дня — автоматические системы дома готовят завтрак, убирают дом, заправляют постели…
*   **«451 градус по Фаренгейту»(«Fahrenheit 451») Рэй Брэдбери(22)**  
    Роман «451 градус по Фаренгейту» рассказывает о тоталитарном обществе, в котором литература находится под запретом, а пожарные должны сжигать все книги, которые обнаружат. Автор изобразил людей, потерявших связь с природой, с интеллектуальным наследием человечества, друг с другом.
*   **«Что-то страшное грядет(Something Wicked This Way Comes)» Рэй Брэдбери(2)**  
    обалденная вещь, атмосфера зловещего лунапарка передана очень здорово. Перевод «Что-то страшное грядет» — лучший.
*   **Рассказ «Лёд и пламя» Рэй Брэдбери(2)**  
    Про мир, в котором люди живут всего семь дней.
*   **«Приход ночи» Айзек Азимов, Роберт Силверберг(3)**  
    Отличный рассказ о том, чем может стать простейшее явление в мире, который веками его не знал. С удовольствием прочитал и перечитал. Есть две версии — изначальная, написанная Азимовым, и расширенная — переработанная в соавторстве с Силвербергом. Вся интрига есть и в изначальной версии, но расширенная продолжается более активными приключаниями =)
*   **«Валис» Филип К. Дик**  
    Если сможете осилить. У меня это получилось только со второго раза, но книга умнейшая, столько всего там настолько точно подмечено и описано что просто диву даешься. Но некоторые абзацы надо медленно и внимательно прочитать раз 5 чтоб понять о чем идет речь:), такая вот непростая вещь.
*   **«Город» Клиффорд Саймак(6)**  
    «Куда приведет человека развитие цивилизации и безумная жажда власти над природой и себе подобными? Какими будут последствия применения новейших технологий и создания все более разрушительных видов оружия?  
    А что, если когда-либо в будущем обитателям Земли придется все начинать заново? Кто будет в ответе за судьбы мира?»  
    Эпический научно-фантастический роман.
*   **«Звезда КЭЦ» А.Р. Беляев(1)**  
    Просто интересная история, полет в космос. Кое что есть даже описывается по проектам ученого Циолковского.  
    У него также есть и другие интересные романы.
*   **«Пикник на обочине» Аркадий и Борис Стругацкие.**  
    Книга в свое время оставила неизгладимое впечатление и потрясла своей атмосферностью. В ней было столько интересного и необъяснимого, что просто непонятно было, как можно было все это описать, используя стандартные слова и предложения. Я считаю их лучшими авторами среди советских фантастов. Именно поэтому стал поклонником игры «S.T.A.L.K.E.R.». Несмотря на то, что с оригинальной сюжетной линией книги игру свызывают только «артефакты» и сама «Зона» — передана та атмосфера книги. А это — самое главное, на мой взгляд.
*   **«Конец радуги» Вернор Виндж**  
    Вернор Виндж — большой поклонник технологических нововведений, всех этих мультимедийных проектов, техник быстрого обучения, виртуальных библиотек, искусственных интеллектов… Его персонажи выглядят среди этих цифровых чудес как дети на игровой площадке. Но площадка для игр иногда оказывается в тени, социальные и психологические дилеммы, временно решенные в этой книге, никуда не исчезнут. Виндж пытается намекнуть, что хорошая и беззаботная жизнь в 2025 году вовсе не означает того же еще через десять лет.  
    Многие поклонники творчества Винджа ожидали от него космического эпика в духе «Пламени над бездной» и «Глубины в небе» — но получили нечто совсем другое. Однако это вовсе не значит, что новыя книга писателя уступает его предыдущей дилогии. «Концом радуги» Виндж доказывает, что может держать планку качества, и не отправляясь в далекое будущее и далекий космос.
*   **Звездные короли Эдмонд Гамильтон**  
    Американский писатель, один из “отцов-основателей” — вместе с Д.Уильямсоном и Э.“Доком” Смитом — современной научной фантастики США, один из ранних популяризаторов и лидеров так называемой космической оперы. Среди его наиболее известных книг — популярный роман, название которого стало синонимом бесшабашной, динамичной и сюжетно насыщенной «космической оперы», — «Звездные короли»; продолжения: — сборник «Возвращение к звездам».  
    

  

#### Фантастика.

  

*   **«Гиперион» Дэн Симмонс**  
    Потрясающая космическая сага (в цикле 4 книги).  
    Более увлекательного я никогда не читал.
*   **«Террор» Дэн Симмонс**
*   **«Мир пауков» Колин Уилсон**  
    Никто не знал, почему пауки так ненавидят людей…
*   **«Муравьи» (трилогия) Бернард Вербер**  
    Безусловно, шедевр. Главными героями являются муравьи и люди. Настолько детально описывается мир насекомых — касты, обязанности и т.д., что становится не по себе — мы не единственная развитая цивилизация на этой планете. Настоятельно рекомендую к прочтению.  
    [Муравьи](http://aboutwerber.com/pro/ants.htm), [День Муравья](http://aboutwerber.com/pro/dayofants.htm), [Революция Муравьев](http://aboutwerber.com/pro/revolofants.htm)
*   **«Автостопом по галактике» Дуглас Адамс(31)**  
    Вы еще не знаете зачем полотенце? И где подают лучший во вселенной грызлодер?  
    Один из лучших образцов юмористической фантастики. Только гурманы говорят, что есть хорошие переводы и не очень, а снобы говорят, что вообще только в оригинале надо читать.
*   **«Ночь в тоскливом октябре» Роджер Желязны(7)**  
    Отличный роман в духе викторианской классики от лица сторожевого пса. Повествует о загадочной Игре, в рамках котором на канун всех святых собрались различные герои: тут и Франкенштейн, и Дракула, и Шерлок Холмс и даже Ктулху :) Причём это не дешёвый постмодернизм, а очень гармоничное произведение.
*   **«Астровитянка» Ник Горькавый(7)**  
    Хорошая подростковая фантастика. Простой, но интересный сюжет изобилует научно-популярными вкраплениями, так что интересно не только детям :) Да и с эмоциональной точки зрения, на мой взгляд, трогает гораздо больше всяких Гарри Поттеров.  
    Первую книгу вполне легально скачать с либрусека, вторая — «Теория катастрофы» появится через некоторое время, когда будет раскуплен бумажный тираж.
*   **«Мир реки» Филип Хосе Фармер(4)**  
    Мир реки — это сборник книг, а точнее — это ИДЕЯ, созданная Фармером по которой многие авторы писали произведения (фреймворк можно сказать:).  
    Идея заключается в том, что некие существа придумали машину, которая могла создавать тела людей и помещать в них души умерших (грубо говоря, воскрешение). После смерти, люди оказывались на странной планете, у русла бесконечной реки. Все тела воскресших людей были молодыми (20-30 лет) и не старели, на планете не было животных. Питание люди получали из загадочных, огромных столбов которые стояли на протяжении всей реки.  
    И разные произведения повествуют о разных событиях на этой планете (людей-то там десятки миллиардов).  
    Кто-то пытался построить заново цивилизацию, кто-то боролся с варварами, кто-то ударился в философию/науку/технику, а кто-то решил узнать, что за существа создали этот новый мир и отправились к истокам реки в надежде найти их.
*   **«Многоярусный мир» Филип Хосе Фармер**
*   **«Катали мы ваше Солнце»Евгений Лукин**  
    Лукин — замечательный писатель, с отличным чувством юмора, прекрасно стилизующий каждую деталь выдуманных им миров. Советую читать вообще все, включая стихи, а «Солнце» — это как если бы я отбирал по одному произведению для серии.
*   **«Фантастическая сага» Гарри Гаррисон(6)**
*   **«Рой» Майкл Крайтон(1)**  
    Довольно захватывающий роман про мультиагентные системы, с главным героем — программистом, который по ходу романа рассказывает несколько полезных принципов в проектировании этих самых систем, но произведение не про программирование.
*   **«О дивный новый мир» Олдос Хаксли**  
    Антиутопия. Очень сильная попытка представить развитие человеческого общества в будущем… Отчасти уже в настоящем.
*   **«Понедельник начинается в субботу» братья Стругацкие**
*   **«Хроники Черного Отряда» Глен Кук**
*   **«Град обреченный» Аркадий и Борис Стругацкие**
*   **«Основание» Айзек Азимов(4)**  
    Азимов мой любимый фантаст, с этой трилогии началось мое с ним знакомство и после этого я читаю все его произведения, которые нахожу в продажи. Книга про распад галактической империи и ее длительное возрождение. Считаю обязательно для прочтения всеми любителями научной фантастики.
*   **«Лабиринт отражения» Сергей Лукьяненко(4)**  
    Я считаю, эта книга пример отличной российской фантастики. В ней рассказывается про виртуальный город, жизнь в нем и как эта жизнь затягивает.
*   **«Звёздная бабочка» Бернард Вербер(5)**  
    Довольно интересный сюжет, в стиле Вербера, который любит писать об утопиях. Неожиданная развязка.
*   **«Вирт» Джефф Нун(5)**
*   **«Пыльца» Джефф Нун(5)**
*   **«Нимфомация» Джефф Нун(5)**  
    Все книги образуют трилогию в которой описывается два мира — реальный и виртуальный (в который можно попасть под действием наркотических перьев). Читать по настроению, потому что иногда может читаться легко, а иногда нет. В любом случае советую всем. Потому что очень уж необычно всё написано. =)
*   **«Хроники Дюны» Ф.Герберт**  
    Книги создают очень интересный мир со своими политическими и экологическими вопросами.
*   **«Чужак в чужом краю» Роберт Хайнлайн**
*   **«Игра Эндера» Орсон Скотт Кард**
*   **«Война миров» Герберт Уэллс(2)**
*   **«Машина времени» Герберт Уэллс(2)**
*   **«Человек-невидимка» Герберт Уэллс(2)**
*   **«Первые люди на Луне» Герберт Уэллс(2)**
*   **«Война в воздухе» Герберт Уэллс(2)**
*   **«Таинственный остров» Жюль Верн**
*   **«путешествие к центру земли» Жюль Верн**
*   **«капитан Немо» Жюль Верн**
*   **«Космическая одиссея» Артур Кларк**
*   **«Нейромантик» Уильям Гибсон(7)**  
    Классика киберпанка от одного из основателей жанра. Культовая вещь среди айтишников по всему миру. Великолепная атмосфера высокотехнологичного индустриального мира будущего. Читается на одном дыхании, но еще очень долго не отпускает. Имеет ряд продолжений. И, кстати, скоро выйдет экранизация этого произведения. «Небо над портом было цвета экрана телевизора, настроенного на пустой канал»…
*   **«Зеленая миля» Стивен Кинг**
*   **«Оно» Стивен Кинг**
*   **«Сияние» Стивен Кинг**
*   **«Ловец снов» Стивен Кинг**

  

#### Драма.

  

*   **«Коллекционер» Джон Фаулз(9)**  
    Роман сюжетно близок к «Парфюмеру» Зюскинда. Парень поймал девушку как бабочку. Очень впечатляет сравнение поведения маньяка с точки зрения его самого и со стороны жертвы, девушки попавшей в западню, чьей-то возлюбленной, милой, умной, доброй, которая в свою очередь сравнивается с бабочкой. Книга тяжелая для восприятия (впрочем, как и «парфюмер»), но прочесть стоит.
*   **«На игле» Ирвин Уэлш(2)**  
    Если вы думали что у вас всё плохо, прочитайте любое его произведение, то поймёте, что не так уж всё и плохо. Сам автор этой книги повидал в жизни много, и как я понимаю большинство, им написанное реальные факты. Во общем читать одно удовольствие, рекомендую=)
*   **«1984» Джордж Оруэлл(27)**  
    Потрясающий роман (антиутопия), изданный в 1949 году. Действие романа происходит в 1984 году в Лондоне, где царит тоталитарный режим. Очень жестко, очень жизненно. В 2009 году признан газетой The Times, лучшей книгой, опубликованной за последние 60 лет. Так же советую прочитать «Скотный двор» этого же автора.
*   **«Зубная фея» Грэм Джойс**  
    Существует поверье: если ребенок, засыпая, положит под подушку выпавший молочный зуб, его заберет Зубная Фея и оставит вместо зуба монетку.  
    Наверно, книга про то, как взрослеет человек и вместе с этим «взрослеет» окружающий его мир, его сны, его кошмары

  

#### Юмористические книги. Пародии.

  

*   **«Кысь» Татьяны Тослстой(1)**  
    Веселая сказка-утопия, давно так не смеялся. Пожалуй, одна из лучших книг, которые читал. Хотя местами неоднородна и где-то к концу становится несколько бессмысленной (заметно, что в разное время писалась), но в целом всё равно шедеврально. Хорошо прочищает мозги сама идея такого будущего, а также полное погружение в него (включая социологические особенности, новые игры, неологизмы, гастрономические особенности, менталитет, стесненный культурными, научными, техническими ограничения). Зимними вечерами перечитывать обязательно!
*   **«12 стульев» И.Ильф, Е.Петров(18)**  
    Была, есть, и останется образцом юмора и остроумия; энциклопедией жизни и даже наглядным пособием для начинающих великих комбинаторов.
*   **«Золотой теленок» И.Ильф, Е.Петров**  
    еще большее разнообразие сюжетов и мемов («Инда взопрели озимые», «запускайте Берлагу», «опометайся, пан», «сермяжная правда русской интеллигенции», «ты самка, варвара»), а может их там и не больше, а просто они менее заезжены. Ну не знаю, но больше всегда тянет теленка перечитать :)
*   **«Торговец пушками» Хью Лори**  
    Не назвал бы пародийный боевик пищей для мозгов программиста, но как развлекательное чтиво просто замечательно. Небанальные наблюдения, элегантный слог, тонкие шутки — как и во всем творчестве Вустера-Хауса.
*   **«Дайсмен» Люк Райнхарт**  
    Безбашенная книга и потрясающая пародия на психоанализ, Дайсмен — увлекателен, насмешлив и шокирующ, настоящий диверсант в тылу американской культуры. В общем — самый культовый бестселлер наших дней.  
    Одолеваемый депрессией психиатр и психоаналитик Люк Райнхарт живет с женой и двумя детьми в Манхеттене. Восточная и западная философии с их тщетой объять смысл и бессмысленность, его уже просто бесят. Но как-то он рискнул доверить костяному кубику свой выбор — и вскоре понял: единственный путь спасения души — позволить все решать жребию. Катясь, как кубик, сквозь секс и психотерапию, Люк распространяет новую религию, забавно сочетая проповеднический пыл и собственную развращенность, ставя дыбом и свою жизнь, и мир вокруг в целом.
*   **«Суер-Выер» Юрий Коваль**  
    Недавно переоткрыл для себя этого писателя после далекого детства (многие, думаю, помнят «Недопеска Наполеона III» и «Васю Куролесова»).  
    Отличное чувство юмора и прекрасное владение слогом. Для меня «Суер-Выер» — нечто такое же масштабное, как «Автостопом по галактике». А может и круче. Даже странно, что эта книга не так популярна. Не рекомендуется законченным прагматикам. Кроме книжного чтения крайне рекомендуются аудиоверсии в длинной дороге в хорошей компании. А в идеале — чтение вслух.
*   **«Самая легкая лодка в мире» Юрий Коваль**

  

#### Детективы.

  

*   **«Азазель» Борис Акунин(4)**  
    Это тот случай, когда весь цикл романов о Фандорине увлекателен. Если не смотрели фильм — прочтите Азазель, если смотрели — начните, может быть с любой другой книги цикла «Приключения Эраста Фандорина» (всего их 11), чтобы не знать сюжет (хотя это далеко не главное здесь). Хоть я и не увлекаюсь детективами, но здесь невозможно оторваться. Сюжет, завязка, развязка, художественные приемы — всё на высоте у Акунина. Хоть и легкое чтиво, но никак не пустое. Очень хороший литератор.
*   **«Занимательная механика» Вадим Панов**  
    Книга относится к циклы La mystice de Moscow, яявляетс самостоятельным произведением. В центре сюжета — очень странное убийство одного Олигарха, на которое отправляют одного из лучших сыщиков уголовного розыска. Но не подумайте, что это — детектив. За сюжетом поднимается вопрос творчества и профессионализма. Рассказывается про Мастеров своих дел, которые положили жизни на алтарь какого-то дела и получили невероятные силы в этом деле. Очень советую тем, кто ищет свой путь в жизни и колеблется, не зная, что выбрать. Да и просто всем — книга глубокая и интересная
*   **«Черная орхидея» Джейм Эллрой**
*   **«Секреты Лос-Анджелеса» Джейм Эллрой**
*   **«Американский таблоид» Джейм Эллрой**

  

#### Книги о возможном ближайшем будущем.

  

*   **«День бумеранга» Кристофер Бакли(4)**  
    Довольно занятно рассказывается о возможном будущем пенсионной системы.
*   **«Атлант расправил плечи» Айн Рэнд(6)**
*   **«Мародер» Беркем аль Атоми(3)**  
    Эту книгу, наверное, можно отнести к постаппокалептическим, ну и, с натяжкой, к руководству по выживанию.  
    Книга о том, как меняется человек, когда его жизнь становиться одним сплошным полем сражения.  
    осторожно, присутствует нецензурная лексика.
*   **«Мародер-2.Каратель» Беркем аль Атоми**
*   **«День триффидов» Джон Уиндем(2)**  
    захватывающая книга. Кстати, где-то читал, что эта книга стала идейным вдохновителем создателя фильма «28 дней спустя».
*   **«Ночь триффидов» Саймон Кларк(2)**  
    Продолжение книги Джона Уиндема. Несколько хуже написано, на мой взгляд, чем «день триффидов», но в целом тоже интересная книга.
*   **«Я легенда» Ричард Мэтисон(2)**  
    Мне очень понравилась эта книга. Главная идея книги — одиночество и ее влияние на человека.

  

#### Фэнтэзи.

  

*   **«Хроники Амбера» Роджер Желязны(23)**  
    Классика. Одна из тех книг, которые хочется забыть, чтобы снова прочитать в первый раз. Одна из лучших фантастических саг со своим миром.
*   **«Песнь льда и пламени» Джордж Мартин(7)**  
    Фэнтези я не люблю, но для этого произведения можно сделать исключение :)  
    На мир надвигается великая зима — период оледенения, но людям не до этого, они заняты другим. Интриги, предательство, властолюбие и жестокость — все в полном комплекте, а тем временем угроза всеобщего уничтожения надвигается все ближе.  
    Написано великолепно, все персонажи очень ярки и убедительны психологически. Must read :)
*   **«Колесо времени»Роберта Джордана**  
    «Многотомная сага Роберта Джордана выделяется на фоне других фэнтези-эпопей не только объемом. Оригинальный и подробно прописанный мир — одна из причин, по которой за приключениями Ранда ал’Тора следят сотни тысяч читателей.»  
    ""«Колесо Времени» (англ. The Wheel of Time, сокр. WoT или tWoT) — цикл литературных произведений американского писателя Роберта Джордана в стиле фэнтези. Помимо общей сюжетной линии — борьбы Ранда ал’Тора (Дракона Возрождённого) с происками Тёмного перед Последней Битвой в книгах разворачиваются многочисленные второстепенные сюжетные линии — героические, любовные и даже детективные и политические.
*   **цикл книг про Ведьмака и Цири А. Сапковский**  
    Интереснейшее фэнтези. Читать, в том числе, интересно, т.к. автор поляк, а не, например, американец. Очень сильно ощущается близость к нашей культуре.
*   **цикл книг про Рейневана А. Сапковский**  
    Тоже фэнтези. Повествование погружено не в вымышленный мир, а в историческую реальность 15 века. Невероятная историческая детализация того времени (из-за которой порой тяжело читается). Но все равно нравится.
*   **«Волкодав» Мария Семёнова**  
    Книга о твёрдости убеждений и силе духа.
*   **«Песнь льда и огня» Дж.Мартина**  
    Несмотря на фентезийную суть(есть магия, драконы, нежить), читается как исторический роман. Войны, интриги, победы, поражения и предательства.  
    Цикл рассказов «Плоский мир» Терри Пратчетта — юмористический фэнтези. Всего в цикле переведено 36 книг.  
    Лично я сейчас читаю 34-ю. Такого юмора я не видел еще нигде, но из-за огрехов перевода некоторые фразы и даже целые рассказы немного теряют свой блеск и привлекательность (например, «Стража! Стража!»). Любителям фэнтези должно понравиться.
*   **«Маг в Законе» Генри Лайон Олди**  
    Об учителе и ученике, о ремесле и искусстве — с офигенными стихами, вплетенными в текст, и замечательным языком. Книга, которая заставляет задуматься, как и большинство вещей Олдей. Без лишнего мордобоя, без супергероев, в общем абсолютно нефентезийная вещь — хотя в Российской Империи этой книги маги существуют, притом заняв экологическую нишу преступников.
*   **«Властелин колец» Дж. Р. Р. Толкиен**
*   **«Кровь и честь» Саймон Грин**  
    Для меня это одна из тех книг, которые скорее для души, а не для мозга. Это фэнтази, причем героическое фэнтази в полном смысле этого (грязного? ;) слова. Чем-то определенно напоминает Ника Перумова. Иногда откровенно ловишь себя на мысли, что фигня фигней же, но зато как затягивает… Наверное, лично я читаю эту книгу, когда хочется каких-то крайне простых, может быть даже примитивных, истин: верных друзей, заклятых врагов и героев прущих через любые преграды на перекор всякому здравому смыслу.

  

#### Роман.

  

*   **«Бойцовский клуб» Чак Паланик(28)**  
    Культовый в определённых кругах роман. На меня произвёл очень сильное впечатление.
*   **«Бегом с ножницами» Огюстен Берроуз(4)**  
    Иногда умираешь со смеху, иногда кричишь от омерзения. Сложно не сойти сойти сума и не начать подражать героям. Рекомендую всем любителям серии «альтернатива».
*   **«Мастер и Маргарита» Михаил Булгаков(22)**  
    Любимая, любимая, моя сказка. Воланд, Азазелло, куриная ножка, Кот Бегемот, примус, люстра, браунинг, чекисты, Аннушка, масло… форэва!)
*   **«Уловка-22» Джозеф Хеллер(7)**  
    Замечательный антивоенный полуабсурдистский роман.
*   **«Большие надежды» Чарльз Диккенс(4)**  
    Книга, повествующая о жизни одного молодого юноши, который рос в простой обстановке, в одной мелкой деревушке в Англии. Но в один прекрасный день у него появляется возможность стать настоящим аристократом, человеком богатым и образованным. Но все не так просто…  
    Книга добрая, очень душевная. Советую тем, кто еще не разучился чувствовать душевные порывы своего сердца.
*   **«Вся королевская рать» Р.Уоррен**
*   **«Диктатор» Сергей Снегов**  
    Фантастический роман об обычном человеке, который волею то ли случайностей, то ли предопределённостей стал руководителем страны, раздираемой войной. Жёстким и циничным руководителем — по-настоящему, без сюсюканья и стыдливых цензурных пропусков.  
    Читать тяжело, но… захватывает. По крайней мере, после «Диктатора» когда-то казавшаяся мне грандиозной космическая сага «Люди как боги» того же автора выглядит школьным сочинением.
*   **«Поколение П» Виктор Пелевин**  
    Эта книга, наверное, оказала сильнейшее влияние на меня из всех прочтенных мною художественных книг.  
    Некоторые моменты в книге открывают глаза на экономическую и медиа систему мира.
*   **«Поколение X» Дуглас Коупленд**  
    Роман о потерянном поколении, о поиске себя и смысла своей жизни, самоидентификации, отрицании навязываемых искусственных ценностей и стандартов и нежелании мириться с окружающим нас лицемерием.
*   **«Над пропастью во ржи» Дж. Селинджер**  
    Роман написан 50 лет назад, а его тема до сих пор актуальна.
*   **«Два капитана» В. Каверина**  
    Добрая, светлая книга о людях, дружбе, любви. С каждым разом нравится все больше и больше.
*   **«Маленький дьявол» Ирина Оловянная(3)**
*   **«Смок Белью» Джек Лондон(3)**
*   **«Смок и Малыш» Джек**",null,undefined
2016-03-03T07:47:16.000Z,https://knife.media/meditation/,false,"[""best""]",article,Мой нейробиолог Далай-лама: как медитация покорила ученых,null,pocket,null,"# Мой нейробиолог Далай-лама: как медитация покорила ученых

[knife.media](http://knife.media)

Бритоголовый мужик в оранжевом платье сидит, скрестив ноги и закрыв глаза. Проходят минуты, часы, а он всё так же сидит, размеренно и глубоко дыша. «Зачем ему это? Ему что, нечем заняться? К тому же, наверняка он спит» — думаем мы с вами. С концептом медитации связано слишком много эзотерического, спиритического даже, чтобы мы могли не кривясь думать о ней. Слишком много людей, говорящих о Духе и Просветлении, увлекаются медитацией, чтобы современный рациональный человек мог со сесть рядом с бритоголовым мужиком, скрестить ноги и вздремнуть.

Не помогает и то, что медитация всегда была религиозной практикой. С момента возникновения (примерно в 5-6 веке до нашей эры) ею активно пользовались буддийские монахи, индуистские йоги, затем монахи-христиане, мусульманские суфьи и даже каббалисты. Неудивительно, что многие из нас относятся к медитации с той же долей уважения, что и к шаманским пляскам или куклам вуду. И очень зря.

Очень долго интеллектуальный истеблишмент с презрением взирал на практики «духовного роста», и лишь в начале 2000-х решил проверить, как же оно есть на самом деле. И внезапно нам открылась мудрость древних йогов. Теперь, после пятнадцати лет научного изучения медитации, мы знаем, что практикующие её люди существенно повышают свои шансы на здоровую и долгую жизнь. Среди прочего, занятие медитацией замедляет клеточное старение (повышая активность теломеразы), улучшает работу сердца и снижает активность генов, отвечающих за воспаление — причину многих хронических болей. И мы даже не начали говорить о благотворном влиянии медитации на наш основной орган — мозг.

### **Что такое медитация и с чем ее едят?**

Прежде чем обсуждать влияние медитации на мозг, надо разобраться, что вообще такое медитация. В самом усреднённом виде — это практика спокойного, недеятельного созерцания чего-либо. Зачем? Чтобы успокоить и очистить ум, достичь эмоциональной гармонии, осознанности, культивировать в себе любовь и сострадание. Почувствовали запах дешёвых индийских благовоний? Если да, то харе харе.

Не важно, прыгаете ли вы с шестом или строчите отчёт на компьютере — лёгкость действия достигается тренировкой определённых нейронов в мозге. Способность ясно мыслить, сохранять спокойствие, любить своих ближних и ощущать мир как он есть — такие же навыки, как и все остальные. Без должной тренировки они навсегда останутся неразвитыми. Медитация — единственный известный нам способ тренировки этих навыков.

Поскольку люди медитируют по меньшей мере со времён Будды, есть множество различных практик и подходов к этой практике. Одно время в Индии даже существовали университеты медитаций, вроде Наланды — пока их в 12 веке не разгромили мусульмане. Не переживайте, рыскать в поисках утраченного знания или перелопачивать тысячи существующих практик не нужно, достаточно знать всего три. Медитация сфокусированного внимания, медитация открытого созерцания и медитация сострадания и наполненной любовью доброты (опять-таки, харе харе).

### **Сфокусированное внимание — от прокрастинации**

Сфокусированное внимание — тип медитации, с которого обычно начинается обучение. Медитатор (есть и такое слово) концентрирует своё внимание на дыхании, позволяя тому течь размеренно и свободно. Рано или поздно разум начинает витать в облаках — это случается даже у Далай-ламы, поэтому задача медитатора спокойно переключить внимание обратно на вдох и выдох.

Вы пытаетесь вернуться к работе, но спустя пару минут снова оказываетесь по уши в ерунде. Если да и если вы хотели бы изменить ситуацию, практика сфокусированного внимания — для вас.

Именно она положила начало научному изучению медитации. Буддийских монахов, провёдших в своей жизни больше 10 тысяч часов в таком состоянии, [попросили](http://www.ncbi.nlm.nih.gov/pubmed/15534199) помедитировать в камере МРТ. И не просто помедитировать, а ещё и нажимать кнопку каждый раз, как их внимание утратит фокус. Вернее, когда они это поймут.

С помощью МРТ учёные отлично видели, когда в мозгу монаха начинался поток случайных мыслей — активизировались соответствующие отделы мозга. Чем менее испытуемый был искушён в медитации, тем дольше он проводил в таком состоянии. Потом активность мозга смещалась, монах понимал, что бродит в облаках, жал кнопку и снова фокусировался на дыхании.

И постепенно мозг как бы затихал — кроме одного-единственного участка префронтальной коры, связанной с концентрацией. Никто из контрольной группы, набранной из не практикующих медитацию, и близко не подошёл к такой тишине мозга. Раз за разом учёные видели, как люди теряют концентрацию и даже не осознают этого.

### **Открытое созерцание — от депрессии**

Второй тип медитации, открытое созерцание, является своего рода усложнением практики сфокусированного внимания. Вместо того, чтобы уделять внимание одному объекту мира — конкретно дыханию — внимание уделяется сразу всему. Каждому визуальному стимулу, звуку, внутреннему ощущению и даже диалогу с самим собой, который мы, современные люди, ведём не прекращая.

Но распределять внимание нужно особым образом: не зацикливаясь на чём-то одном, отдалять фокус так, чтобы захватить все ощущения, какие только есть в вашей голове в данный момент. Со временем ваше осознание ощущений как целой картины растёт, тогда эмоциональная зависимость от какой-либо части целого (конфликт с домашними, работа и пр.) снижается, и вы достигаете ощущения умиротворённости и спокойствия.

Например, вы ищете ошибки в документе. Первая найденная вами ошибка завладеет вашим вниманием настолько, что вы почти наверняка пропустите следующую, если она находится недалеко от первой, а ваш взгляд скользит по строчкам с достаточной быстротой.

Так происходит из-за того, что мозг бросает все ресурсы на первую ошибку и не успевает их восполнить, чтобы подать вам сигнал о второй. Однако чем больше вы пытаетесь объять внутренним оком целое, практикуя открытое созерцание, тем лучше ваш мозг [справляется с подобной задачей](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2789281/).

Это распространяется на любой стимул в целом: [мелкие стрессы, боль](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3580050/), да и вообще всё на свете будет вызывать у вас меньше негативных эмоций. В мозге медитаторов-экспертов существенно уменьшены отделы, отвечающие за беспокойство и агрессию. Такие люди способны управлять своим телом гораздо лучше нас: одним усилием воли они могут понизить в себе уровень гормонов стресса. Вспомните об этом, когда вам придется в следующий раз делать презентацию перед сотней более опытных коллег или общаться с назойливыми родственниками на тему вашей личной жизни.

### **Медитация сострадания и доброты —  
от эмоционального выгорания**

В современном мире считается нормальным, что каждый любит только самого себя. Впрочем, и себя полюбить получается далеко не всегда, мешает несоответствие множеству стандартов. Если у вас есть желание это поправить, если вам в целом хочется чувствовать себя комфортнее, лучше понимать окружающих и прекратить жить в мире собственных иллюзий — это практика для вас.

Вместо того, чтобы фокусировать внимание на дыхании или на мире в целом, медитатор концентрируется на чувстве благорасположения и любви к людям. Да — ко всем людям вообще. Для этого человек повторяет про себя любой вариант фразы «Пусть все существа обретут счастье и освободятся от страданий» (если от перспективы произнести такое по-русски ваш циничный мозг коробит, начните с варианта на тибетском или хинди). Можно представить себя на месте другого человека, которого вы знаете, и попробовать прочувствовать то, как он ощущает мир. Можно же просто концентрироваться на желании помогать людям.

По заверениям исследователей, этот тип медитации — не просто упражнение в духовном росте.

Так вот, после должной тренировки медитации сострадания вы сможете не просто лучше понимать мотивы других людей и искренне сопереживать им — этот процесс [не будет отнимать у вас сил](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC4040103/). У людей, практикующих медитацию сострадания и доброты, повышена активность в областях мозга, отвечающих за милосердие и позитивные эмоции.

### **Путь в лучшее будущее**

В 2005 году Далай-ламу пригласили выступить на конференции по нейробиологии. Пару сотен учёных это оскорбило настолько, что они потребовали отменить приглашение. Религиозному деятелю, мол, нечего сказать науке. Как оказалось, они были не правы и, надеюсь, сейчас сожалеют о своей выходке.

Медитация не является прерогативой буддистов или йогов. Медитировали и тамплиеры, и монахи Троицкой лавры, и ассасины Рашид ад-Дин Синана. Но только буддисты и йоги разработали систему практик, которой может овладеть каждый — было бы желание и терпение. Как и любому навыку, медитации невозможно научиться за один день. Исследования показывают существенную разницу между возможностями новичков и медитаторов со стажем.

Другой пример — самосожжение монаха [Тхить Куанг Дыка](https://ru.wikipedia.org/wiki/%D0%A2%D1%85%D0%B8%D1%82%D1%8C_%D0%9A%D1%83%D0%B0%D0%BD%D0%B3_%D0%94%D1%8B%D0%BA), которого даже пожирающее тело пламя не вынудило выйти из медитации. Никто не призывает вас повторять его поступок, но спокойствие этого человека, умершего в позе лотоса, и его способность игнорировать боль даже невольно вызывают восхищение.

Однако всё это не должно нас удивлять. От людей, которые веками оттачивали искусство управления своим разумом, странно ожидать меньшего, и странно предполагать, что подобный контроль человека над своим разумом не скажется на его мозге. Науке оставалось только отбросить свои предрассудки, чтобы понять: медитация — это практически панацея от стресса, утомления, эмоционального истощения, постоянной вереницы дурных мыслей, невозможности сфокусироваться и прочих бедствий нашего века информации, процессы в котором продолжают набирать скорость.

Теперь дело за вами.

Если же вы готовы попробовать, то начните с малого. Каждый день старайтесь выделить время для себя. Отключите телефон, найдите место, где вас никто не будет беспокоить. Можете поставить таймер на десять минут. Сядьте как-нибудь удобно, не развалившись, желательно с прямой спиной — для этого неплохо подходит край обычного стула. Дышите ровно. Если нужно — закройте глаза, только не засните.

И просто следите за дыханием, чувствуйте как воздух входит и выходит из вашего тела. Только это. Если какая мысль начнёт вас уводить за собой — а она начнёт — спокойно поймайте себя на этом и верните внимание на дыхание. Если вы сможете повторять это каждый день в течение пары месяцев, то вы заметите ощутимые перемены. Вы станете меньше растрачиваться на пустые ссоры и конфликты, сможете лучше фокусироваться на работе, разговоре или книге. Жизнь в целом станет приносить гораздо больше радости. Всё это — всего за десять минут в день. Харе харе.",null,undefined
2018-01-10T21:33:02.000Z,https://medium.com/@kovchiy/%D0%BF%D0%B5%D1%80%D0%B5%D0%B4-%D1%82%D0%B5%D0%BC-%D0%BA%D0%B0%D0%BA-%D0%B2%D1%8B-%D0%BE%D1%82%D0%BA%D1%80%D0%BE%D0%B5%D1%82%D0%B5-%D1%81%D0%B2%D0%BE%D0%B5-%D0%B7%D0%B0%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-8baf3a4eb852,false,"[""best""]",article,"Перед тем, как вы откроете свое заведение",null,pocket,null,"# Перед тем, как вы откроете свое заведение

by [Danil Kovchiy](https://medium.com/@kovchiy), [medium.com](http://medium.com)  
January 10, 2018 12:20 PM

Привет, ребята. Так вышло, что я часто бываю в разных заведениях Москвы: секретные, прости господи, бары, бандитского шика рестораны, концептуально выдержанные места и никем-непонятые-вечно-обиженные кофейно-винные снобы. Я зачем-то хочу поделиться с вами впечатлениями и выводами. Вдруг ты соберешься открыть свое место, а я к тебе приду — надо, чтобы все прошло гладко, и я захотел вернуться.

Будет много ссылок на бары, кафе, бренды и магазины, больше чем в инстаграме фитоняши-блогера, но не пугайтесь — я лишь хочу подчеркнуть доступность и близость примеров, чтобы вы могли сами посетить места, понять как они работают, а затем, если лень или некогда искать самим, пройти по ссылкам, всё нужное выбрать и заказать. У меня на самостоятельный поиск ушли годы.

Ну да, я не только бываю гостем в заведениях. Кое-что наблюдаю изнутри.

# Жанровая принадлежность

Однажды я сделал для себя три открытия:

1.  Ресторан со скатертями, кафе с подоконниками, бар в подвале с пропусками и гадюшник в Китай-городе — это жанры заведений, а не шкала по убывающей.
2.  Есть хорошие и плохие представители жанров.
3.  Что одному жанру хорошо, другому смерть.

Скажем, если вы приходите в какой-нибудь питерский [Терминал](http://www.the-village.ru/village/food/new-place/160295-terminal-bar) и начинаете рассуждать о коктейлях — вы выглядите идиотом. Вообще, снобизм больше идет Москве, а в Петербурге хочется деревенского рома с сахаром. Однако, если вам сделают плохой Сазерак в [коньячном баре](http://geraldine.ru/), это _звоночек_. Но в Жеральдин все равно можно сходить: там вкусная еда и прекрасная мебель — просто, не надо было мне садиться за стойку.

Не ждите коктейлей от ресторанов, не берите стейк из лосося в итальянском заведении с пиццей и пастой. Не ругайтесь на телевизоры и интерьеры хинкальных — такие уж они ребята, зато готовят как.

Есть, кстати, место на Курской, где устроили «управляемый китч» — [турецкое кафе Cezve](https://www.afisha.ru/msk/restaurant/352320/).

Все, что вы там увидите, противоречит многому, о чем я напишу ниже. Но как прекрасно оно противоречит. Это вышка.

# Меню

Потом я сделал еще одно открытие:

> У вас либо сложные напитки и простая еда, либо сложная еда и простые напитки.

Если в баре джин настаивают на барсучьем жире и южноафриканских тараканах, то важно вовремя остановиться и не предлагать насекомых на закуску; нужны орешки, чипсы, брускетты, кусок мяса или рыбы, вкусный хлеб (это то, что я называю простой едой). Есть вроде как исключения, когда ребята предлагают к коктейлю конкретную сложную закуску — но это часть подачи (см. почивший «22:13» и «Никуда не едем»), этим все равно не наешься. А когда уже полночи сидишь в баре, внезапно может захотеться _просто поесть_.

Если у вас каждый сезон работает новый шеф-повар с мишленовскими звездами, смешивает пломбир с бальзамическим уксусом — пить лучше вино (да, вина, коньяки и прочее чистое я называю простым).

Если этот баланс не соблюдает само заведение, я рекомендую вам, как гостям, самим его соблюсти, чтобы не смазывать ощущения от места. Скажем, приходя в модный гастро-бар-ресторан на Патриках лучше взять сложной еды и вина, либо сложный коктейль с примитивную закуску (оливки, чипсы, орехи). Иначе, наступает передоз вкусов, все со всем начинает спорить. Опять же, если бармен/официант уверяет, что коктейльное меню дружит с едой, то ура, вы пришли куда надо, можно довериться ребятам (но это большая редкость; за бар и еду отвечают разные люди, решающие разные задачи).

## Меню/Вино

Это отдельная больная для меня тема. Вот как выглядит винная секция меню большинства заведений:

Знаете что? Я не разбираюсь в винах настолько. И люди, с которыми я общаюсь, тоже не разбираются в них настолько. Те, кто считает что разбирается, часто сыплет обрывочными сведениями, бесполезными для ситуации: «пино гриджо бывает разным, так что сорт ничего не гарантирует» или «у этого пинотажа в позапрошлом году странный урожай был» или «какие в %country\_name% могут быть виноградники?».

А еще если зайти в винный магазин, то в глазах рябит от количества брендов. Их слишком много, чтобы название мне о чем-то говорило. Существует вероятность, что я найду знакомую строчку, но и что с того? Заказывать позиции просто потому что ты это уже пробовал — это крайние меры.

Как надо рассказывать о винах? Вот так:

Второй момент — неловкость при выговаривании названия вина. «Москатель Гран Фе…уедо кхм Испания» — ты чувствуешь себя идиотом, а официант морщится и щурится, пытаясь понять, чего ты хочешь. Тыкать пальцем в позицию тоже неловко, а приходится.

Как должна выглядеть винная строчка в меню:

*   **Испания** · Moscatel Gran Fuedo · _вкус: абрикосы и персики_ ….. 350 ₽

Если страны в позициях не повторяются (а они обычно не повторяются), то человек с легкостью произнесет «два бокала белого испания». А если в меню две Испании, ну пронумеруйте, делов-то:

*   **Испания №1** · Moscatel Gran Fuedo · _вкус: абрикосы и персики_ ….. 350 ₽
*   **Испания №2** · Sangre de Toro · _вкус: травы и лимон_ ….. 450 ₽

## Меню/Коктейли

Тут все заведения изворачиваются по-своему, но редко делают правильно. Часто группируют коктейли по основе: вот на роме, а вот на джине — это тупо, потому что на первом месте стоит характеристика вкуса (на которую основа влияет весьма опосредованно), на втором крепость, на третьем подача. Другая болячка — группировка тематическая, там аж стыдно бывает за ребят: заголовки «хорошее начало вечера» или «хочется чего-нибудь этакого».

Как можно сделать. Ну вот кусок меню с одной из наших вечеринок (простите за фрактуру, у нас был вечер любителей свэга):

Потом была еще версия (не смог найти картинку) где коктейли были упорядочены от легкого к крепким (тяжелым) сверху вниз. Примерно от Мартини Рояль до Сазерака. О принципе упорядочивания мы там же предупреждали.

Можно и состав раскрыть, само собой, но так, чтобы это звучало понятно и органично:

*   **Sazerac:** ржаной виски с горечью и сахаром
*   **Old boy:** спрятанная в клубнике и грейпфруте водка

А не так:

*   **Sazerac:** Knob Creek Rye, Angostura bitter, Peychaud’s bitter, sugar
*   **Old boy:** водка, клубника, грейфрут, сахар, перец чили

Только не надо перегибать и писать про историю коктейля, как жил был граф Негрони…

И еще крутая находка — схематично, без фанатзима, намекнуть на подачу — чтобы брутальный мужчина не заказал себе лонг с трубочкой.

# Интерьер

Это глубокая кроличья нора. Так что я по верхам пробегусь. Точнее, по функциональной стороне вопроса.

## Интерьер/Вход

Большинство заведений, кажется, в последний момент, когда уже сделан ремонт и закуплена мебель, вспоминают что люди не просто возникают за столом и пропадают, а _приходят_ и _уходят_.

**Когда гости приходят, их надо раздеть.** Образцово-показательно момент отрабатывают заведения Раппопорта — у них есть отдельный гардероб. Если гардероба нет, сделайте зону с вешалками, но и тут есть важные пункты:

*   Это отдельная от столов зона, чтобы над человеком на нависала чужая шуба (неприятно и человеку, и владельцу шубы).
*   Не крючки, а плечики на палке: не у всех вещей есть петли для подвешивания, шубу или пальто неприятно вешать на крючок, на крючках одежда собирается в некрасивую торчащую кучу, из-под которой сложно изымать свою куртку; плечики занимают меньше места.
*   Если кто-то решил раздеться за столом — это не его территория свободы, рядом другие гости, им неприятно. Официант может подойти уже с плечиками в руках и предложить помочь с одеждой.

Кстати, а кто встречает людей в вашем заведении? Охранник? Свободный между заказами официант? Короче, тут два правильных ответа:

*   Никто не встречает.
*   Встречает хозяин (хорошо, когда это яркий образ: королева бара, отец всех барменов, девушка с забитыми рукавами и хорошим чувством юмора).

Если это дрессированный человек с папочкой, который замечает входящих через раз, отвлекаясь на телефон, и тараторящий стандартное:

*   Здравствуйте. Столик заказывали?
*   Проходите раздевайтесь.
*   Где хотите присесть?
*   Вы вдвоем?
*   Сейчас официант к вам подойдет.

То это провал. Не конец, но жирный минус, причина пойти в другое место.

В разделе Интерьер человек становится мебелью — звучит немного неприятно, но вход очень тесно связан с тем, кто встречает. Встречает или останавливает у входа?

Заведения, куда (как правило) приятно заходить:

*   [Молоко](https://www.afisha.ru/msk/restaurant/35622/)
*   [Все рестораны Раппопорта](http://rappoport.restaurant/restaurant)
*   [Noor](https://www.noorbar.com/) (особенно, в старую версию)
*   [Кафе Лебедева](http://cafeterius.ru/)
*   [Бар Антикварный](https://www.afisha.ru/msk/restaurant/311729/)

Я постоянно повторяю гость-гости-гостям, потому что хочу быть гостем, а не клиентом, которого надо обслужить. Конечно, тут и гостям надо соблюдать границы и не ставить себя выше официанта — но люди принимают правила игры, если их транслировать с порога.

## Интерьер/Барная стойка

Давайте на примере. Вот Noor, старая версия и новая:

Стойка стала сильно хуже (я не буду ныть, что раньше было лучше, но тут очень удачный пример с одним и тем же ракурсом). Так вот, что испортилось:

*   Стулья за баром теперь со спинками. Это плохо. Бывает хуже, когда это закрытые раковины. В чем тут дело — такой стул занимает больше пространства, мешает стоящим подойти к стойке, сделать заказ и забрать коктейль. На такой стул дольше усаживаться, его нужно разворачивать, вокруг одного стула не соберется кучка людей. Понимаете, бар — это не зона личного комфорта, это место, где должно быть тесно. Если в баре не тесно, там некомфортно, пусто, неуютно.

*   По кромке барной стойки зачем-то сделали ложбинку — в нее регулярно проливаются напитки, цепляются и роняются бокалы. Эта поверхность должна быть ровной и широкой.
*   И тактильной. Старая версия стойки выложена кафелем. На тот момент (Москва, 2012) это был очень смелый и правильный ход: заведения боялись что гостям будет холодно-неуютно и делали поверхности деревянными; а это не то чтобы плохо, но уже приедалось и не все понимали, каким должно быть дерево. Если несколько часов проводишь за стойкой, то касаться стерильной, идеально гладкой, покрытой толстым слоем лака поверхности неприятно; хочется чувствовать шереховатость, швы, материалы, царапины, сколы, температуру.

Где оправданы закрытые барные стулья? На рынке и других проходных зонах: там ты не стоишь вместе с людьми, а мимо тебя постоянно хотят, толкают и спешат — в этом случае спинка и подлокотники тебя защищают и успокаивают.

## Интерьер/Столы и стулья

Что не так на фото?

Бойтесь стеклянных столов, если не понимаете, зачем они вам. Скажем, в Noor’е были стеклянные столешницы, но кромка из дерева (то место, с которым чаще всего соприкасаются руки). При этом стол был круглым, а под ним проглядывал ковер и плитка.

Злое квадратное стекло, за которым проглядывает деревянная столешница — это глупое декорирование, пустой расход материала, нетактильная штука. Стол при этом огромный (а в заведении ничего кроме кофе, чая и печенья нет). То есть две чашки, огромное холодное стекло и мы еле слышим друг друга на таком расстоянии:

Можно делать интерьер грубым, но нельзя делать его злым и опасным. Смотрите на нижний левый угол — это острый кусок из металла и стекла. Там еще довольно тесно стоит мебель — я могу ударить ногу вообще-то.

Это барная стойка бара [Veladora](http://www.the-village.ru/village/food/place/294318-veladora) — темный подвал, голый кирпич, бетонная стойка, крепкие мужицкие коктейли, но у столешницы спилен угол под 45º.

Вернемся к первой фотке, там был кожаный диван. Во-первых, никогда не покупайте копии честеров: они неудобные, у них смешные пропорции, а подушки под сидящим всегда очень некрасиво прогибаются.

Во-вторых, идеально новая кожаная мебель выглядит холодной и неуютной. Привыкайте к старой благородной коже. Вот как надо:

Оригиналы стоят от 300 000 ₽ — дороговато. Но вот [ребята раз](https://www.instagram.com/repeatstory/), вот [ребята два](https://www.instagram.com/mobeledom/) — продают б/у мебель, в том числе те самые роскошные старые кожаные диваны в районе 75 000 ₽. Если хотите новое или думаете, что 75 — это дорого, то я вам покажу, что значит [дорого](http://www.homeconcept.ru/catalog/mebel/sofas/).

**Ну и раз на фотке лофт**, то пару слов и о нем. В лофте нет ничего плохого, если его разбавлять. Кто-то считает это устаревшей историей, я же отношусь к нему как к рваным джинсам — когда-то это было протестом, теперь почти классика. Но чистый лофт скучный:

Хороший пример комбинирования идей лофта и новой волны — [ресторан Sagah](http://www.admagazine.ru/inter/113945_restoran-sagah-v-moskve.php):

**Ах да, чашки** на том фото тоже ужасные: в ручку не пролазит палец, типа «вы не должны этого хотеть, воспитанные люди так не поступают», но чашка при этом большая, тяжелая и горячая — боишься ее уронить, поддерживаешь за дно, которое тоже горячее; бесишься, ставишь на стол; кофе остывает. Но нет, еще и про посуду я уже не готов писать.

**И еще про стулья:** старайтесь делать их открытыми. Закрытая мебель ест пространство и оправдана только если вы целенаправленно хотите изолировать людей: скажем, у вас ресторан и плотно стоят столики.

А вот комбо из всех граблей собрали:

И еще очень раздражающий момент: постоянный **визг двигающихся стульев**. Сначала гости усаживаются, затем встают, затем официанты стулья на ставят место. Если стул немного наклонить, оперев на две ножки — визга не будет. Но никто так не делает. Поэтому, ребята, идите в ближайший Мосхозторг и купите там войлочные наклейки на ножки:

Итак, стулья не елозят, открытые и прекрасные. А об стол сложно порезаться. Но рано расслабляться — проверьте, как соотносится высота сидения и столешницы. По личным ощущениям, в 50% соотносится плохо. Там есть три измерения:

*   Формат блюд
*   Сочетамость мебели
*   Эргономика про ±5 см

**Про блюда всё просто:** закуски вписываются в журнальные столики и высокие столы; туда же кофе, вина, котейли. Столы классической высоты предполагают классические обеды-ужины с вином. Я бы на месте владельцев предусмотрел в заведении с едой все три типа высоты: низкая посадка, средняя и высокая (барам можно без средней).

Вообще, я даже заострю на этом внимание: в Москве мало экспериментируют с форматами посадки. Например, смотрите, какое очаровательное место для двоих и как грамотно подобрана мебель:

Левее и выше на снимке классические столы, там едят; полузакрытые кресла изолируют от людей, сидящих позади и выше тебя (это важно для комфорта), а спереди, перед ногами, проходная зона (на фото сверху справа виден вход в заведение). Тебе дают меню с напитками и ты можешь сидеть с кофе или вином и вечно смотреть на проходящих мимо людей, как в кино.

**Сочетаемость мебели:** рядом с диваном можно ставить только столы журнальной высоты; иначе сидящий подбородком упирается в столешницу, велик соблазн поставить тарелку на колени — в общем, выглядит это крайне неловко, как в детстве на дне рождении в гостях, помните?

Есть неплохое грузинское место на Красном Октябре, Мизандари — но там собрали два типа граблей: к диванам поставили высокие столы, а диваны — копии тех самых честеров. Ради интереса, посидите на них и понаблюдайте за сидящими (но вас хотя бы не разочарует кухня).

В [Луче](https://barluch.ru/), на втором этаже, кажется, еще сохранились оригиналы — будет возможность, посидите на них (там и столы нужной высоты):

**И про эргономику классической высоты:** этого не увидит глаз, поэтому даже фотки показывать не стану — но это сразу чувствуешь, как только садишься: либо стул ниже, чем нужно, либо стол выше. Обычно это вопрос пяти сантиметров, но это важные пять сантиметров. Так что перед тем как делать большую закупку стульев и столов, поставьте один рядом с другим и посидите минуту. Люди с разным ростом испытывают схожий дискомфорт, я проверял.

## Интерьер/Растения

Растения нужны почти любому интерьеру. Особенно, если вы увлеклись бетоном, кирпичами и прочей грубостью. Растение позволит голой стене быть голой, а не стерильной/пустой.

**В любой непонятной ситуации ставьте пальму.** Самая неприхотливая из них — Ховея. Пролистайте фотки выше — там почти всюду есть какая-нибудь пальма. Важный момент — не превращайтесь в зимний сад; растение должно быть одиноким и внятным:

Что-то пошло не так:

Добавить вы всегда успеете. И есть примеры интерьеров, где куча растений и это не вызывает вопросов. Но начните с малого.

**Если пальмы кажется не достаточно**, обратите внимание на букеты. Вокруг этой темы много стереотипов. Поехавшие флористы со своим портфолио и ценами распугали всю целевую аудиторию:

Вот пример нормального букета себестоимостью 800—1200₽ (если подрезать раз в три дня, простоит до двух недель):

Вот мы притащили лилии в подвалы Веладоры (1200₽ за цветы + [крутая ваза](https://www.zarahome.com/ru/%D1%81%D0%B5%D1%80%D0%B5%D0%B1%D1%80%D0%B8%D1%81%D1%82%D0%B0%D1%8F-%D0%B2%D0%B0%D0%B7%D0%B0-%D0%B8%D0%B7-%D0%BA%D0%B5%D1%80%D0%B0%D0%BC%D0%B8%D0%BA%D0%B8-%D1%81-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D1%83%D1%80%D0%BD%D1%8B%D0%BC-%D1%83%D0%B7%D0%BE%D1%80%D0%BE%D0%BC-c0p300478370.html?colorId=808) за 2000 ₽ из Zara Home):

Интересный сайд-эффект с букетами — их можно часто менять, в отличии от пальм, мебели и меню. И это дает динамику. Динамика очень важна, о ней я еще ниже напишу.

А еще бывают сухие букеты, они стоят долго и без воды. Но не увлекайтесь: они собирают пыль и все равно должны меняться.

## Интерьер/Свет

Удивительно и приятно, что внутри Садового со светом почти у всех все хорошо. Проблемы начинаются, когда двигаешься в сторону ТТК.

Тут два основных пункта:

*   **У света есть яркость, а есть температура.** Яркость зависит от жанра вашего заведения, а температура всегда должна быть теплой (то есть уходить в желтое или красное).
*   **Свет — это косметика.**  Поэтому нельзя наносить ее ровным слоем, нужно подчеркивать хорошее и прятать плохое, создавать контрасты и наносить акценты. Скажем, если у вас открытая кухня, проследите, чтобы свет падал на еду, а не на кастрюли и хозяйственные расходники. В зоне контакта людей света должно быть больше: скажем, над барной стойкой; а иногда полки за спиной бармена горят ярче стола, это смещает акцент в неправильную сторону. Если у вас грубые бетонные стены и вы этим гордитесь, поставьте на пол архитектурные светильники и пустите свет по касательной.

# Музыка

И тут снова все менее стабильно. Пожалуй даже наиболее нестабильно. Если про раздевалки вспоминают в самом конце, то про музыку могут и вовсе забыть. Так что играет в вашем заведении? И тут снова два правильных ответа:

*   Ничего
*   Николас Джаар

Последнее — шутка, конечно, но я не знал, как выразиться короче. Часто вижу, как музыку ставит официант/администратор с телефона или ноутбука, там ютуб-шафл с рекламными перебивками, которые для них всегда неожиданность, и те бегут нажимать «пропустить рекламу». Либо стоит какой-нибудь оголтелый диджей, бегающий из бара в бар уже лет пять со своим коммерческим хаусом — это еще хорошо, если звук правильно настроен и музыку в какой-то момент перестаешь замечать, радуешься, что она тебя хотя бы не бесит и не выгоняет.

Смотрите, в вашей команде есть шеф-повар, который отвечает за еду, есть бартендер, который ставит бар; а вам еще нужен человек, который поставит музыку. И с таким же отношением к делу, как первые два. Не просто прикрутит дорогущие [funktion one](https://www.funktion-one.com/) к потолку, а подумает, что должно звучать в заведении с какой громкостью, будет контролировать поток диджеев и фоновых миксов. Обычно, его называют [арт-директором](https://www.facebook.com/Luchbar/videos/10156760411290061/).

Список мест, где музыка, как правило, неслучайная:

*   [Уголек](https://www.afisha.ru/msk/restaurant/44508/)
*   [Северяне](http://severyane.moscow/)
*   [Чайная](https://www.afisha.ru/msk/restaurant/35601/)
*   [Доктор Живаго](http://drzhivago.ru/) (да, аттракцион, но все-таки)
*   [Молоко](https://www.afisha.ru/msk/restaurant/35622/) (хотя меня уже тошнит от их плейлиста)

Ну и вообще, интересуйтесь музыкой сами, не верьте диджеям на слово.

[

## 

Chorus

Listen to Chorus by Danila Kovchiy for free. Follow Danila Kovchiy to never miss another show.

www.mixcloud.com



](https://www.mixcloud.com/danilakovchiy/chorus/?source=post_page-----8baf3a4eb852----------------------)

# Команда

Это, на самом деле, самое важное. Когда я писал про вход, уже упоминал о встречающем человеке. Мы приходим не к диванам и не к столам, а к людям все-таки.

## Команда/Официант

Идеальные официанты были в старом Нуре (в новом они тоже хорошие, и вообще команда почти та же самая осталась), но заведение стало клубом, и функции у ребят несколько поменялись. Очень хорошее начало было в 15 kitchen bar (сейчас как повезет). Все стабильно и четко (но своеобразно) в заведениях Раппопорта. Хорошие ребята были в баре Box на Белорусской. По-прежнему хорошая команда работает в Чайной. Вообще, попытайтесь попасть в только что открывшееся место в любом модном районе: Дмитровка, Патрики, Парк Горького — там высокая конкуренция среди заведений и команда неслучайных людей, которая через сезон разбежится, уйдет в другое новое заведение, но вы успеете застать правильную конфигурацию.

В чем тут дело: всем должно быть комфортно, и гостям, и официанту. Если официанту так себе, гости это чувствуют — возникает неловкость, и гость уже не гость, а раздражающий фактор. Еще гостю становится некомфортно, когда ему заглядывают в рот и в тарелку: он еще жует, а посуду уносят. Опять же, стоп-фразы:

*   Из напитков сразу что-нибудь закажете?
*   Вам повторить?
*   Всё по готовности?
*   Что-нибудь еще?

Это псевдозабота. Как ни странно, любители повышенной опеки пропадают, когда они действительно нужны. Ну или откровенно тупят, когда посетители заказывают два кофе и один десерт — приносят приборы на одного человека и спрашивают, кому десерт?

Очень рискованный, но рабочий трюк со мной проделывали в [этом месте](http://moscow.sempre.life/): я дал понять, что ни разу у них не был и спросил, которое из блюд не жирное — официант сел рядом (там столы с лавками, он ловко перекинул ногу и сел) и в трех предложениях рассказал что у них и как. Без лекции о концепции заведения и без выяснений, какую часть ягненка я предпочитаю.

Владельцы заведений, обратите внимание, **во что одеты официанты.** Кажется, вы часто останавливаетесь на фразе «ну рубашки белые наденьте». Дело в том, что белые рубашки бывают разные, и девушки, зачем-то, часто выбирают в облипку (или вы им выбираете?) — а это даже на хорошей фигуре выглядит ужасно и унизительно:

Купите ребятам в Uniqlo за 1500 ₽ хлопковые рубашки с современным кроем:

## Команда/Бармен, бариста

Одни мужчины называют женщин кисами и получают в ответ bedroom eyes:

А другие повестку в суд (в России пока просто обвинения в дискриминации). С барменами та же история — одним прощается снобизм и грубость, другим это не к лицу. И с баристами: недовольные лица в кафе Лебедева вызывают эмпатию, а «мы не готовим американо» от ребят из Даблби вводит в ступор: «Блять, ну ок».

Это сложная смесь из жанра заведения, образа бармена, качества его работы, степени вашего знакомства и скорости развития событий. Скажем, вы в Noor в праймтайм в пятницу:

> Встречаетесь взглядом в барменом:
> 
> — Мартинез, пожалуйста!
> 
> Бармен начинает мешать лед, глядя в пол бормочет:
> 
> — Мартинез ему блять…
> 
> Через три минуты вы получаете идеальный коктейль и пробиваетесь в свой угол через толпу.

Это нормальная ситуация. Такая киношная и про жизнь. Тут не на что обижаться. А вот если вам при этом сделали плохой коктейль — бармен сразу превращается в грубого мудака.

Хороший бармен чувствует границы и свои, и чужие: не лезет близко к гостям и не пускает гостей на свою территорию, но и не игнорирует. Необязательно быть злым полицейским, просто, читая отзывы и подслушивая разговоры — часто жалуются примерно на это.

Давайте еще раз. Как действует хороший бармен:

*   Не сует гостю за стойкой меню, пока тот не попросит. Стойка — не столик, это более личный контакт.
*   Не тыкает гостя носом в его невежество. За «виски-колу пейте через дорогу» надо сильно наказывать, мне кажется. Есть миллион способов предложить человеку альтернативу, не переступая черту. Кстати, хороший бармен должен понимать, что виски-кола и джин-тоник — это вещи разного порядка. А еще есть много людей, которые в алкоголе понимают больше, чем бармен, но просто хотят странной ерунды — это тоже надо считывать.
*   Если у бармена нет заказов, он протирает стойку, бутылки, чашки и бокалы; проверяет уровень воды в кофемашине; перебирает настойки; делает заготовки на завтра; подливает воду гостям. Он всегда должен быть занят, а не тупить в телефон или на сидящих гостей.
*   Гость не в курсе личных проблем бармена. Разве что оба уже напились и скоро утро.
*   Бармену полезно иногда выходить из-за стойки с парой коктейлей, которые попросили парни в третьем ряду.

Не уверен, что стоит воспринимать этот список как чеклист — это скорее собирательный образ. Бывает, что вам дают меню сразу, бывает, что бармен злой потому что устал — не спешите оскорбляться, дайте людям еще шанс. А дальше уже идут частности, которые зависят от личности. Где можно встретить (по-своему) хороших барменов:

*   Veladora
*   15 kitchen bar
*   Noor
*   Чайная
*   Santo Spirito
*   Take It Easy Darling
*   Антикварный

Есть и другие места с хорошими ребятами, конечно. А еще специалисты переходят от места к месту. И я за всем не успеваю.

## Команда/Охранник

Складывается впечатление, что не все владельцы заведений считают его частью команды. Но мне-то все равно: когда возникает неприятная ситуация, я ассоциирую ее с местом, а не с ЧОПом. Тут и охранник должен понимать и чувствовать свою роль, и остальные сотрудники должны принять его в коллектив. Я просто не всегда вижу эту связь: сначала прорываешься через охрану, затем через администратора.

Интересный симбиоз охраны и администратора я встречал в [Киану](https://www.afisha.ru/msk/restaurant/60581/): тебя глазами встречает девушка и после едва заметного ее кивка два охранника открывают двери (или не открывают, ну бывает).

И еще: осторожнее с инструкциями для фейсконтроля. Вроде как из лучших побуждений администратор просит не пускать в серьезный бар «пацанов в трениках» — но «[треники понятие растяжимое](https://www.off---white.com/en/RU/men/t/seasons/ss2018)» (ради этой цитаты я всё и затеял).

## Команда/Уборщик

Опять же, персонал может думать о них что угодно, но эти ребята ближе к вечеру все чаще мелькают между столами и становятся частью происходящего. В закрывшемся уже баре Carabas уборщиц одевали так:

Но если вы проигнорируете этот вопрос, то, скорее всего, будет как-то так:

Так что купите уборщице платье-невидимку — [2000 ₽ за штуку](https://www.enchy.ru/5114_gor.html?parent=2519):

# Динамика

Часто бывает так: идешь в заведение и точно знаешь, что там сегодня будет. Или провел там час и понимаешь, что никакого развития не предвидится — надо либо двигать дальше, либо ждать чуда, либо ехать домой. Это плохо, такое место быстро сгорит. Вообще, есть грустная статистика, что заведения в Москве рассчитаны на два года: первый год они окупаются, второй — приносят прибыль; а потом их закрывают, потому что людям надоело. Это жестоко.

Поэтому любому заведению нужно меняться. И здесь тоже есть свои измерения:

*   **Сезонность:** встречается чаще всего, новое меню, новый шеф, новые напитки — это и правда повод навестить ребят.
*   **Биоритм человека:** утром мы хотим одного, днем другого, ночью третьего.
*   **Спонтанные перемены:** новый предмет мебели, другой свет, другие цветы, другая музыка.

С первым все более-менее ясно. Лучше всего это получается пока что у 15 kitchen bar.

**Давайте про биоритмы поговорим:** зайдите в любой ресторан или большое кафе утром. Скорее всего, вы почувствуете, что оно еще не готово вас принять и вообще все ждут вечера и готовятся к часу пик. А вы недавно проснулись, пока что хотите тишины, покоя и кофе с омлетом. Как заведение должно вести себя утром:

*   Желательно без музыки (да-да, немного тишины и естественных шумов)
*   Персонала должно быть сильно меньше, чем вечером.
*   **В меню должны быть завтраки:** каша, омлет, сырники, гранола, сендвич, кофе, сок, чай, круасаны (я требую).

Уже к 15:00 можно как-то разгоняться, выводить музыку, если не терпится, начинать звенеть тарелками и натирать бокалы.

Перемены хорошо подчеркивает свет: его можно включать/выключать, менять оттенок. А если вы постараетесь, то можете не просто подчеркивать перемены светом, а создавать. Понаблюдайте за современными постановками спектаклей или балетов, за работой художников по свету: они из ничего делают то лес, то море, то город.

И еще ночью очень хорошо работают свечи — только не надо импотентских стопочек, подберите в интерьер подсвечники и канделябры; не обязательно ставить свечи за каждый стол, поставьте несколько у бара или у входа.

**Мало запустить заведение**, его надо сопровождать и корректировать. Почти наверняка будут косяки, на которые укажут своим поведением гости. Ну что может пойти не так:

*   Детский угол рядом с местом выноса блюд или столом с грязной посудой — ребенок может случайно устроить беду.
*   Гостям некуда класть сумки и пакеты.
*   Потоки людей опасно пересекаются: спускающийся с лестницы может врезаться в открывающуюся дверь.
*   Экраны платежной системы смотрят в зал и горят ярче любой лампы.
*   Металлический уголок на ступеньках быстро изнашивается и слетает.
*   Входящие люди создают неприятный холодный поток воздуха.
*   Барная стойка почему-то заваливается бумагами с отчетностью.
*   Официантам некуда себя деть во время ожидания.
*   Никто не хочет сидеть за столиками с краю — их надо либо убрать, либо переставить.
*   etc

Если вы владелец, пожалуйста, не в качестве ревизора, а в качестве обычного посетителя, бывайте в своих местах, аккуратно наблюдайте за процессами и чините баги.

Пьяный разговор где-то в три часа ночи:

> — Но разве в кожаных диванах дело или редком алкоголе или в маргинальной музыке? Оно же все не так начиналось и не ради этого работало. Никто же не анализировал происходящее, не разбирал помещение на части.
> 
> — Никто не разбирал, конечно. Но каждый, думаю, чувствовал заботу.",null,undefined
2014-10-08T07:16:01.000Z,https://medium.com/@AntonMurov/5f7bcba4e65e,false,"[""best""]",article,Поразительно — Любопытно — — Medium,null,pocket,null,"# Поразительно

by [Anton Murov](https://medium.com/@AntonMurov), [medium.com](http://medium.com)  
October 7, 2014 05:29 PM

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!

Поразительно, что в современной речи настолько повсеместно распространены ярчайшие конструкции усиления, что максимально простая, кристально ясно сформулированная мысль имеет в миллион раз бóльший эффект на ключевую аудиторию.

Любопытно, что просто сформулированная мысль оказывает намного бóльший эффект на аудиторию.

Чем проще сформулирована мысль, тем она эффективнее.",null,undefined
2020-01-31T09:27:31.000Z,https://vas3k.ru/notes/therapy/,false,"[""психоаналитик"",""best""]",article,Психотерапия :: Вастрик.ру,null,pocket,null,"# Психотерапия

by [Вастрик](https://vas3k.ru), [vas3k.ru](http://vas3k.ru)  
January 29, 2020 08:48 PM

It appears that this may be a homepage or an index page with non-article content. To accurately view it, you may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!",null,undefined
2012-12-22T20:35:41.000Z,https://habrahabr.ru/post/162919/,false,"[""best""]",article,«Я не понимаю» / Хабрахабр,null,pocket,null,"# «Я не понимаю»

[habr.com](http://habr.com)

Я заметил, что самые взрослые и опытные разработчики, с которыми мне доводилось работать, входят в число тех, кто чаще всего говорит «Я не понимаю», когда они выслушивают техническое объяснение. Так бывало с коллегами в [Fog Creek](https://twitter.com/BrettKiefer) и [Khan Academy](http://allthingsd.com/20120209/googles-very-first-employee-craig-silverstein-technically-no-3-leaving/).

С одной стороны, это противоречит здравому смыслу. Разве не должны «сеньоры» уже знать всё? Но это вполне логично. Те, кто больше других уверены в своих способностях, являются также людьми, способными признать, что не вникли полностью в суть чего-либо. Молодые разработчики допускают, что их непонимание — их же собственная вина. Они не хотят отвлекать остальных из-за своих воображаемых промашек.

Молодым разработчикам стоит попробовать осознать, насколько часты непонимания вопроса. В большинстве стеков технологий уже пройдена черта, после которой удержать в голове весь код невозможно, особенно, в компаниях, которые набирают сотрудников. И если эта граница пересечена, всё чаще можно слышать о новом фреймворке рендеринга Javascript, или последнем конвейере MapReduce, или баге в скрипте развертывания, или плане нового шаблона кэширования, а тихий голосочек в вашей голове уже хочет сказать: «Постойте… мне это не понятно.»

«Я не понимаю» — идеальный ответ. Вы никого не оскорбляете. Вы не показываете слабость. Вы строите культуру уважения к знаниям остальных, поскольку через пару минут объяснения вы всё поймете.

Либо так, либо вы не найдете ошибку. Мне нравится видеть это «Я не понимаю» как своего рода возможность использовать [метод утёнка](https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D1%83%D1%82%D1%91%D0%BD%D0%BA%D0%B0). Только здесь этот утенок появляется во плоти и требует, и крякает, и топчется, и янепонимает по всей вашей клавиатуре, заставляя вас объяснять различные вопросы.

  
«Я… не понимаю.»

Так говорят лучшие, и десятилетия спустя они становятся мастерами. Мы, молодые разработчики, должны следовать их примеру и избавиться от любого негатива, связанного с этими словами.",null,undefined
2018-12-09T16:36:14.000Z,http://shabalinsergey.ru/all/rezhim-dnya/,false,"[""productivity"",""best""]",article,Режим дня,null,pocket,null,"# Режим дня

[shabalinsergey.ru](http://shabalinsergey.ru)

Найти свой режим дня — это кайф. Я целенаправленно искал свой несколько лет, нашёл и последние 3 месяца поддерживаю.

В чём кайф режима:  
— задаёт ритм, ритм организует хаос. Меньше хаоса — больше кайфа;  
— делит время на небольшие отрезки с понятной пользой. Это даёт непрерывное движение к результату;  
— освобождает мозг от скучного планирования и позволяет выделить его для чего-то более интересного;  
— фильтрует шелуху. Ты делаешь только то, что нужно. Потому что ненужное сбивает с ритма;  
— сводит к минимуму прокрастинацию, потому что долго держать паузу или аритмию сложнее, чем поддерживать ритм;  
— начинаешь крепко спать, легко вставать, быстро засыпать и лучше себя чувствовать.

Режим дня — это способ организации мира. Он ограничивает свободу выбора, но в этом нет печали. Ты не можешь выйти за выбранные границы, зато представляешь куда в итоге придёшь. А если пришёл совсем не туда — значит пора перестроить режим. Так и двигаешься, пока не найдешь то, что подходит тебе.

## Главное — выбрать «гвозди»

В режиме есть время свободное и по умолчанию забронированное. Забронированное задаёт ритм и границы, за которые нельзя выйти. Товеровский называет это «[прибить гусеницу гвоздями](http://artgorbunov.ru/bb/soviet/20140410/)».

В качестве «гвоздей» я использую внешние ограничения — тренировки и регулярные рабочие планёрки.

> > Я тренируюсь каждое буднее утро и 2-3 раза в неделю по вечерам. Удобство в том, что меня прёт от тренировок, поэтому я их редко прогуливаю.

> > Регулярные рабочие планёрки тоже не пропускаю. Во-первых, на них рассчитывают другие участники и их нельзя подводить. Во-вторых, пропустив планёрки, я теряю понимание и управление проектом, а это в будущем сулит кучу проблем, которые мне придётся решать.

Засыпая каждый вечер, я знаю, что буду делать завтра и сколько это займет времени. Завтра обязательно будут тренировка и планерка, которые всегда идут в это время.

При этом есть большой кусок времени, который не забронирован под конкретные задачи. Это даёт системе гибкость. При внезапных ахтунгах я могу перенести тренировку с утра на вечер или потренироваться дома, а планёрку провести по телефону — мой мир не рухнет, а ритм сохранится

Так работает принцип маятника: чередование жёсткого и мягкого, запланированного и неопределённого укрепляет привычку и не даёт мне заскучать. Горбунов называет это [принципом динамизации](http://artgorbunov.ru/bb/soviet/20160411/).

Ниже — мой недельный календарь: зелёным помечено время на регулярные тренировки и планёрки, синим — плавающие скайпы, которые появляются в течение недели. В остальное время распределяю задачи от нагрузки. Могу ударно поработать утром, а вечером делать тупую механическую работу. Могу поработать вечером, а утром заняться личными делами. Могу сделать все за 4 дня, а пятницу оставить на чтение.

**Чтобы найти «гвозди», определи цели**  
Я тренируюсь, чтобы ходить в горы, и план походов у меня составлен на год вперёд. Я провожу планёрки, чтобы не упускать проекты из виду, учиться строить системы и помогать ребятам развиваться. Это необходимые условия моего развития, план которого тоже есть.

Если я начну строить режим дня за счёт бессмысленных для меня ограничений — запал пропадёт через месяц и привычки не сформируется. Например, не стану приучать себя вставать в 6 утра, потому что в книгах по развитию пишут об этом. Это не вяжется с моими целями, а значит не принесёт кайфа.

## Итого

— режим — это привычка;  
— привычка формируется повторением;  
— регулярное повторение достигается регулярными задачами; они служат «гвоздями», не позволяющими системе скатиться в хаос;  
— награда ускоряет формирование привычки; в режиме дня наградой выступают регулярные задачи, от которых вас прёт и которые двигают вас к цели;  
— в любой системе происходят сбои: кратковременные изменения не выбьют вас из ритма, потому что вы привыкли к нему. Но нужно быть готовым к единичным правкам;  
— если регулярную задачу приходиться двигать и отменять всё чаще — это сигнал, что что-то пошло не так;  
— на больших сроках будут регулярно происходить серьезные штормы, которые сломают всё и [заставят начать сначала](http://www.niceandeasy.me/daily/beginning). Новый проект, переезд в другой город, рождение ребёнка — всё, что угодно. Не надо бояться этого, надо просто найти новый ритм.

**upd**: [Как справляться с тревогой, если сбился режим](http://www.niceandeasy.me/daily/anxiety)",null,undefined
2016-01-12T23:59:26.000Z,https://lifehacker.ru/2015/02/11/kak-razbogatet/,false,"[""best""]",article,"Самые полезные привычки, которые помогут вам разбогатеть",null,pocket,null,"# Самые полезные привычки, которые помогут вам разбогатеть

by [Дмитрий Горчаков](http://www.facebook.com/Lifehacker.ru), [lifehacker.ru](http://lifehacker.ru)  
February 11, 2015 01:15 AM

«У богатых свои причуды», — немного осуждающе замечают обычные люди вслед своим более обеспеченным соседям. И они действительно правы. Именно эти «причуды» и делают их богатыми!

Всё начинается с привычек. Именно в них лежит основа вашего успеха или постоянных неудач. Вам может показаться, что ваши обыденные ежедневные занятия не оказывают совершенно никакого влияния на вашу жизнь, но это не так.

Данный факт ещё раз доказывает проведённое недавно исследование, по результатам которого Томас Корли (Thomas Corley) опубликовал книгу под названием [Rich Habits: The Daily Success Habits Of Wealthy Individuals](http://www.amazon.com/Rich-Habits-Success-Wealthy-Individuals/dp/1934938939).

Привычки подобны снежинкам. Каждая сама по себе невесома, но все вместе они образуют мощную лавину успеха.

Томас Корли

В ходе этого исследования в течение пяти лет велось наблюдение за более чем 200 состоятельными людьми. Критерием отбора для этой категории послужил годовой доход, который должен был составлять не менее $160 000. Для сравнения была также набрана вторая группа, в которую вошли люди с очень скромным достатком: их годовой доход был ниже $35 000. В результате сравнения образа жизни этих двух групп были выявлены существенные отличия в их ежедневных привычках.

Корли в своей книге выделил целый ряд особенностей, которые преобладают в группе богатых людей и очень редко встречаются среди бедных. Какие же из них являются самыми мощными? Вот несколько примеров.

### Богатые люди всегда помнят о своей цели

Успешные люди стараются никогда не забывать о своей сверхзадаче и предпринимают ежедневные усилия для её достижения. Они могут спланировать свои действия на несколько лет вперёд и подчинить жизнь этому плану. 62% богачей утверждают, что они никогда не забывают о своих целях, в то время как во второй группе таких нашлось только 6%.

### Они всегда знают, что делать сегодня

81% обеспеченных людей используют различные сервисы планирования, списки задач, бумажные органайзеры и другие инструменты организации своего времени. Они записывают свои ежедневные цели и сфокусированы на их достижении. Среди бедных только 19% понимают важность планирования.

### Богачи не смотрят телевизор

67% участников из группы с большим достатком смотрят телевизор менее часа в день. Среди бедных этим могут похвастаться только 23%. Интересный факт вскрылся при детализации просматриваемых программ. Среди богатых реалити-шоу смотрят 6% против 78% у бедных. Комментарии излишни.

### Они читают, но не для развлечения

86% богатых утверждают, что они любят читать, и 26% бедных полностью с ними согласны. Вопрос только в том, что именно читают представители каждой группы. 88% обеспеченных людей читают литературу для самосовершенствования хотя бы по 30 минут в день. Среди бедных таких нашлось только 2%.

### Они полностью отдаются работе

Несмотря на то, что члены первой группы уже многого достигли, они стараются полностью выкладываться на своём рабочем месте. 81% из них заявили, что они делают гораздо больше, чем от них требуется по правилам. И при этом только 6% недовольны своей работой. Среди малообеспеченных нашлось менее 17% работников, которые выходят за рамки своих должностных обязанностей.

### Они не слишком надеются на удачу

77% из малообеспеченной группы иногда играют в различные лотереи и розыгрыши. И только 6% богачей доверяют свою судьбу шарикам или счастливым цифрам. Очень показательные цифры, которые свидетельствуют о том, что обеспеченные люди верят в первую очередь в себя и свои силы.

### Богатые следят за своим здоровьем

Во многих развитых странах спортивная стройная фигура уже считается одним из признаков зажиточности, в то время как расплывшиеся толстяки встречаются чаще всего среди беднейших слоёв населения. В исследовании, данные которого послужили основой для этой статьи, это наблюдение полностью подтверждается. 57% опрошенных богачей подсчитывают калории в своих тарелках, а вот среди бедных участников исследования подобными вещами обеспокоены только 5%.

Разумеется, даже самый полный набор хороших привычек не даст вам гарантированного богатства. Но, с другой стороны, они могут намного облегчить вам путь к успеху. Так что не стоит пренебрегать такими простыми правилами, которые доступны буквально каждому человеку.",null,undefined
2018-12-08T10:32:16.000Z,http://larrr.com/sovety-dlya-inzhenerov/,false,"[""productivity"",""best""]",article,Советы для инженеров,null,pocket,null,"# Советы для инженеров

by [Larrr](http://larrr.com/author/allagentis/), [larrr.com](http://larrr.com)  
September 1, 2015 01:36 AM

Сегодня у меня перевод статьи, которую написала менеджер Google для сотрудников. Статья изначально была написана исключительно для внутреннего пользования, но она мне очень понравилась. Так что я связалась с автором, с ее разрешения я ее немного переделала, и получила разрешение от Google Press на публикацию. Перевод мой.

На всякий случай – это не официальный Google документ, и Google не несет ответственности за его содержание. Он субъективный, и написан сотрудником для сотрудников.

**Советы для инженеров**  
_15 апреля 2013_  
_Отредактировано 21 мая 2014  
Переведено 31 августа 2015  
__Gretta Bartels, Software Engineering Manager at Google_

Уважаемый читатель,

В этом документе я описала некоторые принципы, на которые я опираюсь в работе со своими командами. В них нет ничего принципиально нового или революционного, все эти принципы давно известны каждому из нас. Но знать и делать – это две разные вещи. Поэтому этот документ также является напоминанием  и для меня самой о том, что моя работа менеджера заключается том числе и в том, чтобы самой следовать этим принципам, и напоминать о них другим.

Один из моих более опытных коллег научил меня тому, что для менеджера очень важно быть предельно предсказуемым. У менеджера должен быть какой-то набор простых правил, о которых знают все его подчиненные, и которым они могут следовать даже когда менеджера рядом нет. Поэтому моя цель – чтобы программисты в моей команде могли задать сами себе вопрос “Что бы на это сказала мой менеджер?”, и сами себе на него правильно ответить. Тогда команда сможет работать практически самостоятельно, без моего руководства. А я буду сидеть дома и кушать пирожные :).

Вот список моих основных правил:

**1\. Занимайтесь той работой, которая действительно важна**

_1a) Всегда задавайте себе вопрос “Почему мы это делаем?”_

Что бы вы не делали, все всегда должны четко знать две вещи – 1) почему вы это делаете? 2) как вы поймете, что достигли нужного результата? Даже если вам кажется, что вы можете ответить себе за вопрос “почему?”, не останавливайтесь на первом подходящем ответе, смотрите глубже. Задавайте себе этот вопрос снова и снова, пока ответ не будет простым, очевидным и одновременно с этим довольно масштабным.

Это чем-то похоже на [метод “5 почему”](https://en.wikipedia.org/wiki/5_Whys), когда техних несколько раз задает себе вопрос “почему?”, углубляясь в ответ чтобы найти причину неполадки. Но в нашем случае я предлагаю использовать этот метод для любой работы, а не только для нахождения причин проблем.

А вот вам и пример из жизни. Одна из моих команд сейчас работает над улучшением качества данных для Google Maps (а именно – находим и устраняем внутренние противоречия в данных). В это случае “почему”-цепочка может выглядеть примерно так:

Мы устраняем противоречия в данных  
\-> для того, чтобы мы могли проще и быстрее интегрировать существующие и новые данные  
\-> для того, чтобы мы могли обновлять данные быстрее  
\-> для того, чтобы Google Maps были максимально точными  
\-> для того, чтобы качество Google Maps соотвествовало очень высокому стандарту и требованиям пользователей  
\-> для того, чтобы люди активно пользовались и доверяли Google Maps (и продуктам Google в целом)

Выглядит довольно просто, не так ли? Но исходя из моего опыта, далеко не все инженеры задают себе эти вопросы и видят дальше конктретной и обособленной задачи над которой они работают.

На самом деле понимать “почему?” для своей работы очень важно. Кричитески важно, я бы сказала.

*   Без этого понимания намного сложнее оценивать результаты своих трудов. И намного сложнее адаптироваться к постоянно меняющимся требованиям проекта, в результате которых вам может потребоваться доказывать менеджменту что то, что вы делаете, действительно важно.
*   К тому же, так вы сможете найти других людей и команды, которые преследуют ту же самую фундаментальную цель.  Вы сможете найти поддержку и союзников, важность которых очень сложно переоценить.
*   Плюс, вы сможете лучше приоритизировать уже имеющиеся проекты.

Кстати, ответов на ваши “почему?” может быть несколько. Это хороший знак – вероятно, ваш проект действительно важен.

И еще важное, особенно для менеджеров: используя “почему”-цепочку, вы не только сможете лучше понять зачем вы что-то делаете и как делать это лучше, но и увидеть другие стратегические области развития для ваших проектов.  Просто пройдите с другого конца цепочки и задайте себе вопрос “как?”.

_1b) Самое важное – это результат_

Как менеджер, я оцениваю своих сотрудников по следующим параметрам: Знания и Опыт, Сложность, Лидерство и Результаты. Хоть и все они важны для профессионального развития и карьерного роста, один из параметров значительно важнее прочих. Это – Результат.

Большинство компаний – это не обучающе-развивающие площадки для программистов. Это – бизнесы, которые работают, и именно благодаря этому в них можем работать мы. Кстати, лично мне это сочетание – бизнес и технология – очень нравится.  Мне нравится работать над вещами, которые изменяют мир. И многим инженерам с которыми я общалась на эту тему – тоже.

Любопытно, что Результат вовсе не следует из остальных параметров. Можно быть умным, опытным, знающим свое дело харизматичным менеджером или техлидом команды, которая работает над невероятно сложной и интересной задачей. Задачей, которая не имеет вообще никакого стратегически важного значения. С другой стороны, вряд ли возможно создать что-то стоящее не обладая знаниями, или не будучи хорошим руководителем.

Кстати, насчет сложности. Бывает, что для достижения важного результата не надо делать ничего сложного. Это нормально. Всегда ищите и берите простые и одновременно важные проекты, когда вам предоставится такая возможность.

_1c) Планы бесполезны, но важны_

Я верю в OKR (сокр. _Objectives and Key Results_ — цели и ключевые результаты — метод, используемый в современном менеджменте для управления проектами. Позволяет синхронизировать командные и индивидуальные цели и обеспечить эффективный контроль за реализацией поставленных задач. [Wiki](https://ru.wikipedia.org/wiki/OKR).). Я прошу всех инженеров в своих командах писать и оценивать их ежеквартально.

У письменной постановки целей есть много преимуществ. Но я думаю, что самая важная вот эта: ваше время ограничено, и вы должны занять его вещами, которые принесут больше всего пользы. К тому же они позволяют существенно улучшить качество планиромания. Без стратегического планирования вы легко можете попасть в две очень распространенные ловушки: переоценить то, сколько вы можете сделать за квартал, и утонуть в срочных делах вместо важных. Впрочем, с планированием вы тоже можете в них попасть, но вам будет намного проще их распознать и из них выбраться.

Ситуация, когда вы занимаетесь срочными вещами вместо того, чтобы заниматься важными, знакома многим. Вот [в этой статье](http://www.mindtools.com/pages/article/newHTE_91.htm) эта тема неплохо раскрыта. Почитайте, если вам интересно.

Еще более интересная проблема – это переоценка своих возможностей. Как менеджеру, мне регулярно приходится помогать инженерам быть более аккуратными в своих оценках – по моему опыту очень многие сильно переоценивают количество работы, которую они могут сделать за данный промежуток времени. Бывали случаи, когда люди ставили много целей, делали каждую на 30-50%, но не довели ни одной цели до запланированного результата. Намного лучше бы было сделать две или три цели на 100%.

Используя письменное планирование и оценивая свои результаты по прошествии квартала, многие могут существенно улучшить свои навыки постановки и достижения целей. Даже существенно не изменяя свою продуктивность, они начинают делать более реалистичные прогнозы и доводят несколько действительно важных вещей до конца. Именно поэтому я считаю OKR невероятно важными для своих команд, и надеюсь что как можно больше людей освоит этот навык.

**2\. Не теряйте время даром**

_2a) Ускоряйтесь (aka Как насчет парочки тестов?)_

Во время моей учебы в университете, в качестве зачетной работы мне надо было написать игру Boggle с красивым интерфейсом и поддержкой для удаленной игры нескольких пользователей. Естественно, я даже пальцем не шевельнула до последнего дня перед сдачей. В 3 часа ночи я обнаружила что моя наскоро написанная программа содержит баг, который вылезал под самый конец игры.

Так что остаток ночи я провела играя в свою игру, пытаясь повторить баг и найти его причину. Конечно же, это было как минимум глупо. Мне просто надо было установить таймер игры на 5 секунд и дело пошло бы намного быстрее. В свое оправдание я хочу сказать, что дело было под утро, мне очень хотелось спать, а не искать ошибки в моей программе. Еще лучше было бы написать тест, но тогда я про тесты даже не слышала.

Каждый раз, когда вы повторяете какой-то кусок программы снова и снова, пытаясь найти ошибку и исправить ее, сделайте все, чтобы эти повторы были максимально короткими. Скорее всего это покажется вам лишним, так как вы будете уверены, что нашли ошибку с первого раза. Но так бывает очень редко. Вероятно, скоро вы поймете, что это не оно, и вам придется повторить процесс сначала. И потом еще раз.

Поэтому при работе над любым проектом постарайтесь сделать так, чтобы он максимально просто тестировался. Сделайте его модульным, сделайте так, чтобы любую часть программы можно было максимально просто изолировать и протестировать. Поверьте, настанет момент, когда вы будете рады, что сделали это. И если у вас возникнут проблемы с модульностью и изоляцией, то это хороший повод задуматься о том, насколько хорош ваш дизайн в принципе.

Похожий принцип применим и к работе с людьми и продуктами. Когда вы находитесь в ситуации неопределенности, подумайте о том, как провести быстрый и простой эксперимент, который бы дал вам хоть какие-нибудь предварительные данные.

_2b) Избавьтесь от проблемы раз и навсегда (aka Автоматизируйте)_

Люди не должны тратить время на вещи, которые намного лучше получаются у компьютеров. Это даже не обсуждается.

Мы все занимаемся программированием, чтобы сделать жизнь проще и автоматизировать то, что можно автоматизировать. Казалось бы, инженеры будут пытаться максимально применить этот принцип к себе в том числе. Но оказывается, что вовсе нет!

Много раз я видела людей, из раза в раз делающих одну и ту же повторяющуюся задачу вручную вместо того, чтобы ее автоматизировать. Главное оправдание в такой ситуации – “это займет всего несколько минут, а автоматизация процесса займет целый день”. Иногда это даже правда, но далеко не так часто, как может показаться.

Автоматизируя задачу:

*   Любой сможет справиться с этой задачей, даже человек, который только начал работать в команде, или автоматический процесс. Минуты ручной работы быстро соберутся в часы и даже дни – задача будет запускаться когда вы спите, когда вы едите, и когда вы болеете.
*   Автоматизирование маленькой задачи может открыть двери для более масштабной оптимизации.
*   Вы можете обнаружить ситуации, о которых вы даже не задумывались до того, как попытались автоматизировать весь процесс.
*   Создавая процессы для того, чтобы позднее их автоматизировать, вы существенно улучшите свой навык дизайна процессов.

_2c) Развивайтесь_

Не занимайтесь одним и тем же слишком долго. После того, как вы освоили какую-то область, либо автоматизируйте ее (см. выше), либо обучите другого инженера для этой работы и двигайтесь дальше. Растите профессионально, не позволяйте себя застояться.

Иногда люди не делают этого потому, что их работа кажется им рутинной и они не хотят переваливать эту рутину на других. Но то, что вам может показаться рутиной, будет прекрасной возможностью чему-то научиться для другого, возможно менее опытного, инженера. Даже если это не так, для команды скорее всего имеет намного больший смысл, когда в конкретной задаче разбираются сразу несколько человек. Иначе она может стать узким звеном.

Иногда люди держатся за свои задачи потому, что им кажется, что объяснить их другим слишком сложно, или потому, что они считают, что справляются с ними лучше всех. Если это ваш случай, то вам стоит всерьез задуматься о создании хорошей документации.

Я постоянно советую инженерам в своих командах переключатся на новые задачи и развиваться профессионально.

**3\. Не работайте в вакууме (aka Общайтесь с другими)**

Старайтесь описывать дизайн систем, над которыми вы будете работать, заранее (aka пишите design docs). Посылайте эти документы вашим коллегам и спрашивайте, что они думают. Делая это, вы:

*   Упорядочите ваш собственный мыслительный процесс.
*   Удостоверитесь, что похожим проектом не занимается кто-то еще.
*   Улучшите свой дизайн, воспользовавшись полезными советами ваших коллег.
*   Намного проще найдете коллег, которые согласятся вам помочь.
*   Покажете себя активным и ответственным членом команды.

Говорите о своей работе (можно со слайдами). Предлагайте другим рассказать об их работе. Активно интересуйтесь, чем занимаются другие в вашей и соседних командах. Вы и ваша команда от этого только выиграет.

Многие не хотят говорить и писать о своей работе пока она не готова. Или они просто не любят писать. Это слабоватые оправдания. Если вы не хотите писать, или не хотите делать презентацию сразу для целой команды, то начните с малого – просто поговорите с одним конкретным коллегой, нарисуйте схематичный дизайн на доске. Это поможет вам упорядочить свои мысли, и написать документ или обсудить его с целой группой будет намного проще.",null,undefined
2016-01-12T23:32:22.000Z,https://politota.dirty.ru/strukturnye-krizisy-syrevykh-pridatkov-rossiia-i-ukraina-v-svete-okonchaniia-syrevogo-supertsikla-944347/,false,"[""best""]",article,Структурные кризисы сырьевых придатков. Россия и Украина в свете окончания сырьевого суперцикла,null,pocket,null,"# Структурные кризисы сырьевых придатков. Россия и Украина в свете окончания сырьевого суперцикла

[politota.d3.ru](http://politota.d3.ru)

This page doesn't appear to be an article and therefore may not display well in the Article View. You may want to switch to the [Full Web Page view](ISRIL:WEB).

If you know there _should_ be an _article_ here, help improve the article parser by [reporting this page](http://ideashower.com/support/read-it-later/report-pages-not-saving-well-offline-here/). Thanks!",null,undefined
2020-01-16T16:26:49.000Z,https://habr.com/ru/post/171325/,false,"[""best""]",article,"То, чего еще никто не писал про Нокиа, Элопа и горящую платформу / Хабр",null,pocket,null,"# То, чего еще никто не писал про Нокиа, Элопа и горящую платформу

[habr.com](http://habr.com)

Взявшись за этот пост, автор полностью отдает себе отчет. И в том что «набило оскомину». И что «только ленивый не кинул камень». И про то что «хватит уже, достали». Однако, вдоволь начитавшись доморощенных и не очень аналитиков, автор решил все-таки выразить собственное мнение, которое отличается от того общепринятого, что с некоей мазохистской истомой доселе перепечатывалось здесь и тут различными авторами, интерпретаторами и переводчиками. Вероятно кому-то будет интересно его прочитать.

Традиционно, для тех кто не любит много буков, краткие (более-менее) тезисы:

*   Будучи долгое время лидером на рынке, Нокиа сильно расслабилась и загадила свою внутреннюю инфраструктуру бюрократией, чрезмерным аутсорсингом и огромным количеством бесполезной «менеджерской прослойки».
*   Будучи долгое время лидером, Нокиа просрала потратила много денег на ненужные операционные расходы, поглощения никому не нужных фирм и на невменяемую модель аутсорсинга.
*   Полностью оторвавшись от реальности с уходом Йормы Оллилла, Нокиа, под управлением гениального юриста CEO Олли-Пекки Каласвуо, потратила кучу денег и усилий на создание бесполезной и неконкурентоспособной сервисной инфраструктуры Ovi. В результате этого, помимо денег, Нокиа потеряла уйму полезного времени, которое можно и нужно было потратить на развитие основного бизнеса — телефонов, софта и т.д.
*   Бюрократия и непотопляемая менеджерская прослойка в Нокиа, последовательно мигрировала из одного передового проекта в другой, в составе одних и тех же групп лиц, самореплицируясь в виде кучи формальных дебилопроцессов комитетов и управленческих групп, немного перетасовываемых с учетом специфики. В итоге именно эта бюрократия убила и Symbian, и Ovi, и MeeGo и остальные попытки догнать уходящий поезд своими силами.
*   Борьба с бюрократией и прослойкой в Нокиа зашла в полный тупик.
*   У великого CEO Элопа просто не было другого выхода кроме как прибить всю старую, неповоротливую и прогнившую организацию, путем создания альянса с Майкрософтом и переходом на Windows Phone. Тем самым все старые процессы, компетенции, технологии и самое главное — люди резко стали, что называется, «не в тему». И следовательно тем самым можно было под благовидным предлогом прибить этот табун менеджеров, бесконечно рисующих фэнтезийные роадмапы с единорогами и перекладывающих бумаги с левого края стола на правый.
*   Новая Нокиа, после 2011 года и старая Нокиа до 2011 года – это две РАЗНЫЕ организации. Их объединяет только общее название и операционка S40 для телефонов Asha.
*   Горящая платформа, это не Symbian и не MeeGo. Горящая платформа, это то состояние в которое Нокиа загнали годы расслабленного лидерства и тупоголовые амбиции предыдущего CEO – Олли-Пекки Каласвуо с кликой подкаркивающих вице-президентов.
*   С бюрократией и бизнес процессами, имеющимися на 2010 год, Нокиа не спас бы ни Андроид, ни половина населения Бангалора, пишущих на Qt под MeeGo. Даже если бы Apple бесплатно передал Нокиа iOS и все сервисы, то они бы выродились руками всяких Requirement Managerов в типичные Нокийские дизайн-химеры и в итоге загнулись через какое-то время.
*   То, что сделал великий CEO Элоп – было единственно возможным разумным решением, дающим хоть какие-то шансы на выживание. Вопрос «каким образом он это сделал?», остается открытым, равно как и вопрос «поможет ли это Нокиа?» в итоге. Не следует забывать, что нынешняя Нокиа — это совершенно новая организация, поэтому глупо предполагать, что она разом вернет себе лидерство. Как и всем новым организациям ей придется за это лидерство долго бороться.
*   Без ошибок и побед Нокиа никогда не было бы ни Андроида, ни Айфона. И Google и Apple тщательно проанализировали достоинства и недостатки более старших конкурентов перед тем как шагнуть вперед.

  
Все это в деталях — под катом. Предупреждаю что клевых картинок там нет. Сплошное графоманство и ёрничанье.  
  
Прежде всего попробую ответить на давно интересующий меня вопрос:  

#### Почему темы про Нокиа вызывают столько флейма и ажиотажа?

  
Для меня ответ очевиден. Кризис и перестройка в Нокиа близки русскому сердцу, потому что вот буквально недавно у вас также развалился СССР, потом его перестраивал под дирижирование палочкой пьяный Ельцин, ну и так далее. Когда с СССР «процесс пошел», истину глаголили все кто угодно на каждом углу, помните? Правда лилась с экранов телевизоров, страниц газеты и журналов, пели обличающие песни барды, рокеры, КВНы, писались книги томами ну и все такое. Каждый высказался на тему, боже как мы жили, как было бы если не было революции и что надо было делать дальше. После того как все поохали, поахали, послушали ораторов, пережевали и каждый для себя ответил на извечный вопрос — кто виноват и что делать, общество погрузилось в рутину насущных дел. Те, кто ничего делать так и научился, кроме констатации очевидного, продолжили орать и писать про кровавую гебню, беспредел власть придержащих, великодержавное хамство, про то что «мы для них смерды» и «власть зажралась, заворовалась и творит что хотит». Ну да бог с ними.

Ситуация с резанием правды-матки про Нокиа – это калька с распада СССР. При этом большинство мнений и составляющих резанной правды-матки — это некий такой коктейль из интерпретации открытой финансовой отчетности, обычно сделанный путем наложения конечных цифр на какие-то бесконечные шкалы или оси, личных обид неких обиженных и не очень мобильных аналитиков, выдаваемых за объективную точку зрения, ну и конечно личного опыта – из серии «вот я в 2003м свой Нокиа 3111 в унитаз уронил, вот это был телефон…».

Мое мнение, изложенное ниже основывается исключительно на собственном опыте и знании этой конторы, поэтому я никак не претендую на абсолютно конечную и объективную точку зрения, но надеюсь, что мое чтиво вас развлечет.

#### Suomalainen Yritys или роль «Сису» в стратегии финской компании

  
Начнем ОЧЕНЬ издалека. Про то что Нокиа, как производитель мобильных телефонов, имеет богатую историю, связанную с резиновыми галошами, тракторами, телевизорами и т.д. я напоминать не буду. Я поразглагольствую вот на какую тему. Страна Финляндия и финское общество в основном имеет несколько очень интересных черт, которые могут объяснить странное поведение Нокиа в тех или иных ситуациях. Финны в большинстве своем работают очень старательно, прилежно, не ноя по пустякам и несмотря на трудности. Конечно за последние 10 лет все немного поменялось, увеличилось количество толерастов и всяких угнетенных, но в целом все выглядит именно так. В этом финны немного похожи на японцев, которые имеют тенденцию шлифовать отдельные элементы своего труда до абсолютного искусства.

Финские инженеры в большинстве своем – интроверты. Кстати знаете, чем финские интроверты отличаются от экстравертов? Тем что финские экстраверты когда с вами говорят, смотрят на ваши ботинки, а не на свои. Интроверты, умеющие тщательно и аккуратно работать могут сворачивать горы. Если дать финскому инженеру рельсу и напильник, поселить его в домике с сауной у озера и кормить сосисками, то через пять лет он выпилит точную работающую копию Айфона, не сомневайтесь. Умение что-то методично делать в течение долгого времени, преодолевая трудности и стремясь к далекой, иногда нереальной цели, называется у финнов словом «сису». Вообще нет однозначного перевода этого слова на русский, и полностью понять это можно только если ты родился в Финляндии.

Причины всего этого по большей части исторические. Финляндия долгое время находилась по гнетом Швеции, потом была частью Российской Империи, потом выстояла зимнюю войну с СССР, потом долгое время платила СССР репарации за участие в Великой Отечественной на стороне Германии. Все это, такое ощущение постоянного пресса, сплотило финский народ и выработало вот такие элементы психологии, как «сису». К чему я все это? Это надо чтобы понять некоторые моменты логики Нокиа в развитии компании.

Подлянкой для такого морозоустойчивого и пуленепробиваемого финского инженера является среда требующая быстрой реакции и принятия быстрых решений. В нестандартных динамичных ситуациях финские тщательные инженеры часто теряются. Причина в том, что для того чтобы приступить к работе им надо все аккуратно спланировать и выверить, прочитать документацию, обговорить все детали. В динамичных же ситуациях действовать часто приходится без выяснения всех деталей, видя только малую часть общей картины, и не остается времени на что-то фундаментальное. Этот момент тоже надо учесть.

Ну вот с такими вводными и давайте представим себе Нокиа, образца скажем 2001 года. К этому году финские инженеры, путем упорного труда над NMT и простыми, но надежными GSM телефонами заработали себе авторитет и компания начала реально утопать в деньгах. Как следствие, компания начала активно расширяться, тем не менее фокусируясь именно на мобильных телефонах. В течение нескольких лет Нокиа продала все свои подразделения, с тракторами и телевизорами, которые напрямую не относились к основному бизнесу. Но нам интересно, что именно происходило внутри.

#### Как Пекка стал менеджером…

  
А происходило вот что. Хороший инженер, скажем по антеннам, которого зовут скажем, Пекка, становился старшим инженером, потом специалистом, потом старшим специалистом, а потом — все. Карьерный рост его по линии инженерии останавливался и более позиций для его роста Нокиа на тот момент не предусмотрела. Это уже потом осознали, что не всем надо менеджерами быть. А на тот момент у Пекки, скажем, пятеро детей, домик с сауной в кредит и все хотят кушать. На 2003й год политика компании Нокиа подразумевала непрерывный карьерный рост наверх только через менеджерское звено. То есть на каком-то этапе Пекке, чтобы получать побольше денег, надо было стать менеджером. Не совру, что для этого зачастую специально организовывались позиции внутри уже существующей команды, и такое превращение происходило в зависимости от отработанных на одном месте лет – кто постарше то и менеджер.

По такой схеме Нокиа, у многих людей там работающих, в связи со относительной стабильностью приобрела негласный статус почти государственной организации с элементами иерархии за выслугой лет. То есть 3 года работы – старший инженер, еще 3 – специалист ну и так далее. Повышения внутри одной и той же организации как правило происходили в соответствии с количеством проработанного времени и все те кто еще не повысился до менеджера, терпеливо ждали своей очереди.

Ну вот давайте теперь посмотрим на нашего Пекку. Он классный инженер по антеннам, да, но хреновый менеджер. Он отлично умеет работать в одиночку, но чувствует себя некомфортно управляя работой других. Более того, как только Пекка становится менеджером, его автоматически приглашают на 20 разных заседаний в течение недели, где необходимо его мнение по тем или иным вопросам, плюс рабочие совещания, планирование, отчетность и т.д.

За короткое время Пекка понимает, что времени на свою работу в новой роли ему хватает исключительно на посещение митингов и пересылку полученной на них информации в разные инстанции, в вяло скомпилированном виде. Общее правило таково – чем выше инстанция, тем меньше слов и слайдов в PowerPoint. Чем ниже инстанция, тем больше каверзных вопросов с просьбами предоставить детальные ответы. При этом в среде себе равных Пекка чувствует себя отлично. Он что-то еще помнит про свои антенны и может ввернуть словечко-другое например в обсуждении технических роадмапов на следующий год.

Поскольку на бумаге все выглядит красиво, планы утверждаются и его мнение ценят, то через какое-то время Пекка начинает отрываться от реальности. Роадмапы, планы и прочая говорильня легко и красиво выглядят только в его голове, а реальность начинает от его полета мысли отставать, потому что кому то надо работать руками, а если это финн, то еще и основательно все прикинуть и продумать. И вот через какое-то время мы получаем типичного выкидыша представителя менеджерской прослойки Нокиа середины 2000х – менеджера-болтуна-теоретика, который по старому жить уже не может, а по новому не умеет.

Отбросив кривляние, отмечу вот что – Пекка каждый год участвует в создании и утверждении стратегии и планов развития, скажем антенн. Он представляет интересы своих инженеров, определяет, что они смогут делать а что нет за нужный период времени. Кроме того без его участия не может приняться ни одно решение. И вот тут приходит еще парочка парадоксов.

Во-первых, по истечении нескольких таких годичных итераций, Пекка понимает, что каждый год он утверждает по сути одно и то же и каждый год это ему дается все более гладко, потому что он повторяет одни и те же аргументы — выверенные, точные, краткие, умные, словом отполированные до блеска. В какой-то момент Пекка задается вопросом – а почему? То есть почему, скажем, супер антенна, запланированная в роадмапе на 2004й год, присутствует в планах 2005го и в 2006го и так далее? Пометим это как «озабоченность номер 1» и пойдем дальше.

Во-вторых, в какой-то момент Пекка понимает, что количество комитетов и групп в которые он входит как менеджер уже начинает превышать его способности. Каждое принятие решения в конкретной группе требует от него вникать в детали реальных предложений. Но Пекка физически не успевает вникать во все эти детали, плюс как специалист по антеннам он уже начинает терять квалификацию, плюс, точнее минус, никто без его согласия не может принять решение и начать работать, поэтому решения принимать надо, и желательно быстро. Пометим это как «озабоченность номер 2».

В-третьих, видя, что реализация планов не успевает за болтологией и рисованием в PowerPoint, Пекка отправляется на курсы повышения квалификации и узнает про такое понятие как риски. Понятие «риски» конкретно для Пекки хорошо тем, что в анализ любой проблемы можно внести бесконечное их количество. Поэтому если какая то задача просто «не прет», то всегда ее можно опоясать высоким уровнем рисков.

#### Как работали озабоченные менеджеры…

  
Вернемся к «озабоченности номер 1» и вспомним про супер антенну. Она утверждается из года в год потому что все хорошо работают. Парадокс? Ничего подобного. Просто после того как планы, стратегии и роадмапы были утверждены, скажем на 2003й год, большинство менеджеров, ответственных за это в следующем году получают повышение и начинают заниматься другими, более важными проблемами. А Пекка тратит еще один год чтобы объяснить все тоже самому новому поколению управленцев. Потом еще один год и т.д. и так пока он сам не перейдет на более высокую должность и не спихнет эту проблему своему преемнику.

Хотя никто не сможет упрекнуть Пекку в том что он не продвигал супер антенну. Но вот проблема, чтобы ее продвинуть и начать над ней работать, нужен продукт который ее согласится взять. А там свои менеджеры со своим видением рисков, которые очень не хотят брать именно в свой продукт новую, не обкатанную фишку. А в детали, которые их смогут убедить, вникать у них тоже нет времени, им надо все кратко, гладко и понятно, потому что они страдают той же самой болезнью что и Пекка. И вот, с одной стороны Пекка сам не успевает во все вникать, чтобы принять решение, а с другой стороны его не понимают по той же самой причине.

Для того что бы разрешить сложившуюся ситуацию в такой среде начинают применяться анти-паттерны:  

1.  Откладывание принятие решений путем реструктуризации постановки проблемы, разбиения ее на несколько составляющих, либо ее переформулирования, и последующей выдачи за новую проблему.
2.  Принятие решений путем компромисса и разделения ответственности на нескольких человек, типа – «я согласен, если все согласны»
3.  Откладывание принятие решений, используя риски как ключевой аргумент, скрывающий неуверенность или нежелание брать на себя ответственность

Все. В итоге мы получаем скелет той самой менеджерской прослойки, которая со временем воцарится в Нокиа. Куча народу много и умно разговаривающего и находящего бесчисленное количество поводов «поговорить об этом позже» и «более детально», но реальных решений не принимающего, а ждущего указаний свыше, либо принимающего их «со скрипом» на основе уродских компромиссов, дабы не создавать конфликты интересов, либо вообще отбивающих принятие решений на корню, основываясь на странной системе рисков, а на самом деле ждущих что эти проблемы решит кто-то другой со временем.

Такая оценка менеджерской прослойки – это крайняя степень гротеска, нельзя сказать, что поголовно все управленцы в Нокиа середины 2000х были такие. Но чтобы понять картину, я использую именно гротеск.

Главная идея этой части опуса – дать понять, что система принятий решений, внедрений новых технологий и т.д. в Нокиа была безнадежно испорчена многоуровневой иерархией бюрократии и борьбой менеджеров самими с собой. Как-то давно в одном новостном издании, некоторые мобильные аналитики восхищались тем что Нокиа не спешит с внедрением новых технологий, обосновывая это зрелостью компании, ее талантами тщательно анализировать рыночную ситуацию и т.д. Спешу огорчить, большинство таких «зрелых» решений было принято исключительно из-за неповоротливости компании, а в ряде случаев вынужденно, то есть только тогда, когда ситуация доводилась до состояния критической и требовала немедленной эскалации.

#### Странные дизайнерские решения

  
От Пекки перейдем скажем к Марии. Мария у нас – старший UX дизайнер для S60. Она разрабатывает UI, а точнее меню для скажем, браузера. Если кто-то помнит меню в смартах на S60, с уровнем вложений до 4х и общим количеством всех пунктов около ста, то поймет о чем я говорю. Лично у меня сложилось такое мнение, что большинство людей работающих в Нокиа, которые просто устали от жизни, стали либо UI дизайнерами, либо UI тестерами, потому что по данному направлению традиционно раньше в университетах не учили и соответственно диплом не просят, а более простого применения человеку было найти нельзя, дальше только увольнение. А как известно, в Финляндии просто так уволить кого-то очень и очень трудно, дешевле его содержать на рабочем месте, но об этом позже.

Так вот про Марию. Ей в сущности плевать на меню браузера. Она разрабатывает его по существующим паттернам, которые подразумевают на каждый чих создавать пункт подменю. Ей плевать на остальные 20 меню в телефоне и что они могут дублировать друг друга. Она может обсуждать два месяца как назвать новый пункт подменю – «Clear browsing history» или «Clear history», и в конце концов назвать это “Clear data”, потому что так короче, локализация на туркменский не выходит за границы одной строки и вообще средний пользователь о «history» знает только то, что в 1918 году Финляндия получила независимость от России.

Всю свою работу Мария усердно делает в Adobe Acrobat, где у нее заготовлены специальные шаблоны, производя на выходе PDF файлы. Разработчики матерятся, вырезая растровые снимки из Adobe Reader’a для макетов и в итоге перерисовывая все самолично, но все боятся обидеть Марию плохим словом, еще и потому что она такая милая и хороший человек. По той же причине, главный чувак который собирает все меню в телефоне в одну кучу, в очередной раз вздыхает и втискивает семьдесят девятый пункт меню в общую картину, попутно перерисовав все из Акробата в то что надо. Он бы конечно сам все сделал правильно, но у него нет времени долго и нудно растолковывать это Марии, потому иначе, если он все сделает сам без ее уведомления, то создаст нехорошую ситуацию, проигнорирует чужое мнение.

Чтобы понять почему так происходит, нужно вернуться опять к финским корням и посмотреть, скажем на воспитание. Как говорят сами финны, Финляндия – это страна средних людей. И это в принципе было оправдано во время войны или еще чего-то, где нужно с использованием «сису» выстоять и не согнуться. По такой логике, лучше иметь сотню крепких середнячков, чем десять звезд. С детства внимание в Финляндии уделяется только неспособным и отстающим. Если ты умный, крутой и талантливый, что считается что ты проживешь и так. Никто тебя не будет поощрять и на тебя равняться, а если ты при этом нескромный или выскочка, то еще и пожурят. Зато те, кто не успевает, кому дается все трудно — всегда находятся в центре внимания, каждый его/ее шажок считается достижением и превозносится. Поэтому дам совет, если вас активно хвалят в финской компании, это повод задуматься над собственными успехами или поведением.

Все это вкупе с тенденцией принятия компромиссных решений в отсутствии времени долгое время давало результаты подобные примеру с меню в S60. Все понимали, что проблема есть, но когда ее устранение спускалось на личный уровень Маши или Пекки, редко кто брал на себя ответственность сказать – «Мария, ты делаешь хреновую работу». Тем более редко кто пытался добиться от Марии более креативного подхода к работе, нежели рисование ста пунктов меню по одному шаблону. Работает над чем то, и ладно.

#### Система бонусов и мотиваций

  
Бонусы в компании Нокиа это отдельная тема. Для простоты скажем, что не было никакой разницы как работник работал в течение года – плохо, нормально или отлично. На основную зарплату это никак не влияло – зарплата только увеличивалась со временем, никогда не понижалась. Влияло это только на годовой бонус, который в силу различных запутанных схем его вычисления во первых никогда не был значительным для персонала со средней зарплатой. Кроме того, во-вторых, финальная разница между теми, кто работал плохо и теми, кто выполнял двойную норму составляла сотню-другую евро в ГОД. Также система оценки эффективности работы была достаточно сомнительной. В ряде случаев приоритеты, расставленные в начале полугодия, становились неактуальными к его концу. Появлялись новые приоритеты и в итоге, менеджеры разводя руками, предлагали ставить среднюю оценку – «нормально».

Система повышения заработной платы тоже была очень нечеткой. Если работник в течение года работал с повышенной отдачей, то ему полагалось некоторая прибавка. Ирония заключалась в том, что даже прибавки выторгованные профсоюзами, в качестве компенсации за инфляцию, были в несколько раз выше, чем если бы человек выполнял двойную норму в течение нескольких лет.

В итоге это привело к появлению огромного количества «гонзо-работников», которые поняв, что на одном месте увеличения зарплаты не дождаться, начинали прыгать по разным позициям в организации, как правило с повышением в зарплате, при этом ничего существенного не производя. Вспомните про вышеупомянутого Пекку, и вы поймете, как и почему было выгоднее откладывать принятие важных решений и не доводить начатое дело до конца. Да-да именно потому что в большой организации было легче сменить работу, чем пытаться пробивать стены головой.

Наибольших же высот и успехов в плане повышения зарплат добивались люди, которые переходили из Нокиа в другую организацию и обратно. Если внутри Нокиа все же существовала какая-никакая политика повышения зарплаты при переходе на другую внутреннюю должность, и учитывались некие внутренние разряды и тарифы, то после выхода из организации и захода в нее обратно, никакие лимиты не действовали. То есть ты мог выйти старшим разработчиком, поработать год в конторе делающей субподряд той же Нокиа в качестве менеджера проекта и зайти обратно уже старшим менеджером с двукратной разницей в зарплате. И все это за два года вместо нескольких лет упорной и ответственной работы на одном месте…

#### Невменяемый субподряд

  
В какой-то момент, когда количество менеджерской прослойки начало плавно увеличиваться, то многие менеджеры разом пришли к мнению что некоторые проекты выгоднее заказывать у сторонних организаций. Происходило это так. К примеру, скажем Юкка в свои 35 лет уже перерос свою должность старшего разработчика и хочет быть менеджером. Юкка у нас занимается написанием редактора СМСок. Ну что-же, давайте его сделаем менеджером и пусть он управляет созданием редактора на концептуальном уровне. Так как архитектурные астронавты все равно в дальней перспективе нам обещают вообще глобальный общий редактор всего в телефоне, мы не будем нанимать ему разработчиков, а закажем все это дело другой конторе, а его сделаем ответственным за тех. задания, и ихнее обучение. Выгода налицо – не надо нанимать постоянных работников и платить за них налоги, суммы расходов четкие, планируемые, плюс ответственность и регулируемые критерии качества / приемки. А когда придет пора лавочку закрывать, то и проблем не будет.

Говоря простым и понятным человеческим языком, кризис и проблемы внутреннего карьерного роста в какой-то момент Нокиа начала компенсировать наемными рабочими, под видом субподряда. В какой-то момент в Финляндии расплодилось невероятное количество фирм, которые существовали основном за счет субподрядов Нокиа, и которые к тому же меняли названия по ходу пьесы — TietoEnator (он же Tieto), Sesca (она же NeuSoft), Flander (он же Symbio), Almare (он же Plenware, он же Cybercom), Digia, Accenture, Ixonos и так далее. В дальнейшем это стало экстраполироваться на аутсорсинг, основанный на классовых различиях и рабстве, типа найма 10 программистов в Индии, вместо одного в Финляндии. Проще говоря, эти же самые компании стали открывать подразделения в Индии и брать подряды туда.

Основная и жестокая проблема субподряда в том что компетенция и ноу-хау за счет этого субподряда размываются где-то между двумя компаниями, в итоге сводя на нет все предыдущие наработки. Проще говоря, не все знания трансферабельны, а аутсорсинг прямо убивает внутреннюю компетенцию компании. Приведу пример.

В 2008м году Нокиа закрыла фабрику телефонов в Германии. Ну закрыла и закрыла, но попутно еще закрыла и отдел который занимался разработкой средств локальной коммуникации в телефонах. Отдел этот, который к слову сказать был одним из самых продвинутых в плане технической компетенции, был перекуплен фирмой Саскен. После закрытия фабрики, Нокиа заключила с этим же Саскеном договор на субподряд, и тот самый отдел уже в сильно поредевшем составе продолжил делать ту же работу для Нокиа. Еще через год, Саскен этот отдел расформировал под предлогом перевода бизнеса в Индию. Если вы представляете себе как можно содержимое мозгов немецких инженеров, наработанное за несколько лет переправить в Бангалор, и обучить пусть даже в десять раз больше индийских программистов-новоделов на должном уровне, то смело идите и патентуйте метод. История с немецкой фабрикой только одна в ряду подобных. Финал истории заключается в том что на каком-то этапе Нокиа дала добро индийским программистам на переписывание этого кода с нуля, потому что никто уже не помнил и мало чего в нем понимал, а код этот просто не трогали годами. Когда же стало необходимо провести глобальный рефакторинг, то показалось что проще его написать заново. Смех заключается в том что это только показалось что проще. В результате – сорванные сроки, многократное наступление на те же грабли и изобретение кривых велосипедов.

Повторюсь, это только одна из историй, коих множество. За период своего «расцвета» Нокиа перетасовала и перегнала огромное количество своих компетенций через финский, китайский, индийский и румынский субподряды, где оные знания были если не утеряны, то пострадали изрядно, в том числе будучи превратно интерпретированы неопытными инженерами.

Если мы возьмем и посмотрим, допустим на Майкрософт, с обсессивно-компульсивными декламациями Балмера — «Developers! Developers! Developers!», то мы заметим очень интересную тенденцию. При ближайшем рассмотрении выяснится, что Майкрософт аутсорсит ВСЕ кроме основного бизнеса. То есть основная ценность – код, пишется внутри организации программистами, которые принадлежат организации. Можно аутсорсить психологов, графических дизайнеров, логистику, адвокатов, бухгалтерию, локализацию и перевод и т.д. но передавать на аутсорсинг технологическую компетенцию, представляющую основной бизнес – нельзя. К сожалению модель аутсорсинга в Нокиа была с точностью до наоборот – код и внедрение технологий делались в десятках других организаций по субподряду.

Закономерный результат этого? В итоге Нокиа попадает в ситуацию где менеджерская прослойка в некоторых областях уже является конечным звеном иерархии. По факту получается толпа умных и много говорящих бывших специалистов, которые теперь ставят технические задания сторонним организациям. То есть на данный момент их основные таланты, которыми они были когда-то ценны, не используются в полной мере. А в торговле и перекладывании бумаг с левого края стола на правый у бывших инженеров таланта зачастую нет. Ведь что такое работа с аутсорсингом – это динамичная борьба двух менеджеров за сроки и цены. В такой работе само содержимое контракта часто не анализируется достаточно глубоко. И далеко не секрет что в процессе субподряда некоторые ключевые требования, прошедшие через руки нескольких менеджеров по цепочке просто выпадали из поставленного продукта. Теперь к слову «динамичный» добавьте вышеприведенное описание типичных финских инженеров-интровертов и возможно поймете суть проблемы.

Ну вот все это мы обсудили. Теперь представьте себе организацию в которой основной бизнес представляет себе один большой субподряд. Представили? Это Нокиа до 2008 года.

#### Симбиан

  
Когда Нокиа в 1998 году выпустила коммуникатор 9110, то на каком-то этапе стало понятно, что без полноценной многозадачной операционки в этом направлении будет работать трудно. Совсем другой вопрос – требовалась ли многозадачная операционка для обычных телефонов, хотя бы и смарт, потому что и выход первого iPhone и такая штука как Windows Phone 7 через 10 лет наглядно показали, что можно собрать нужные приложения во вполне вкусный и почитаемый телефон и без «полноценной» ОС. Тем не менее, на тот момент и именно для коммуникаторов многозадачка была нужна. Ресурсов для написания оной у Нокиа единолично не было. Но поскольку Нокиа была уже взрослой компанией с амбициями, то хотя бы внешний вид или UI она хотела делать самостоятельно.

В итоге Нокиа пришлось выбирать между двумя предложениями – Windows CE и EPOC. Да-да, альянс с Майкрософтом мог состояться уже в 1998м году, но по каким-то соображением Майкрософт не согласился отделять UI непосредственно от Windows CE и потому, а также по ряду других причин, Нокиа стала работать с фирмой Psion.

Для тех кто не знает, в 1998м году была создана контора под названием Symbian Ltd., куда вошли в качестве основателей – Psion, Nokia, Ericsson и Motorola, откуда и взяла начало эта уникальная модель химерической мобильной платформы с элементами маразма. Symbian Ltd. делал три версии мобильной платформы – для Нокиа под названием S60, для Моторолы и Эриксона под названием UIQ и для специфического японского рынка под названием MOAP. У всех у них был разный UI и разные приоритеты по фичам. То есть например фича ядра которая была принята для UIQ, могла задержаться на годик для S60 или наоборот и т.д.

Тут следует сказать еще вот что. EPOC и Symbian как платформа писались сразу на C++, но во времена когда единого стандарта на С++ еще не было. Поэтому Симбиан известен своими мягко говоря «странными» особенностями программирования на C++, которые весьма нецензурно почитались разработчиками софта. Разработка целиком всей платформы, включая ядро, сразу на C++ привела еще к одной особенности. Ничего из уже существующего open source на ней было применить нельзя без портирования на C++, что затрудняло и без того нелегкую разработку.

Особенности С++, невозможность использовать open source пакетов на чистом C, и прочая самобытность операционки дополнялись полностью идиотской моделью SDK и девелоперской документации. Куча разрозненных пакетов API и слабоконсистентный вид их использования привели к интересной ситуации. Чтобы поставить себе среду разработки и написать “Hello World!” приложение, у среднего девелопера со знанием обычного C++ уходило до недели. Можете сравнить это с XCode для iOS или с Android SDK. Неудивительно что за два года существования того же iPhone приложений под него было написано чуть ли не больше чем за все время для Симбиан. И плевать на то что больше половины этих приложений просто графоманская фигня. Суть в том что разработка под Симбиан была достаточно сложным делом для начинающих независимых программистов. И с повсеместным развитием Symbian и внедрением его в смартфоны, появилась необходимость в образовании и обучении отдельного вида специалистов – разработчик под Симбиан. В итоге, после массовых сокращений в Нокиа, некоторым из них было достаточно трудно найти работу по очевидным причинам невостребованности.

Проблема с разработкой под Симбиан была в принципе решаема путем создания более внятных API и приведения в порядок документации, примеров, написания элементарных RADов под тот же Eclipse / Carbide. Это в итоге и так стало делаться на закате Симбиана – частью посредством Qt, частью посредством привинчивания plain C библиотек, но время было упущено и независимые мобильные разработчики, увидев альтернативу в других осях быстро свалили туда.

Было ли это проблемой операционной системы как таковой? Мое мнение – что нет. Можно было Симбиан допилить до конкурентного состояния. Как некоторые могут убедиться на примере последних Symbian устройств, в итоге его достаточно тщательно вылизали, да так что некоторые мобильные аналитики сразу бросились писать очередной трактат на тему того что зря Нокиа от него отказалась и т.д. Но вся данная статья написана для того чтобы показать, что проблемы Нокиа были не в операционке и не в технических решениях, а в неповоротливой организации, которая тупо не успевала за конкурентами, которые подобных организационных проблем не имели.

А реальность была такова – была операционка, ядро которой разрабатывалось методом субподрядной торговли между менеджерами Нокиа и Симбиан, middleware и UI которой писалось писалась самой Нокиа, как платформа S60, были конкретные программы телефонов которые писали нужные фичи, еще не реализованные ни в платформе, ни в S60… Плюс сам Симбиан которая писал операционку, занимался не только Нокиа, но еще и делал две ветки для других участников данного предприятия. Смеху ради могу добавить, что S60 со всеми самобытными украшательствами Нокиа еще и предлагался как отдельная платформа для лицензиатов – Samsung и LG.

В итоге ситуация доходила до смешного. Например, программист из S60 и программист из Симбиан могли в результате совместной работы над проектом заимплементировать раньше времени дополнительную фичу, которую все равно надо было когда-то сделать, оттестировать ее и поставить в билд. Далее эта работающая и заимплементированная фича последовательно выкидывалась, сначала из следующей версии S60, а потом и из Symbian по причине того что менеджеры не были способны утвердить ее в текущих требованиях по каким-то им одним ведомым расчетам рисков и приоритетов. В итоге обоим программистам приходилось править свой оттестированый код, чтобы эту фичу изолировать от того, что в версию утверждалось.

Были и такие случаи, как например один из основных компонентов в библиотеке коммуникации Симбиан был написан студентом проходящим летнюю практику. И потом никакие требования по улучшению для этого компонента долго не принимались ни одним продуктом, потому что кода этого никто не знал, рефакторинг его не выдерживал требования по срокам и риск его трогать всегда рассчитывался как значительный. Это приводило в итоге к тому что отдельный компонент мог несколько лет вообще не трогаться по причинам риска, даже если была реальная необходимость его улучшить. Пару лет его не хотел брать по рискам Пекка, а потом передал его Юкке, который еще пару лет его тормозил по соображениям невысоких приоритетов требования.

В итоге за годы существования такой модели количество бюрократии и буферной прослойки между двумя организациями выросло, а качество продуктов снизилось, ибо для каждой конкретной программы по выпуску конкретной модели смартфона был всегда ужасный гемморой — из чего собирать конечное ПО? Толи ждать пока это напишет Symbian, то ли S60, то ли писать самим, то ли заказывать субподрядчикам. И это все происходило на фоне динамической, изматывающей возни с приоритетами технических требований и постоянным конфликтом интересов между менеджерами разных фрагментированных групп.

#### Что такое фрагментация?

  
В Нокиа, помимо естественных идеологических нестыковок между Симбианом и S60 долгое время был еще один уровень фрагментации под названием бизнес-направления смартфонов. Возникал он не сразу, а постепенно. Активно же начал он обостряться в один прекрасный день, когда на горизонте появился горластый и остроумный чувак по имени Ансси Ванйоки, который путем активного, совсем не свойственного для финнов поведения и прессинга, доказал необходимость создания целого направления под названием Мультимедиа.

Были до этого и другие попытки сделать специализированные направления, типа S90 или NGage. Если вы не курсе, то S90 это была попытка Nokia сделать Touch UI телефоны задолго до Андроида и Айфона, то есть как раз то самое с чем сейчас работает большинство нынешних пользователей смартфонов, тыкая грязным пальчиком в экран. S90 пальчика правда не предполагала, а использовало традиционную палочку – стилус, но тем не менее. Годы работы, сотни людей, несостоявшиеся телефоны 7700 и 7710, куча прототипов включая тач-планшеты, так и не увидевших свет, и миллионы долларов потраченных практически в никуда.

Спросите про NGage? Это должна была быть мобильная игровая консоль. Реально вышло два устройства – NGage и NGage QD, после чего инициативу перевели в плоскость сервиса похожего на Microsoft Xbox, где она окончательно и умерла, потому что пользователи в упор не могли понять почему им надо запускать какой то NGage, если игру можно и просто так поставить. Как известно политика распространения приложений под Симбиан долгое время была абсолютно безумной – под названием «форма восемь» (что спиздим нагуглим, то и носим). В итоге тоже миллионы потраченных долларов.

Так вот, про остроумного чувака Ансси. В отличие от S90 и NGage он каким-то образом продавил свою линию и Нокиа в какое-то время реально выпускала три линейки смартфонов – обычные, мультимедиа (которые упорно назывались мобильными компьютерами) и бизнес. При этом за исключением добавочной буквы N в начале индекса, никто четко не мог сказать, чем Multimedia Moblie Computers отличаются от обычных смартфонов и чем они оба отличаются от бизнес решений. Вот например был телефон Nokia 3250, который был даже посильнее некоторых N-Series, и включал все фишки с музыкой и видео. Мне в свое время так никто и не смог внятно объяснить почему он не мультимедиа. Была такая пословица, отмеченная одним мобильным онолитеком — если чувак употребляет словосочетание “Mobile Computer” говоря о телефоне, то это работник Nokia Multimedia. Это истинная правда.

При всем этом великолепии наличие фрагментации физически выливалось в дублирование разных команд. Вот например, была обычная команда которая имела свой X миллионный годовой бюджет и разрабатывала, скажем, софт для камеры для основной линейки S60. А в соседнем городе сидела другая такая же команда, с еще большим бюджетом, которая делала софт для камеры для т.н. «мобильных компьютеров», то есть тех же смартфонов с приставкой N. Две команды, двойные расходы, две ветки кода которые естественно никак не пересекались. И в это же самое время в Симбиане сидела еще одна команда которая делала софт для камеры, скажем для UIQ. Опять трата денег впустую.

Таких команд возникших из-за фрагментации, на середину 2000х приходилось очень много. Я немного обделил вниманием E-Series – смартфоны для бизнеса, обычно с QWERTY клавиатурой и интеграцией в корпоративные сервисы. Там тоже была фрагментация, поскольку приоритеты бизнес-команд не совпадали с приоритетами мультимедиа и все вместе они вставали поперек горла планам простых пацанов из S60. Если для первых скажем было жизненно важно сделать синхронизацию контактов с Exchange Server, то для вторых было важно сделать синхронизацию музыки с Windows Media Player и обе команды по разному смотрели скажем на софт для встроенной камеры – одним важно распознавание лиц, а вторым – штрих кодов и визиток.

Короче говоря, из-за фрагментации бизнеса куча денег была просрана потрачена впустую на двойную (а иногда и тройную) работу. Сколько именно их было потрачено, в цифрах, трудно сказать, но если когда-то эти суммы будут оглашены, то я думаю, что пара арабских шейхов задохнётся от зависти. Не секрет, что когда началось падение Нокиа, то еще пару лет жизни она себе обеспечила тупо путем сокращения таких вот ненужных расходов и оптимизации бизнеса. К сожалению в тот самый период было сделано много и «переоптимизаций», которые откинули организацию назад. Как правило это делалось мальчиками-новоделами с двухгодичной свежести дипломами MBA в кармане, которые тупо переводили все что можно было перевести на субподряд в Румынию и Индию, с соответствующими последствиями. Ну да про это автор уже написал достаточно…

#### О невменяемых расходах

  
Раз уж речь зашла про траты, нельзя не упомянуть среди прочих про утренний самолет Хельсинки-Оулу. Обычный такой самолет, типа MD-11 на 200 пассажиров, он и сейчас летает. Утром вылетает, летит 600 км, вечером обратно. В былые времена 90% пассажиров составляли работники Нокиа, шутили что остальные 10% пассажиров — это индустриальные шпионы. Потом каждый по приезду еще платил по 30 евро за такси в один конец, потом обратно. А были и другие «полурегулярные» самолеты, в Лондон – там Симбиан, в Германию, в Канаду и т.д. Менеджер среднего звена в Нокиа «налётывал» за год на серебряную карту Финэйра, что соответствует OneWorld Ruby, это 40 000 поинтов. Этом при том что рейс в пределах Европы принесет вам около 3000 в один конец, а в Штаты около 5000. Если же вы менеджер в виртуальной команде, которая размазана между Финляндией, Канадой и Китаем, то у вас перманентно — золото и бизнес-ложи с блекджеком и шлюхами.

Летали много, летали часто, по поводу и без повода, во все уголки света. Иногда реально было проще слетать на пару дней из Финляндии в Германию, провести там часовое совещание и улететь назад, чтобы решить проблему быстро. Когда стали сокращать расходы, то первым делом установили повально системы видеоконференции Tandberg стоимостью по 20 000 долларов за штуку, чтобы сократить перелеты. В итоге ими никто не пользовался, потому что финны от природы стеснительные и не очень любят показывать себя по телевизору, а системы конференции куда-то дели, заменив обычными вебкамерами, которыми впрочем тоже редко кто пользуется.

К чему все это? Непонятно, зачем создавать виртуальные команды с кучей девелоперов, живущих в разных временных зонах и т.д. если на их координацию в итоге уходит просто неразумное количество денег и времени? В определенный период в Нокиа было традицией иметь в команде представителей всех стран и континентов, соответственно работающих по месту проживания. Если целью создания таких команд была возможность дать финским инженерам из маленькой страны посмотреть на мир, то цель эта была достигнута. Если целью было обеспечение эффективной работы, то я с такими методами категорически не согласен.

Еще одной статьей невменяемых расходов была покупка компаний. Приведу один пример. В 2005 году Нокиа потратила 430 миллионов долларов на покупку компании Intellisync. По истечении времени никто так внятно и не смог сказать, что именно было куплено. Я стоя аплодирую владельцам бизнеса Intellisync, которые смогли впарить кусок говна столь успешно продать свой бизнес. На момент покупки этой компании у них не было даже нормального SyncML решения для синхронизации данных. Все что у них было это невнятные сервисы для MSN и движок для синхронизации между Outlook и Palm / Windows Mobile, написанный еще хз в каком году для DOS 16 и с тех пор содержащий этот код. Одно из немногих реально полезных приобретений Nokia – компания Trolltech, написавшая Qt, стоила компании 150 миллионов, почти в три раза меньше. И вот что странное, никого за растрату таких денег не убили, не уволили, не возбудили уголовное дело. Потратили хз на что и ладно, бог с ним.

Это не единичный пример, но по моему мнению — самый экстремальный в истории компании. Полный список же покупок можно увидеть тут: [www.nokia.com/global/about-nokia/investors/acquisitions-and-divestments/acquisitions-and-divestments](http://www.nokia.com/global/about-nokia/investors/acquisitions-and-divestments/acquisitions-and-divestments/). К моему глубокому сожалению он не приводит реальных цифр в долларах или евро, а также не дает итоговой оценки полезности купленной компании. Смею заметить, что достаточное количество купленных таким образом компаний растворилось в Нокиа практически без следа.

Были и претенденты с покупкой профессиональных сервисов вместо компаний. Например Нокиа с 2002го по 2008й годы исправно платила одной английской конторе из пяти человек по 1.8 млн долларов в год за программу синхронизации с Microsoft Outlook под Windows. При этом исходным кодом компания не владела, пока в конце 2008го года ей его не продали за отдельную плату. Контора эта впоследствии вообще ушла из софта и открыла риэлторский бизнес в Лондоне. Кайф?

Основная проблема в таких необоснованных и невменяемых расходах – отсутствие ответственности. Да, именно так, по вышеописанным причинам, в Нокиа за принятие решений редко кто нес ответственность. Вначале принимается коллективное решение, причем наихудшее из возможных, по причине того что формируется на основе компромисса, дабы никого не обидеть, вбирая в себя все недостатки. Потом ответственность за принятие этого решения размазывается. В стиле — купили тысячу комплектов Tandberg за 20 миллионов, поставили и хрен с ним. Потом придет умный дядя и скажет, что они не нужны — примем решение что они не нужны. Ну и в таком духе. Напоминает голосование за символ олимпиады 2014 в Сочи – Леопард, Белый Мишка и Зайка, потом Путин скажет кто именно.

#### Про секреты и про мобильных аналитиков

  
В 2000х годах, компания Нокиа долгое время плевала на мнение пользователей. Да, это факт, который многократно был освещен в прессе мобильными и не очень аналитиками. Не было даже мало-мальски понятной формы обратной связи. Не было аналитики, ни веб, ни крэш, ни использования, ни прочей статистики. Мало кто в компании представлял, ЧЕГО именно хотят реальные люди.

Мобильные телефоны изобретались на основе магических расчетов по какой-то странной системе координат, где ось Х простиралась от домохозяек и фермеров из Перу на ослах до вице-президентов высокотехнологичных компаний, а по оси Y откладывались молодые энтузиасты, Интернет сёрферы, геймеры, любители музыки и прагматичные бизнес-лидеры. В итоге создавались умные диаграммы, с такими кластерами, которые якобы показывали потенциальные ниши для новых моделей телефонов. Как это все можно было создавать без реального и регулярного фидбака со стороны пользователей – мне неизвестно до сих пор.

Как известно, результатом деятельности Нокиа в течение года был выпуск некоего количества новых телефонов. За исключением дизайнерских инноваций, порою трудно было сказать чем один телефон отличается от другого, в плане того же софта. Ответ на вопрос – «ЗАЧЕМ компания распылялась на несколько моделей в течение года?» заключается в той самой таблице ранжирования потенциальных пользователей по осям X, Y и еще одной буквы из русского алфавита.

Если взглянуть честно на ту ситуацию, то из десяти выпущенных телефонов в год количество нормальных редко превышало 2-3. Как правило, даже если софт был на 99% одинаковым, все дело упиралось в главного менеджера продукта. Если менеджер был хорошим, то и продукт был относительно безглючным. Именно поэтому многим запомнились модели 6300 или N95 или E71, а мало запомнились, скажем 7500, N96 или E72. А телефоны типа 7610 или N97, честно говоря в самой Нокиа вспоминали с чувством стыда.

Да, все дело было в менеджере. Если у него было личное желание и задача выпустить качественный телефон, он сам его тестил днем и ночью, всех пинал, заставлял работать, задерживал релиз, когда необходимо и т.д. Но таких были считанные единицы. К сожалению характеристики основного менеджерского состава, я уже привел выше. Вкупе с отсутствием ответственности это давало такие результаты какие видели все. Выпустили глючный телефон и плевать – все равно еще пять в ряду стоят, допилим. Выпнули продукт в сроки, бонусы получены, и все – мы перемещаемся на другой проект, в другие идеи, вечный рост, стремление вперед.

При этом порою в принципе отсутствовало само понимание того что люди не покупают телефоны 3 раза в год, и что в 2005м году люди пользуются еще моделями выпущенными в 2000м. Работники Нокиа жили теми прототипами которые еще только увидят свет в следующем году, а то и позже. Поэтому любые адекватные претензии на качество существующих телефонов, часто отметались под предлогом – «Боже, это же такое старьё!». Такой вот отрыв от реальности. Апдейты прошивки делались только в сервисном центре, и в них фиксились только баги, никаких новых фич или платформ. То, что теперь модным словом называется customer retention отсутствовало в принципе, а присутствовало валовое производство, ведомое загнанными менеджерами у которых хронически не хватало времени и по любому поводу в кармане была припасена куча «рисков». Объяснить менеджеру что надо потратить месяц работы на элементарный рефакторинг чтобы улучшить стабильность и расширяемость компонента, провести платформизацию десяти вертикально написанных фич было практически нереально. Это же время потраченное впустую. Зачем рефакторить то, что и так работало в предыдущей модели? Написали – не трогать, и т.д.

На фоне всего этого порою возникали статьи в прессе и Интернете, которые содержали в себе критику, предложения по улучшению, некие здравые мысли и намеки. Глупо говорить, что внутри компании не видели проблем. Эти статьи цитировались, пересылались из отдела в отдел, но из-за отсутствия четкой ответственности конкретные меры по ним редко принимались, только по самым вопиющим фактам типа массового брака. В том числе меры не принимались по причине того что, как уже было сказано, концептуального механизма обратной связи в Нокиа просто не было. Был отдел PR, который занимался в основном озвучиванием официальной позиции компании, и возможности которого по организации обратной связи, а тем более доведения ее до нужного уровня и команд внутри организации были минимальны.

Тут надо сделать отступление и опять вспомнить про финскую ментальность. Интеллигентные и скромные финны очень не любят ругаться и выяснять отношения. Любой наезд, критика или скандал ставят их в тупик, заставляют краснеть и молча быстрым шагом уходить от источника душевного дискомфорта. Это по сути и происходило в более глобальном масштабе, когда мобильные аналитики публично писали многостраничные опусы с откровенными претензиями и наездами. Проще было их проигнорировать и не опускаться на уровень площадной брани, но тем самым создавался прецендент как будто Нокиа ведет себя слишком высокомерно, так как якобы «не желает отвечать за качество продукта» и т.д., ну вы помните наверное.

На данном фоне некоторые мобильные правдоносцы, режущие правду-матку налево и направо, в числе прочих получали свою лояльную аудиторию внутри Нокиа, то есть среди тех работников которые искренне желая устранения проблем внутри компании, пытались указать словами мобильных аналитиков на существующие недостатки. Вот некоторые из таких фанов печатного слова тоже вогнали свои гвозди в гроб прежней организации.

Обычно происходило это так. Люди имеющие доступ к прототипам «по большому секрету» давали их на предмет поиграться известным мобильным экспертам. Те обещали им дать свой приватный фидбак, а также потестить телефон и вообще выразить авторитетное экспертное мнение, которое якобы поможет улучшить продукт. В реальности все, чего большинство из таких экспертов желает – это просто получить эксклюзив. Тут я сознательно делаю разграничение на реальных экспертов и «таких» экспертов.

Дело в том что Нокиа, как и остальные компании, нанимают определенные организации для тестирования и исследования выпускаемой продукции, организовывают фокус группы для предпродажного тестирования и т.д. При этом составляется официальный документ о неразглашении, который предусматривает ответственность за утечку информации. Так работают реальные эксперты и аналитики.

Все остальные же, кому не досталось места у кормушки, занимаются всем чем угодно, от самопиара до правдоискательства, и порою их отчаянное желание представлять из себя какую-то величину и найти даже сомнительное, но признание, может иногда зашкаливать за рамки порядочности.

Думаю, что у многих на слуху события, когда один из таких аналитиков опубликовал ревью прототипа телефона N8 до его официального представления. Менеджмент Нокиа в связи с этим был вынужден перенести дату официального анонса модели на следующий день после опубликования обзора. Не знаю стоит ли говорить о том, что своих информаторов такой аналитик просто подставил. Точно не стоит говорить о том какие реальные последствия имели эти утечки для людей их допустивших. Выражу только личное сожаление что контрмеры против этого аналитика не стали доводить до конца, с использованием всей мощи бескорыстной правоохранительной системы России, а конкретно пресс-хаты в СИЗО на длинных выходных, как настойчиво предлагал кое-кто из русскоязычных работников Нокиа. Поэтому этот тип, отбрехавшись, продолжает активно рисоваться на публике, делая хорошую мину при плохой игре и выдавая свои личные эмоции за объективную информацию. Ну да бог с ним. Из этой истории следует вынести вот что.

Человек который дает прототипы или иные результаты своей промежуточной работы в руки третьего лица без официального документа о неразглашении, грубо говоря гадит себе в компот или пилит сук на которых котором он сидит. Даты анонсов продукта и даты его выпуска очень точно рассчитываются. Я могу сказать, что ничего так тщательно не рассчитывается производителями мобильных телефонов да и вообще бытового железа, как даты анонса, выпуска и характеристики продуктов. История показывает, что иногда можно даже наплевать на качество, но выпустить продукт в рассчитанный срок. Почему это происходит? Из за конкурентной борьбы, а так же из за особенностей производства мобильников.

Дело в том что характеристики железа планируются заранее и очень тщательно. Сам процесс производства железной платформы – это вещь очень далекая от софтварных характеристик, потому что софт теоретически ты можешь натянуть на железо и опосля выпуска, если модель позволяет, например путем выпуска хотфикса или апдейта – не сахар но и не фатально. А вот если ты прогадаешь с железом, то конкуренты тебя сожрут. При этом железо надо подобрать не абы какое, а качественное и чтобы итоговая цена давала прибыль и не зашкаливала. Надо к тому же сделать так, чтобы после анонса до появления продукта в магазинах ответные акции конкурентов сводились к минимуму и т.д.

В итоге сроки анонса и выпуска продукта – это очень тщательно выверенные даты, когда все должно свестись вместе, и в последствии принести прибыль. Люди не понимающие этого и нарушающие режим секретности разглашая характеристики прототипов просто идиоты. В итоге падающие прибыли бьют по их собственному карману, а то и вовсе лишают их работы, как наглядно прочувствовали кое-какие энтузиасты-протестанты из Симбиан просидевшие по полгода на пособии. Но конечно в итоге это решать конкретному человеку что ему важнее.

До определенного времени режим секретности в Нокиа был настолько формальным, что все роадмапы, названия и характеристики прототипов были доступны в сети практически каждому. Прототипы воровали на фабриках, забывали в такси, воровали даже с хабов DHL, когда их пересылали из одной команды в другую. Целые презентации, по большей части для мобильных операторов, утекали в сеть. Мобильные и не очень аналитики очень даже уверенно в открытую обсуждали на страницах своих изданий характеристики одного не выпущенного прототипа супротив другого, также не выпущенного. Сравните это и допустим, как много такой информации вы найдете про продукты Apple, и вы получите еще одну проблему компании, которую получил Элоп.

#### Про Ovi в лето

  
Апофигеем развития компании стала конечно попытка ее переориентация на сервисы. У компании к тому времени не имелось ни компетенций, ни инфраструктуры, ни методологии, короче говоря ничего для того чтобы сделать качественные сервисы. Но тем не менее в один прекрасный день руководство компании представило развернутый план, в котором прямо говорилось что прямые конкуренты Нокиа — это Apple и Google, у которых уже есть сервисные инфраструктуры, и которые с ними лезут на рынок смартфонов. Смешно, но допустим Самсунг в данном анонсе прямо не признавался конкурентом, а рассматривался как hardware компания, которая конкуренции с сервисными конторами не выдержит. Поэтому предлагалось создать с нуля конкурентную инфраструктуру сервисов и назвать ее Ovi (в переводе с финского – Дверь).

Первым шагом к внесению хаоса было официальное и повсеместное внедрение Agile практик во все области разработки. Количество скрам-мастеров и продакт-оунеров просто зашкалило, благо что курсы занимают всего 2 дня. По всей организации носилась куча проповедников с теми или иными agile библиями, предлагающими иногда такой экстремальный подход к созданию вообще всего, что иной раз создавалось впечатление что гибкие методологии и анархия – это одно и то же. При всей этой вакханалии мало кто представлял, как именно гибкие методологии следует приспособить конкретно к его области. Раньше процесс разработки ПО в Нокиа плавно вытекал из среды разработки железа и встроенного ПО типа контроллеров, где почти ничего нельзя толкового применить кроме методологии waterfall, потому что трудновато заниматься гибкими методологиями при сборке железа. По этой причине софт выпускаемый под телефоны долгое время имел привязку к конкретным требованиям именно конечного продукта (телефона, а не ОС для него) с формальным описанием на UML и RUP-подобным методиками разработки. Дело доходило до того, что разработчик был обязан предоставить функциональную и дизайн- спецификацию еще до того как напишет хотя бы одну строчку кода. Это конечно очень напрягало, и как водится существовали толпы поклонников гибких методологий, которые не уставали орать об этом на каждом углу. Получив желаемое в полной мере, так сказать методом пинка под задницу, эти же адепты уже будучи в составе конкретных команд просто впадали в ступор, в итоге превращая тот же Scrum в полностью идиотский механизм, когда разработчик был обязан каждый свой шаг регистрировать в какой-нибудь тулзе, типа Trac, JIRA или bugzilla, вводить туда потраченное время вплоть до минут и заниматься другой идиотской метрической деятельностью, вместо того чтобы спокойно писать код. Вопрос же со скалированием команд и организацией структур, больших чем скрам оф скрамс, вообще был почти нерешаемым и его разруливали старым добрым waterfall. Короче говоря новое начинание началось с организационного бардака.

Вторым не совсем понятным шагом было получение ответа на естественный вопрос – какие именно сервисы мы хотим? И за какой браться сначала, а за какой потом? Предложений было огромное количество, которые впрочем со временем тихо задохнулись. Ничего лучше, чем повторить сакральную связку – карты, контакты, почта, файлы, музыка, видео, картинки поначалу не нашлось. И если самим себе объяснить необходимость создания и принципиальное отличие сервисов Нокиа от неНокиа было относительно просто, то конечному пользователю это было сделать очень трудно. Учитывая то что подобные сервисы от Google и Apple уже работали, сделать в короткое время такие же сервисы конкурентоспособными, а тем более заставить на них перейти пользователя было очень трудной задачей. Основная ставка делалась на то что у Нокиа есть огромный ресурс в виде существующих пользователей телефонов, и посредством телефона будет возможно «подсадить» их на аналогичные сервисы Ovi. Начать подсаживание предполагалось с сервиса — магазина приложений, который как не странно в итоге удался, как и сервис с картами.

Третьим шагом, внесшим конфуз в ряды сервис-программистов, который почему-то мало кто детально осознавал, был вопрос – а на каких технологиях Нокиа будет строить инфраструктуру для сервисов? В ряде случает ответ был тривиальным, берем open source то open source это, привинчиваем к вот этому бэкенду вот эту базу данных, делаем все на JavaScript и RESTfull API, и «все у нас в кулях», а чего не хватает — докупим (см. про Intellisync). Были и такие которые потрясали томами SOA, и говорили про WS-I, SOAP и прочую WebServices архитектуру. Принципиальных споров замечено не было, но в итоге разные сервисы были построены на разных идеологиях. У опытных специалистов долгожительство подобного оптимизма вызывало большие сомнения, но всеобщий энтузиазм и количество вложенных денег в итоге победил.

В итоге когда делом занялись Agile команды от Ванкувера до Бангалора, с отсутствием опыта как в построении массовых сервисов, так и в организации их интеркоммуникационных моделей (single sign-on, user-centric data, и т.д.) дело стало двигаться с большим трудом.

Следует признать, что много вещей, сделанных во времена всеобщей «дверизации», пошло Нокиа на пользу. Внедрение Agile методологий, внедрение NPS и вообще организация каналов аналитики и обратной связи с пользователем, фокус на customer retention, частичный отход от Симбиана, выпуск карт и программ навигации и т.д.

Тем не менее, в итоге Ovi тихо загнулась, часть сервисов что осталась как например почта, была передана Yahoo. Можно долго спорить о том загнулась ли Ovi до смены стратегии компании или это смена стратегии загнула ее. В любом случае о том сколько бабок было вбито в эту инициативу история как обычно умалчивает.

Но во всей этой истории есть еще один положительный элемент.

#### Еще один положительный элемент

  
Мы немного подзабыли про менеджерскую прослойку. Тем временем этот балласт никуда не делся. По закону сохранения массы они перетекают туда где есть деньги, где можно поговорить ни о чем и где на фоне массовой иллюзии прогресса можно тоже поизображать кипучую деятельность. Так и получилось с Ovi. Все горлопаны и менеджеры-теоретики, со временем всплыли там. Приведу один пример.

Нокиа регулярно и часто выпускала различные виды телефонов для одной ей понятных сегментов покупателей, которые в упор не хотели в эти сегменты втискиваться, а наоборот просили поменьше, но покачественней и с обратной совместимостью… Так как продуктов было много, то существовали формальные бизнес-процессы, которые позволяли эти продукты производить, от начала и до конца. Один из таких процессов назывался – Product Creation Process, который собственно и описывал что нужно сделать для того чтобы обосновать, спроектировать, ну и так далее, мобильный телефон. Так вот один из новоявленных идеологов Ovi презентовал публике вполне официальный документ под названием Service Creation Process, который по сути был калькой с PCP, сделанной тем же человеком, который просто получил новый пост в новой организации. Те же слайды, только некоторые слова заменены с «продукт» в смысле «мобильный телефон» на «продукт» в смысле «сервис». Дебилизм исключительный, но отражает ментальное состояние менеджерской прослойки. Как видно, некоторые из них видимо всерьез считали, что Нокиа будет запускать по 10 новых сервисов в год…

Положительный момент при этом заключается в том что Ovi немного оттянула менеджерский балласт от телефонов, что позволило спокойно и реально начать допиливать Симбиан и серьезно браться за Маемо на Линуксе, чтобы создать достойную платформу для войны с конкурентами. И кое что даже удалось, первым делом ликвидировали угребищную модель вечного аутсорсинга, путем покупки Симбиана, разработчикам предложили Qt и сделали более-менее вменяемый пакет, который относительно легко ставится. Ввели достаточно понятную систему версий, постепенно стали убирать большинство фрагментаций, все эти E-Series, N-Series, и т.д. После того как привинтили Qt к Симбиану, начали его портирование на S40 и Maemo. Qt в качестве основной библиотеки, единый инструментарий и фреймфорк значительно облегчил и улучшил процесс разработки. Бывало что Qt умудрялся демпфировать и нивелировать даже страшный индусский код, доля которого кстати неумолимо сокращалась. Более того, Симбиан превратили в нечто похожее на open source комьюнити под названием Symbian Foundation и открыли большую часть кода под EPL.

Тем не менее, после покупки Симбиана, появилось некоторое количество менеджеров по требованиям, которые в прошлом в основном летали в Лондон и обратно и в итоге остались без работы. Какая то часть из них просочилась в Ovi, но изрядное количество продолжало отравлять организацию. И вот вдруг на этом фоне, Ovi фактически умерло. Тихо, без помпы, но менеджерская прослойка оттуда стала потихоньку утекать, как вы думаете куда?

Да, к этому моменту Нокиа стала вливать средства в разработку платформы MeeGo, преемнику Maemo, и готовиться к выпуску телефонов N950, N9 и кое-каких еще. Вместе с средствами, правда уже без былого шика, в платформу стала вливаться менеджерская прослойки, мигрировавшая с неактуального уже Ovi. Ровно с этого момента контора была уже обречена.

Достаточное количество людей отмечает, что итоговый результат MeeGo был не так плох. Честно говоря мог бы получиться еще лучше. Оригинальный дизайн UI, «честный Линукс», Qt, и все такое. Все направление просто закопала зараза болтунов, в виде комитетов по принятию решений, групп управления и остального балласта, с которыми MeeGo превращался в неповоротливого монстра из былых времен.

#### Так что же все-таки сделал Элоп?

  
Ну вот и представьте – у вас такая компания, которая как бы лидер, но все показатели её динамики – нулевые, если не минусовые, в то время как конкуренты активно набирают обороты.

Все, даже тактические роадмапы планируются на годы, везде коллективная ответственность, точнее ее отсутствие, детальное стратегическое планирование осуществляется из-под палки и традиционно ни одно из оных не реализуется в срок, куча денег потрачена и тратится фиг знает на что, любой ваш шаг просто вязнет в болоте, кругом пруд пруди философствующих специалистов, которые реально ничего уже давно не делают, а также бесконечный набор человеко-процессов. Большинство основного бизнеса отдано на откуп субподрядчикам, без которых уже не продохнуть.

И вот в этой ситуации вы не можете оперативно выпустить, скажем телефон с разрешением 1280x720 даже если есть железо, потому что Симбиан под это дело еще не заточен, а заточка закончится по времени только тогда, когда это станет уже неактуальным. И вы не можете выпустить LTE телефон, хотя технологи вкладывались в стандарт с его основания, но вот черт, внедрение его на MeeGo займет по самым оптимистичным прикидкам полтора года. А уже есть корейские модели с LTE на рынке, правда традиционно кривые.

Итак, что бы вы стали делать? Вот что сделал Элоп:

*   Нейтрализовал влиятельную составляющую менеджерского балласта. Упразднил все комитеты, борды принятия решений, управленческие группы и т.д.
*   Тем самым упразднил коллективную ответственность и ввел персональную. Теперь каждый менеджер — ответственен за принятие решений в своей компетенции, и принятие необдуманных решений прямо сказывается на его карьере. Кое-кто кстати по инерции пытался работать по старому и в итоге вылетел на вольные хлеба.
*   Нейтрализовал компетенционную составляющую балласта. Ты крутой теоретик–балабол в Симбиане – «давай, до свидания!» Нет больше Симбиана, хочешь работать по профилю – работай в Accenture.
*   Ликвидировал кормушки субподрядчиков по основной линии бизнеса. И наоборот, вывел неосновной бизнес в аутсорсинг. К сожалению в основном бизнесе некоторые из субподрядчиков настолько плотно присосались, что долгое время не представлялось возможным их оторвать без ущерба.
*   Оптимизировал затраты. Ликвидирована фрагментация, хотя и кардинальным путем – путем ликвидации самой ее причины. Нет операционки — нет проблемы.
*   Ликвидированы виртуальные команды, и следовательно необходимость в ненужных путешествиях. Независимые части продукта разрабатываются на сайтовой основе.

Отдельно стоит сказать про MeeGo. Была, была реальная надежда, что он выплывет, тем более что тот же Windows Phone как платформа на тот момент не был намного лучше. Но понаблюдав какое-то время за MeeGo и проанализировав как работают его операционные составляющие, вывод был неутешительным – внутренняя машинерия Нокиа не способна производить программные продукты с нужным качеством за требуемое время. Одна из причин – тот самый балласт, который пропитал организацию сверху донизу, в том числе и MeeGo. Не буду раскрывать секрет Полишинеля, но намекну на то что и после ликвидации MeeGo были одобрены дальнейшие попытки составить конкуренцию Андроиду с использованием своей платформы на Линуксе, и наработками MeeGo. Но тоже похоронены, по тем же причинам – внутренние процессы разработки софта были слишком неповоротливы, а времени учиться уже не было.

При всем этом надо также смотреть на неумолимо уменьшающиеся деньги, которые были потрачены на Ovi, на покупку Intellisync, на билеты до Бангалора и в Лондон и проплату невменяемых субподрядов.

Я специально не буду рассматривать другие аспекты деятельности Элопа, такие как ранние обещания продуктов на WP, закрытия фабрик и т.д. Это и без меня много раз было обсосано и нового ничего я тут не скажу. Однако, в заключение, повторю еще раз – у Элопа не было другого выхода, кроме как полностью реструктурировать компанию путем вывода основной разработки софта в другую компанию. К сожалению, внутренние процессы в Нокиа завели собственные процессы разработки в жестокий тупик, и даже Андроид не спас бы компанию из-за повсеместной бюрократии и постоянной практики принятия коллективных решений на основе компромиссов.

Отдельно извиняюсь за не вполне русский язык и засорение английскими терминами. К сожалению автор не совсем русский и не знает как правильно некоторые термины сейчас называются в современном языке.

**UPD:** Очень прошу обратить внимание на то что информация в данном посте отражает ситуацию в компании, сложившуюся на 2010й год, до ее реструктуризации и смены стратегии. Как я неоднократно упоминал, нынешняя Нокиа — это новая компания, которая при своей реорганизации учитывала вышеприведенные недостатки и прямо с ними боролась. К сожалению, даже внутри компании многие до сих пор не понимают какие истинные причины стояли за сменой стратегии, платформы и методов работы, поэтому данный пост — это не столько инсайд, сколько попытка объяснить что именно Нокиа сделала одним решительным шагом, в том числе и самим её работникам. Как обстоят дела сейчас в обновленной компании с новой стратегией, автор пока не знает, но искренне верит что все принятые меры в итоге приведут Нокию к успеху. Большое спасибо за комментарии, не ожидал что будет столько положительных отзывов.

Автор.",null,undefined
2016-01-11T22:31:29.000Z,https://medium.com/@amzin/%D1%83%D1%80%D0%BE%D0%BA%D0%B8-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B5-%D1%8F-%D0%B2%D1%8B%D0%BD%D0%B5%D1%81-%D0%BF%D0%B5%D1%80%D0%B5%D0%B1%D0%BE%D0%BB%D0%B5%D0%B2-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE-%D1%87%D0%B5%D0%BC-2bbb3ab273d4,false,"[""best""]",article,"Уроки, которые я вынес, переболев много чем",null,pocket,null,"# Уроки, которые я вынес, переболев много чем

by [Alexander Amzin](https://medium.com/@amzin), [medium.com](http://medium.com)  
January 11, 2016 06:59 AM

[Alexander Amzin](https://medium.com/@amzin?source=post_page-----2bbb3ab273d4----------------------)

МКБ-10 ([Международная классификация болезней 10-го пересмотра](http://apps.who.int/classifications/icd10/browse/2010/en)) делит все недомогания, ненормальные состояния, аномалии нашего организма на два десятка классов. Я предпочитаю более простое деление всех болезней на три типа.

**Во-первых, смертельные.** Здесь ничего не поделаешь. Если ты этим заболел, ты умрешь, и сопротивляться бесполезно.

**Во-вторых, преходящие.** 31 декабря 2015 года я свалился с чем-то, что позже буду называть недоангиной. Резь в горле, кашель, высокая температура, неспособность читать, смотреть, играть, не говоря уже о том, чтобы работать. И вместе с тем полная уверенность в том, что это пройдет. Действительно, долгий сон, полоскания, порошки — и уже 7 января я в социальных сетях, а 8 января перезапускаю медиапроект [«Мы и Жо»](http://themedia.center).

Преходящие заболевания не оставляют по себе памяти, а если и оставляют — то небольшую. Мы можем предсказать, на какой срок выйдем из строя. Мы умеем с этим справляться. Так что говорить тут не о чем. «Это тоже пройдет».

**В-третьих, хронические заболевания, и о них-то мы и поговорим.** Это состояния тела и духа, которые вылечить нельзя. Вам с ними жить. Я отношу к хроническим любые неизлечимые (или трудно излечимые) состояния — ампутированную ногу, сахарный диабет, ВИЧ-статус. С любым подобным состоянием можно жить, нежелательные эффекты до определенной степени даже можно ослабить: протезом в случае ноги, диетой и инъекциями инсулина при диабете, правильной терапией при ВИЧ. Но наука в ближайшие 10 лет не поможет отрастить ногу, не вылечит 9% населения земного шара от диабета, не изгонит ВИЧ.

Про сахарный диабет я знаю не понаслышке — примерно 5 лет назад выяснилось, что моя жизнь изменилась навсегда. Безусловно, потрясение. Но нельзя сказать, что я не был готов к испытаниям — всевозможные капли, порошки и таблетки от другого, неврологического заболевания я принимал с детства. Сама идея корректировать сбои организма с помощью сознательных процедур не была мне чужда.

Третье состояние, с которым я начал жить совсем недавно — депрессивное расстройство. Впрочем, врачи пока не уверены в своем диагнозе. Мы продолжаем подбирать терапию, а заодно и вычисляем, что это.

История, которую я хочу рассказать, не о том, как победить депрессию, излечить сахарный диабет или починить мозг. Правильный ответ — **никак**. Миллиарды людей живут с хроническими заболеваниями. Вы должны быть готовы к тому, что в вашей жизни появится такое состояние и избавиться от него вы не сможете.

Героизм немногих победителей — это истории победы над болезнями, казавшимися смертельными или хроническими. Убеждать, что всякий может (здесь описание любого метода — включая самые шарлатанские) выздороветь — бесполезно и подло. В битве «русская моча против скальпеля врача» в случае хронических неизлечимых заболеваний побеждают заболевания.

Я не врач и поэтому не собираюсь давать советов, относящихся напрямую к вашим болезням или ощущениям. Но я пациент, которого всю дорогу сопровождают хронические неизлечимые заболевания. За эти почти 35 лет я вынес множество уроков, которые, видит бог, можно было бы купить у жизни подешевле. Я решил составить краткий список для тех, кто узнал свой диагноз сегодня или столкнется с ним завтра. В минуту слабости, которая обязательно настает после таких новостей, ничто не поддерживает лучше знания, что другие люди уже научились с этим справляться.

## Урок 1. Ваше самочувствие — не просто так

Не бывает плохого самочувствия без причины. Нормальный, здоровый человек бодр. Он может устать, может быть раздражен, но он не может испытывать, например, позывов к мочеиспусканию каждые 15 минут или, напротив, безудержной жажды. У него не может просто так болеть голова. Он не срывается на знакомых по пустякам. У него не бывает беспричинной подавленности или плохого настроения. Он не опускается, обессиленный, на диван после рабочего дня. Он не хватает конфету всякий раз, когда проходит мимо (и не расстраивается, если конфеты закончились). Он быстро засыпает и легко просыпается.

Любые отклонения от нормы — сигналы организма. Если сигналы повторяются, с вами что-то не так. Самодиагностика работает плохо — вы некритично воспринимаете свой организм. Как и древние греки, вы считаете себя мерой вещей, а потому думаете, что «не работается» — это обычное состояние, даром что половине коллег тоже не работается. Правда в том, что _половина коллег тоже нездорова._

Вспомните, как вы себя чувствовали пять лет назад. Было лучше или хуже? Что изменилось в вашем восприятии? Если вы не можете докопаться до причины, идите к врачу. Срочно. Вы будете искать причину не ходить — нет денег, времени и так далее.

Знайте: если вы действительно серьезно больны, то деятельной энергии у вас остается все меньше и меньше, а ваша предполагаемая продолжительность жизни каждый день сокращается больше чем на день. Ваша задача — убедиться, что это не так.

## Урок 2. Никогда, никогда, никогда не ставьте себе диагноз

Бывает, люди читают в Сети описания болезней, делают выводы, обижаются на скептическую реакцию врача. Врач в данном случае прав.

Мало обладать информацией. Надо уметь посмотреть на эту информацию с нужной точки зрения. Врач этому долго учился, а вы нет. К концу первичного приема пара «пациент — врач» обычно располагает одинаковой исходной информацией. Вот только без уникальной точки зрения на эту информацию вы в этой паре с трудом исполните роль туповатого Ватсона, но никак не Шерлока Холмса.

Кроме уникальной точки зрения у Холмса есть опыт раскрытия дел. Он знает, что лекарство, которое, как вы думаете, вам поможет, с большой вероятностью даст побочные эффекты. Или он знает, что в случаях, похожих на ваш, лучше себя зарекомендовал другой препарат. А, возможно, он наблюдал и совсем третий случай, и в нем оказалось, что схожесть с тем или иным заболеванием ложная.

Может статься, что у вас несколько заболеваний. Серьезные нарушения работы организма поодиночке не ходят. Тогда голова болит от одного, живот от другого, а запоры продиктованы и вовсе третьей причиной. Только врач может разобраться в хитрых реакциях вашего организма. Не забудьте рассказать ему о любых принимаемых таблетках, аллергиях, отсутствии прививок, поездках, частых «преходящих» болезнях. Хороший врач ценит полноту информации превыше всего. Будьте настойчивы, если есть хоть малейшее подозрение, что дело непростое. Сходите туда, где с вами на приеме провозятся час. Выложите все. Подготовьтесь перед приходом.

Вам назначат анализы, дополнительные исследования и (если вы это читаете), вероятно, сообщат диагноз.

## Урок 3. Вы можете выбрать, сколько вам жить

Итак, у вас есть диагноз, и вы с врачом в нем более-менее уверены. В случае хронических неизлечимых болезней это значит, что ваша жизнь свернула в сторону. Теперь вы будете жить по-новому. Поймите, что вас ждет. Кроме терапии, неудобств и падения уровня жизни стоит вернуться к словам из первого урока про деятельную энергию.

Узнайте, сколько вам осталось. Это легче всего показать на масштабе (к сожалению, не для каждой болезни и не для каждой страны можно найти данные, ниже приводится исследование, которое первым попалось под руку и достаточно неплохо демонстрирует подход).

Допустим, что вы британец 55 лет. В 50 лет вам поставили диагноз — диабет 2 типа. Вы не бросили курить, давление у вас 180, сахар в крови постоянно повышен, как, впрочем, и уровень холестерина. Статистически британские исследователи [дают вам 13,2 года жизни](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2663724/). С высокой вероятностью вас закопают (сожгут) до того, как вам исполнится 69. Жаль, потому что средний британец (мужчина) живет 79 лет.

Прогоним другой вариант. Все то же самое, только вы не курите, уровень холестерина у вас в норме, за сахаром вы следите, а давление 120, как у космонавта. В этом случае вы проживете 21,1 год и, вероятнее всего, уйдете из жизни в 76–77 лет.

В «хорошем» сценарии болезнь украла у вас 2–3 года, а могла — 10. Причем сам кража происходит не одномоментно. Каждый день без терапии обходится вам больше, чем в день. Средний британец 55 лет рассчитывает прожить 24 года. Если он пренебрегает советами врача, то просто каждый новый день идет за два.

У меня для вас две новости, и обе плохие.

Во-первых, жизнь коротка. В России средняя продолжительность жизни составляет 70,5 лет. Если вы мужчина, то с большой вероятностью проживете лет 65 (по данным ВОЗ на 2013 — 63), если женщина — возможно, дотянете до 77 (по данным ВОЗ на 2013 — 75). На картинке синим мужчины, красным женщины.

Во-вторых, хронические заболевания часто дают о себе знать не в 50 и не в 55 лет, а в 30–35. Представьте, что вы россиянин, вам 35, и вам осталось 28–30 лет, а не 44 года, как вашему британскому сверстнику.

Принцип «день за два» уполовинивает и без того небольшой остаток. В результате именно у вас вероятность уйти в лучший мир вскоре после 50-летнего юбилея опасно повышается. Зато терапия почти гарантированно отодвинет эту опасность за 60-летний предел.

## Урок 4. Торгуйтесь с врачом

Американский психолог Элизабет Кюблер-Росс, изучая поведение больных после оглашения им смертельного диагноза, выделила знаменитые пять стадий:

1.  Отрицание
2.  Гнев
3.  Торг
4.  Депрессия
5.  Принятие

С тех пор ученые выяснили, что далеко не каждый пациент проходит через все эти стадии, а порядок стадий может и меняться. Но схема так удобна и человечна, что прижилась.

Понятно, что в случае хронических, а не смертельных заболеваний реакция пациента иная (лично я предпочитаю думать, что она мягче и продуктивнее).

Кюблер-Росс распределила стадии для хронических заболеваний примерно так:

1.  Отрицание
2.  Гнев
3.  Страх
4.  Грусть
5.  Принятие

В моем случае стадия гнева как таковая отсутствовала, а принятие вместо смирения в стандартной модели привело к составлению конструктивного плана жизни. В вашем случае тоже все может пойти не по схеме.

Пока вы проходите одну стадию за другой, важно добавить этап торга и заключить самую выгодную сделку с болезнью. Важно только найти хорошего помощника в заключении сделки. Это, конечно, врач.

Вскоре после постановки диагноза вам назначат терапию. Врач скажет быть осмотрительнее, порекомендует определенный образ жизни и лекарства, предупредит о побочных эффектах.

Новости о вашем здоровье не должны помешать вам жить полной жизнью. Тут и начинается торг. Его предмет — качество жизни против продолжительности жизни.

Представьте себе красивую фигурку. Редкую, музейной ценности игрушку. Ее можно отдать детям, игрушка быстро принесет мало счастья и будет безжалостно сломана через две недели. Можно попросить обращаться с нею бережно — и старший ребенок передаст ее младшему через несколько месяцев. Можно поставить за стекло — на долгие годы. Можно хранить в шкатулке и показывать лишь изредка. Ваше здоровье — хрупкая игрушка, которая уже сломалась. От того, насколько бережно вы с нею обращаетесь, зависит ваше время жизни.

Стратегия, при которой вы возьмете от жизни все, наплевав на советы специалистов, — не самая выгодная в современном мире, где даже некоторые больные мужчины способны дожить до восьмидесяти.

Очень часто врач может предложить несколько вариантов терапии. Важно выбрать не тот, которым пользуются все, а тот, который подходит именно вам. Трудно не привести в пример себя — чтобы иметь возможность встречаться с партнерами и коллегами, я выбрал дорогостоящую, но гораздо меньше сковывающую меня терапию. В России мой способ инсулинотерапии используют менее 5% населения.

Точно так же в следующий раз, когда в очередной раз я консультировался по поводу неврологических проблем, мы с врачом искали не просто таблетки, а средство, которое сохранило бы гибкость ума. Нет смысла продлевать себе жизнь, если ты не можешь продуктивно работать.

На этот подбор ушло несколько месяцев, разные врачи предлагали разные варианты, но сейчас, кажется, мы близки к поставленной цели. Без торга было бы куда хуже, поверьте.

## Урок 5. Не доверяйте альтернативной медицине себя целиком

Любые лекарства и методы, эффективность которых не доказана научно (любые!) могут не сработать, а могут и оказаться просто обманом. Есть в коммуникации классы утверждений, которые вас успокоят, снимут стресс, дадут вам надежду — вера в бога, высшие силы, целебные силы мумиё и что угодно еще.

Составьте два списка. В первый внесите средства, гарантированно действующие на тело — прописанные вам лекарства, образ жизни и т.п. Во второй — средства, которые, _как вы думаете_, облегчают ваше состояние. Мы, безусловно, все индивидуальны. Можно верить, что молитва поможет таблетке рассосаться лучше. Можно — что медитация излечивает рак. Можно — что сыроедение лучшее, что изобрело человечество после праноедения.

Теперь внимание. НИКОГДА не путайте местами списки и никогда не позволяйте пункту из второго списка влиять на первый. Если вы верите в таблеточную молитву — _сначала_ выпейте таблетку и молитесь, сколько хотите. Но если вам при гастрите предписана врачом определенная диета — не надо без согласования с врачом переходить на питание солнечным светом. Это плохо кончится.

С момента диагноза и назначения удобной терапии для вас существует безусловный приоритет первого списка над вторым. Иначе вы умрете раньше, чем хотели.

Здесь удачно встанет пример со Стивом Джобсом, который пытался лечить операбельный (!) рак травками, запустив себя до крайности. Он совершил ошибку, поменяв списки местами. Ваша задача — прожить дольше Стива Джобса, который протянул 56 лет — всего ничего даже по российским меркам. Его глупость дорого обошлась всему человечеству.

## Урок 6. Ваше здоровье — не ваше

Хроническая болезнь часто лепит из людей фаталистов — будь что будет, сколько отпущено, столько и есть, и не ваше дело, что я делаю с собою — мое здоровье принадлежит мне. В большинстве случаев это ложь.

Часто хронические заболевания диагностируются у людей старше 30. К этому возрасту многие пациенты обзавелись семьей и детьми, работают, выплачивают кредит, помогают родителям, то есть включены в систему с несколькими иждивенцами или зависимыми агентами.

Если хроническое заболевание мешает им трудиться, от этого страдают все участники системы. Кредиты становятся непосильными, терапия требует средств, сокращаются накопления, труднее обеспечивать детей и родителей. В схожей кризисной ситуации здоровый человек ищет подработку. В случае хронического заболевания дополнительный труд создает новую нагрузку, соотношение «1 день за 1 день» сдвигается в нежелательном направлении.

Это главная проблема, которую вы будете решать всю оставшуюся жизнь. Не вопрос «почему я» (потому что) или «как это вылечить» (никак), а вопрос ответственности за ваших близких. Каждый день должен приближать вас к решению задачи «как сохранить и улучшить качество жизни моих близких».

Здесь всякий опыт индивидуален и совета быть не может. Я, например, обнаружил, что очередное хроническое заболевание гораздо легче переживается в статусе независимого специалиста и преподавателя, чем наемного работника, обменивающего время своей жизни по строго лимитированному курсу. Если бы давно, еще пять лет назад, я решил иначе, сейчас, в начале 2016, вся моя терапия могла бы быть иной (как и страна проживания).

## Урок 7. Планируйте

В книге иллюстратора Яны Франк «Муза и чудовище» на меня произвел огромное впечатление рассказ о том, как Яна столкнулась со страшной болезнью, высосавшей все соки и не дававшей ей рисовать больше десяти минут за раз. Она победила болезнь, осознав свои возможности и поставив действия под жесткий контроль. Если каждые десять минут нужна передышка, приходится знать, чем ты займешься через 10, через 20 и через 30 минут.

Два необходимых условия эффективного управления — учет и контроль. Здоровье ограничивает ваше время и деятельную энергию. Значит, надо поставить время и энергию под контроль, заставить служить себе.

Рассматривайте это не как ограничение, а как возможность навести порядок в своей жизни. Игры, сериалы, бесцельное времяпрепровождение с момента, когда вы прочли эти строки, резко подорожали. Бесцельно проводить время, в конце концов, можно лишь при отсутствии цели; вряд ли у вас с этого дня будет хотя бы день без цели.

Это не пример так называемого позитивного мышления — спать 7–8 часов в день для больного-хроника такая же (а иногда и более важная) цель, как и заработать миллион. Осознание того, что в жизни наконец-то появились четкие правила, невыполнение которых отнимает отпущенное время, не только прочищает мозг, но и освобождает от условностей.

## Урок последний. Возможности вокруг вас

Любую новость, любое событие, случайность — хорошую или плохую — рассматривайте как возможность. Переверните ее вверх тормашками, если потребуется, разберите и соберите снова.

Отрицание, гнев, страх, грусть — все это в глазу наблюдателя. В вашем глазу, и вы не виноваты, что стали ненадолго подслеповаты. Закройте глаза, вспомните, как в детстве вам казалось, что мир состоит из непройденных дорог, и вы, когда вырастете, обязательно прошагаете их из конца в конец все сразу и одновременно.

Так вот. **Вам не казалось.**

_Саша Амзин_",null,undefined
2015-03-28T17:33:18.000Z,https://tonsky.me/talks/2015-codefest/,false,"[""best""]",article,"Никита Тонски разжевал всё, что я обычно с переменным успехом рассказываю д",null,pocket,null,"# ФП в браузере

by [Nikita Prokopov](https://www.facebook.com/nikitonsky), [tonsky.me](http://tonsky.me)

Я расскажу о построении веб-приложений со сложным интерфейсом.

Под сложными я понимаю интерактивные страницы и приложения, у которых на экране одновременно развивается более одного сценария.

В чем проблема сложных интерфейсов? Их сложность растет нелинейно относительно количества фич. Подход «разделяй и властвуй» работает плохо, потому что человек ожидает от интерфейса адекватности, контекстности, уместности — а это значит, что фичи начинают переплетаться между собой и влиять друг на друга.

Объясню на пальцах: мы делаем магазин и сделали рубрику товаров (первый компонент). Если мы теперь добавим форму фильтрации, очевидно, что содержимое рубрики должно меняться в зависимости от того, что там введено. Но верно и обратное: содержимое рубрики влияет на поведение формы. Если у нас в рубрике всего 10 товаров, нужно фильтр скрывать. Если все товары синие, можно убрать параметр «цвет» из фильтра. Потом мы добавляем возможность залогиниться (третий компонент) и выясняется, что залогиненному пользователю надо рисовать в каталоге звездочки для отмеченной одежды, а также применить скидки и пересортировать по цене. Пагинатору надо учиться помнить свое положение при манипуляциях с формой поиска. И так далее.

Каждый новый компонент влияет на предыдущие, и предыдущие нетривиально связываются с новым. Для неинтерактивного приложения это еще как-то можно учесть — как минимум, условия игры фиксированы на момент рендеринга страницы. Но у нас же приложение! Новые товары могут прилететь на страницу по аяксу. Пользователь может накликать «никогда не показывать мне это, это и это». Через 5 минут страница ничего общего не будет иметь с тем, как она выглядела на момент загрузки. И все это надо адекватно отрисовывать.

Получается, что каждый компонент это не просто поле ввода и ячейка в модели. Его внешний вид определяется предысторией (как, где и сколько в него тыкали) и окружением (как вообще выглядит приложение, какой контекст вокруг).

По-хорошему тут надо еще рассмотреть промежуточные состояния, обработку ошибок, координацию (эффективное централизованное общение с сервером, например), анимации, тестирование. Так и получается, что там, где в бэкенде — три поля в табличке и сгенерированные фреймворком заглушки, на фронте — 3000+ строк тайного знания.

Собственно, это и есть постановка проблемы. С ростом количества фич в интерфейсе сложность кода растет нелинейно. Сложность здесь не алгоритмическая, не оптимизационная даже, а просто сложность в количестве комбинаций, сложность управления информацией. Поэтому даже некоторые формы поиска по магазину можно считать сложными интерфейсами. Чтобы такие интерфейсы поднимать, одного наития недостаточно, нужны средства кардинального упрощения разработки. О них мы и поговорим.

И еще одна ремарка. В докладе заявлено «веб»-программирование, однако сами подходы универсальны и сильно важнее, чем конкретные названия библиотек. Так что даже если вы не пишете под веб, вам это может быть интересно.

## Ликбез по ФП

Что я понимаю под функциональным программированием? Это зонтичный термин, возникший спонтанно и исторически, точного определения у него нет.

В простейшем, минимально-обязательном смысле функциональным называют язык, в котором есть функции высшего порядка и замыкания. Сегодня это джентльменский набор, стыдно не уметь, подключились даже Java и C++11. В _таком_ смысле JavaScript, конечно, исконно-функциональный язык — там всегда только так и программировали.

Нас будут интересовать три других аспекта, тоже причисляемые к ФП: иммутабельные данные, чистые функции и ленивость. Остальные аспекты — хвостовую рекурсию, паттерн-матчинг и алгебраические типы данных — мы пропустим.

Проще всего объяснить чистые функции. Чистые функции не производят никаких наблюдаемых побочных эффектов, только возвращают результат. Не меняют глобальных переменных, ничего никуда не посылают и не печатают, не трогают объектов, и так далее. Принимают данные, что-то вычисляют, учитывая только аргументы, и возвращают новые данные.

В ФП чистые функции стараются использовать по-максимуму. Плюсы:

*   Легче читать и понимать код
*   Легче тестировать (не надо создавать «условий»)
*   Надежнее, потому что не зависят от «погоды» и состояния окружения, только от аргументов
*   Можно запускать параллельно, можно кешировать результат

Чтобы использовать чистые функции, нужны дисциплина, понимание преимуществ, привычка. Технических средств почти никаких не нужно, за исключением, может быть, иммутабельных коллекций.

Иммутабельные структуры данных: списки, словари, множества — это коллекции, которые нельзя изменить. Примерно как числа. Число просто есть, его нельзя поменять. Также и иммутабельный массив — он такой, каким его создали, и всегда таким будет. Если нужно добавить элемент — придется создать новый массив.

Преимущества неизменяемых структур:

*   Безопасно разделять ссылку между потоками
*   Легко тестировать
*   Легко отследить жизненный цикл (соответствует data flow)

Иммутабельные структуры данных критически важны в функциональном программировании, без них чистые функции не могли бы работать с коллекциями, ведь добавление элемента в коллекцию — это сайд-эффект.

Есть один подвох, о котором вы, возможно, уже задумались. Наивная реализация иммутабельных коллекций (даже copy-on-write) была бы жутко неэффективной, поэтому используются оптимизации, в частности, структурное переиспользование.

Все структуры реализованы как деревья, и при изменении одного из листов пересоздается только одна ветка, а все остальные используются напрямую по ссылкам из старого дерева. Такие структуры называются персистентыми (просто термин, ничего общего с сохранением на диск).

Естественно, это не даром. Скорость часто ниже. Если совсем грубо, то на небольших объемах, на типовых операциях (добавить элемент, поискать элемент) персистентные структуры примерно в 2 раза дороже. В большинстве случаев это _несущественная разница_.

Давайте договоримся, что цифры производительности я привожу наобум, из каких-то конкретных случаев, на тех реализациях, которые я видел, возможно даже, из конкретных частных случаев из моего опыта. Поэтому воспринимайте их с долей скептицизма и не полагайтесь в каких-то своих расчетах, а лучше меряйте сами. (конечно, я понимаю, что если кто-то на докладе говорит «в 2 раза медленнее», даже с таким количеством оговорок, как у меня, все запомнят только эту цифру и всегда будут на нее ссылаться).

Впрочем, есть и обратная сторона. Некоторые задачи решаются эффективнее: например, создать большой vector (10k элементов) уже на 30% быстрее, чем js array, потому что реаллокаций меньше (опять же, тест мой, неформальный, из подвернувшейся под руку задачи).

Еще одно важное свойство: за счет переиспользования структуры хранить N копий, которые были построены одна из другой (например, все предыдущие версии) гораздо эффективнее, чем наивно копировать обычные массивы и словари. К примеру, в goya (пиксельный редактор) хранение 100 фреймов истории (холст 64×64 пикселя) обошлось на порядок дешевле, чем хранение полных копий. Эта разница в эффективности хранения — часто — как раз _существенна_.

Наконец, ленивость. Прием очень простой: вместо того, чтобы посчитать и передавать готовые данные, мы оперируем функциями, которые эти данные вычислят по запросу. Одно из применений — представление бесконечных структур (например, список всех натуральных чисел можно так сделать), другое — оптимизация вычислений. Функция может сказать «вот мой результат», хотя на самом деле ничего не сделать, только сгенерировать замыкание, которое результат может вычислить. Вызывающая сторона по необходимости вызовет эту функцию или не вызовет.

Итак, наконец мы можем поговорить о том, как это применять.

Традиционно интерфейс — это одно большое дерево вложенных объектов — окон, кнопок, прямоугольников — которые в произвольном порядке хаотично меняются, чтобы отразить переходы состояний. В вебе это стандартно DOM-дерево:

Давайте представим, что DOM-дерево неизменяемо. Тогда все переходы между состояниями можно выразить чистыми функциями:

Уже неплохо, потому что дает как минимум тестируемость — захотели посмотреть, как прячется окошко, создали DOM с окошком, вызвали DOM² = hideWindow(DOM), проверили что в DOM² окошка уже не видно.

У этого подхода есть проблема нелинейного роста сложности. Если у нас N состояний интерфейса, нужно реализовать N² переходов:

Проблема решается выделением модели:

Мы реализуем (чистыми функциями, разумеется) только render: Model → DOM (плюс переход между моделями, но он, как правило, принципиально проще), а конверсию DOM → DOM² берет на себя библиотека. Так работает фэйсбуковский react.js и другие virtual DOM реализации. Вместо развесистых и сложных мутаций DOM мы пишем одну функцию, которая вычисляет DOM с нуля, хоть каждый кадр, на основе только входных данных — в данном случае, модели.

Может показаться, что это дороже чем мутации — да, но не существенно, как показал успех React, это работает достаточно быстро, чтобы делать 60 FPS интерфейсы и обгонять Angular.

Самое важное, что такой подход снимает головную боль по мутации DOM (превращая квадратичную зависимость по количеству рендер-кода в линейную) и открывает возможности для высокоуровневых оптимизаций.

Самая очевидная — ленивость. Куски нового дерева можно не вычислять, если вычислены куски старого (мемоизация!), их рендеринг это чистая функция и входные параметры не изменились. В React это по-умолчанию выключено, но там, где вы можете дать такие гарантии, это можно частично включить (см. shouldComponentUpdate).

Иметь чистую функцию рендеринга удобно и по другой причине: можно внезапно показать любую модель. Это означает, что что бы мы ни подсунули рендерингу, он это отрисует. Сильно упрощает:

*   Рендеринг превью (спекулятивный, «что если?»)
*   Ренедринг истории (как выглядело на модели, которая была шаг назад?)
*   Тестирование (привести UI в заданное состояние)

Также явное разделение состояния (модель) и поведения (чистые функции) позволяет делать горячее обновление кода, что очень важно для интерактивной разработки.

Теперь давайте посмотрим, что получится, если сделать модель иммутабельной?

Впервые идею сделать модель персистентной [предложил](http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/) David Nolen, мейнтейнер ClojureScript, в библиотеке Om. Он заметил, что таким образом мы получаем почти даром две вещи: undo/redo стек и эффективную ленивость.

Чтобы сделать undo/redo, мы просто сохраняем ссылки на все состояния модели. Поскольку они иммутабельные, а функция рендеринга чистая, мы можем на любую модель в любой момент переключиться.

Например, в пиксельном редакторе Goya весь код undo/redo занимает 10 строк, буквально:

А вот ленивость, как я ее объяснял для React-а, с иммутабельными данными можно включить везде и сделать это эффективно. Как вы помните, в иммутабельных структурах данных нельзя сделать inplace модификацию, а значит, чтобы определить, были ли изменения, не нужно делать глубокое сравнение. Это позволяет быстро реализовать shouldComponentUpdate в React простым сравнением ссылок и эффективно отсекать целые ветки компонентов, если мы видим, что аргумент рендер-функции не поменялся.

Итак, давайте взглянем на архитектуру еще раз:

*   копим историю изменений модели
*   пишем функцию рендеринга из модели в virtual DOM
*   переключаемся между моделям и получаем undo/redo
*   эффективное хранение истории
*   получаем превьюшки (спекулятивный рендеринг)
*   легко юнит-тестировать

Рендеринг при этом ленивый, поскольку он сравнивает иммутабельные модели между собой, он может очень эффективно отсечь целые куски DOM-дерева, просто сравнив указатели на данные, от которых они зависят.

Дальше можно с этой архитектурой делать разные вариации, насколько фантазия позволяет.

Можно [сериализовать всю модель в строку](http://blog.circleci.com/local-state-global-concerns/) и переслать по почте. Потом вставить ее и получить в точности то же состояние интерфейса:

Можно локально кешировать модель в localStorage и рендерить ее сразу, параллельно ходить на сервер за свежей, по приходу переключаться.

С сохраненной историей модели, помимо undo/redo, можно работать как с источником данных. Можно делать по ней запросы, например: поле ввода автодополняет то, что пользователь в него уже вводил.

Можно синхронизировать историю на сервер — тогда при загрузке страницы вы сможете отменить последнее действие, которое сделали, может быть, два года назад.

Вот пример event sourcing архитектуры, над которой я сейчас работаю:

Тут используется свойство иммутабельности модели. Лог событий делится на две части: подтвержденный сервером и локальный оптимистичный. Приложение хранит две модели: насчитанную только по подтвержденному сервером логу, и текущую оптимистичную модель. Когда пользователь что-то нажимает и генерирует таким образом событие, оно сразу же попадает в оптимистичный лог и обновляет локальную модель. Эта модель используется для рендеринга интерфейса, на все действия пользователь получает немедленную обратную связь, даже если соединения с сервером нет. Параллельно фоновый процесс пытается синхронизировать локальные события с сервером. Когда это удается, сервер присылает какой-то ответ. Вне зависимости от содержимого, локальная модель выбрасывается, и события применяются поверх последней подтвержденной модели. В простейшем случае сервер просто подтвердит все события пользователя, таким образом мы получим в точности такую же модель, как та, на которую смотрит пользователь. С точки зрения интерфейса ничего не произойдет.

Красота этого подхода в том, что он позволяет прозрачно обрабатывать конфликты. По сути, никаких конфликтов и нет: если у сервера свой взгляд на очередность событий, клиент просто согласится с ней. Если в лог вплелись события других пользователей, то они точно так же вплетутся в локальный лог.

Elm использует иммутабельность для реализации фич еще более фантастических: у них [есть time-travelling debugger](http://debug.elm-lang.org):

Если ты видишь, что что-то сломалось, не беда — можно отмотать назад и посмотреть, как оно там было. Можно даже поменять код в середине дебага и посмотреть, как оно бы сложилось, если бы он сразу был такой.

Это возможно благодаря простым вещам, о которых мы только что говорили: чистоте, иммутабельности состояния и сохранения истории всех событий. Если вы именно так построили архитектуру приложения, вы можете и у себя собрать подобное.

## Практические советы

Давайте теперь перейдем к практической части доклада. Более-менее практических реализаций описанной архитектуры я знаю две.

Первая — это ClojureScript. Это диалект Clojure с компиляцией в JS, Clojure это в свою очередь современный диалект Лиспа, только функциональный, с упором на хороший interop и практичность. Сам язык предлагает персистентные структуры данных, очень хорошие — из него потом их везде порастащили.

Описанная архитектура реализуется в ClojureScript на React-based фреймворках Om, Quiescent, Reagent, Rum и на freactive со своим virtual dom. Состояние все они хранят в персистентных структурах данных, кастомных или встроенных.

На Om построены последняя версия [Prismatic-а](http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/), персонализированного агрегатора новостей:

[Circle.ci](https://circleci.com/), continous integration:

[Precursor](https://precursorapp.com/), инструмент для легковесного прототипирования UI (первую версию ребята собрали за 2 дня на хакатоне):

и [Goya](https://github.com/jackschaedler/goya), пиксельный редактор:

Во всех случаях разработчики поют дифирамбы простоте разработки и низковисящим фруктам, о которых мы говорили.

Вторая реализация это язык Elm. Это диалект Хаскеля, разработанный специально под подобную архитектуру приложений — по-другому там практически и не получится ничего сделать. Помимо перечисленного, у них еще есть явная работа с событиями в духе FRP. Практические применения мне неизвестны, но выглядит это наиболее живо из всей остальной compile-to-js функциональщины.

Наконец, все то же самое можно делать и на простом js. Ребята из React команды подхватили идею Om и сделали библиотеку immutable.js с персистентными структурами — теперь все то же самое можно собрать и на vanilla.js (естественно, со всеми недостатками джаваскрипта — легким порогом вхождения, большим количеством доступных разработчиков, прекрасным тулингом, переносимостью и т.п.)

Еще раз подчеркну, что выбор языка в данном случае мне кажется вещью третьестепенной важности. Скажем, на различие в качестве/скорости разработки/производительности язык может повлиять на 10%, а правильная архитектура — на 90%.

## Итого

Использование идей функционального программирования открывает интересные возможности для клиентских архитектур. Такие приложения легче делать, отлаживать, поддерживать, за счет подхода они получаются более качественными и надежными, а многие вещи даются почти бесплатно. В ближайшем будущем более-менее все приложения как-то так будут выглядеть, а virtual dom стандартизуют и включат в браузер. Даже уже сейчас учить отдельный функциональный язык для этого необязательно.",null,undefined
2015-07-03T20:05:59.000Z,https://tjournal.ru/p/hostel-senoval,false,"[""best""]",article,"Хостел Senoval — Инженер-программист из Петербурга рассказал, как он стал ф",null,pocket,null,"# Хостел Senoval

by [Ольга Жигулина](https://www.facebook.com/tjournal/), [tjournal.ru](http://tjournal.ru)  
July 3, 2015 07:02 AM

Инженер-программист из Петербурга рассказал, как он стал фермером и начал поддерживать экотуризм

Поделиться

Поделиться

Твитнуть

В избранное

В избранном

2 июля на популярном сервисе для путешественников Airbnb появилось [необычное предложение](https://www.airbnb.ru/rooms/7118037) размещения в Псковской области, обозначенное как хостел «Сеновал».

Владельцы небольшой семейной фермы предложили туристам остановиться в палатке на их земле или расположиться на настоящем сеновале, пообещав за небольшую плату (600 рублей за сутки или бесплатно в обмен на помощь по хозяйству) предоставить здоровую еду, интересную компанию и необычный опыт в популярном жанре экотуризма.

Программист и основатель фермы Владимир из Петербурга рассказал TJ о том, как перебрался с семьёй из большого города в деревню в Псковской области, где всерьёз занялся сельским хозяйством и поддержанием экотуризма.

**Владимир, у вас в профиле на Airbnb написано, что вы инженер-программист, подкастер и фермер — как вообще сложилось такое сочетание?**  

Вообще я с детства программист, школу иногда прогуливал, когда очередная идея программы захватывала с головой. Работу, естественно, нашёл в этой области.

> В какой-то момент понял, что лучше жить на природе и раз в месяц ездить в город, чем жить в городе и раз в месяц выбираться на природу.

Сейчас ведь ни транспорт, ни связь, которая мне нужна для удалённой работы — не проблема, хотя 10 лет назад такое было невозможно. Жена Юлия меня в этом поддержала, весной 2012 года мы собрали вещи и уехали из Петербурга в лес.

Сначала у нас не было планов заниматься сельским хозяйством, но я втянулся. Оказалось, что видовой состав местных лесов довольно скудный, а выращивать деревья — очень интересно. Заниматься конструированием — или хотя бы оптимизацией — экосистемы не менее интересно, чем программировать. Так же появился и огород: времени требует немного, зато всё тёплое время года своя зелень, это здорово.

С козами аналогично, но они недавно появились, молока ещё не дают. Будут у нас ещё куры, лошади. Животных на убой мы не разводим и не планируем — у нас в поселении есть договорённость этого не делать.

Зарабатывать на жизнь пока приходится программированием, но будущая основа нашего хозяйства — лесной питомник, где мы уже сейчас выращиваем саженцы деревьев. Пока объёмы небольшие, несколько сотен штук в прошлые годы, несколько тысяч в этом году. Кое-что высаживаем на нашем участке, большую часть раздаём соседям, для повышения биоразнообразия местности, в которой мы живём.

Но в будущем я планирую зарабатывать именно на саженцах, выращивая часть крупномеров на продажу для озеленения. Основную часть саженцев и дальше будем растить для восстановления, улучшения и разведения лесов в нашем районе. Лес ведь основа экосистемы, лес — всему голова.

Под Москвой с 2010 года массово гибнет ель (ветровалы и короедники, спасибо лесному кодексу), сейчас вот ясень массово усыхает. Однажды появится какой-нибудь жук, который съест все наши ольховые леса, и нам придётся жить в пустыне. Это плохая перспектива, и чтобы этого не произошло, нужно сажать как можно больше деревьев самых разных видов.

> Никто не позаботится о нашем будущем, кроме нас самих. Такая вот экология.

Ну а подкастинг занимал меня несколько лет. Какое-то время я записывал подкасты регулярно — раз в неделю, вёл прямые эфиры на небольшом интернет-радио (аудитория была всего несколько сотен человек). Это было интересно с технической точки зрения, интересно и до сих пор, но сейчас, к небольшому сожалению, на это времени не остаётся — столько всего интересного можно делать на земле. Полученные во времена подкастинга навыки я сейчас использую только для озвучивания обучающих фильмов, которые никто почему-то не удосужился перевести на русский язык.

**Кстати про русский язык, на Airbnb у вас описание только на английском: это потому что вы ориентируетесь преимущественно на иностранцев? Будет перевод?**

Идея размещения на Airbnb появилась вчера, поэтому и заполнена анкета пока только на английском языке. Обязательно будет перевод.

**Но туристы у вас и так уже бывают?**

Туристы к нам активно приезжают второй год. Это не совсем обычные туристы, это волонтёры, скорее, агротуристы. В мире это направление наиболее известно как WWOOF (worldwide opportunities on organic farms), когда люди работают на фермах 4-6 часов в сутки, за это получают еду и кров, никто никому не платит. Такой отдых с пользой обычно сопряжён с получением новых навыков. К нам по такой схеме люди, в основном, и приезжают.

В прошлом году мы приняли 16 человек, в этом году уже 34, и заявками всё забито до конца сентября. Сейчас у нас шесть гостей (волонтёров) проживает, в пике было десять человек. Это весело, очень производительно, и позволяет почувствовать, каково это — жить большой семьёй, которую мы планируем.

**А что именно вы можете предложить туристам? И почему вообще решили пускать их на свою землю?**

Предложить мы можем проживание в палаточном лагере. Мы предоставляем воду, электричество, Wi-Fi, стиральную машину, душ, разнообразное вегетарианское питание. Свежий чистый воздух, лес с грибами, озеро без людей, тишину и спокойствие, пение птиц, не засвеченное городскими огнями звёздное небо, вот это всё. В четырёх километрах от нас находится Себежский национальный парк, у нас есть велосипеды для прогулок.

Пустить их на землю решили, потому что это интересно, и это серьёзное подспорье. Десять пар рук или одна — большая разница (жена занимается ребёнком и готовкой, ей не до подсобного хозяйства). Ну и образовательный момент немаловажен.

> Мы выбрали для себя такую жизнь, потому что видим в ней много плюсов, и если есть люди, которые думают так же, но боятся трудностей — мы готовы поделиться нашим опытом, помочь избежать каких-то ошибок, понять, что всё не так сложно, как кажется, нужна только вера в себя.

**Ясно, а что дальше, какие** **перспективы?**

Экотуризм, и агротуризм в частности — это основной источник честного заработка в большинстве современных экопоселений (если не считать сдачу недвижимости). Развивать его можно бесконечно, причём не только для нужд поселения.

Себежский район вообще очень хорошо подходит для туризма — жаль, что никому до этого нет дела. Районная администрация планирует к 2025 году создать несколько новых туристических объектов, хорошо, если нам по пути. Но мы и сами не готовы сидеть сложа руки. Например, есть мысль организовать в поселении туристический лагерь в более-менее привычном формате, со сменами, культурной программой, сотрудничать в этом направлении с нацпарком.

Сейчас на нашей ферме мы активно внедряем агролесоводство (по-английски agroforestry) — это современная, очень перспективная методика совместного ведения пермакультурного сельского и лесного хозяйства, в промышленных масштабах, которая позволяет практически удвоить выход сельскохозяйственной продукции с существующей площади и диверсифицировать его без ущерба для механизации.

Очень хочется довести лесополе хотя бы до среднемировых показателей эффективности, чтобы будущим российским фермерам было, где посмотреть на это воочию. Это тоже важное направление нашей деятельности. Когда сельхозпродукцию выращивать надоест — переквалифицируем лесополе (alley farming) в лесопастбище (silvopasture), заведём альпак и зубров, устроим контактный зоопарк. Какие-то такие перспективы.

**Вы ведь занимаетесь не только приёмом туристов?**

Вообще мы занимаемся не столько приёмом гостей, сколько пермакультурой и совершенствованием среды обитания. Пермакультуру мы пока только осваиваем, и ничего нового не изобретаем, но всё равно есть что показать.

Например, ловушки для слепней, которые схематично описаны в старых советских книгах. Ловушки такие производят на западе, стоят они от 15 тысяч рублей, а можно собрать на коленке, материал обойдётся в тысячу с небольшим. Если поискать в сети «ловушку для слепней», то найдёте, скорее всего, нашу инструкцию, по которой за последние два года их по стране наклепали тысячи штук. Слепней они уничтожают, как пылесос, а слепни ведь очень сильно досаждают животным, снижают надои и всё такое.

Ещё летучие мыши есть, которых, оказывается, тоже можно приманивать, строить для них дома, а летучие мыши — практически единственные естественные враги множества насекомых-вредителей, включая комаров. Привлечение летучих мышей — тоже пермакультура, на западе этим давно и успешно занимаются, а у нас в стране этой темой никто не владеет. Приходится самим разбирать, адаптировать и популяризировать этот опыт.

Туристы к нам приезжают, в основном, посмотреть на это всё.

[#Категория\_Интервью](https://tjournal.ru/category/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F_%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%B2%D1%8C%D1%8E/default) [#экология](https://tjournal.ru/category/%D1%8D%D0%BA%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F/default) [#AirBnB](https://tjournal.ru/category/AirBnB/default) [#экотуризм](https://tjournal.ru/category/%D1%8D%D0%BA%D0%BE%D1%82%D1%83%D1%80%D0%B8%D0%B7%D0%BC/default)",null,undefined
